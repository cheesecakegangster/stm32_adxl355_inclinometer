
Inclinometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  080090d4  080090d4  000190d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009220  08009220  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009220  08009220  00019220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009228  08009228  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009228  08009228  00019228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800922c  0800922c  0001922c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009230  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db0  20000160  08009390  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f10  08009390  00021f10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012142  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003322  00000000  00000000  000322d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  000355f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  000364c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001983b  00000000  00000000  00037210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ec0  00000000  00000000  00050a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac0b  00000000  00000000  0006390b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  000ee568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080090bc 	.word	0x080090bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	080090bc 	.word	0x080090bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ADXL355_init>:
#include "ADXL355_SPI.h"

#define SPI_TIMEOUT 1000

uint8_t ADXL355_init(ADXL355_type *device, SPI_HandleTypeDef *hspi)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	device->hspi				= hspi;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	601a      	str	r2, [r3, #0]

	device->acceleration_x_g 	= 0.0f;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
	device->acceleration_y_g 	= 0.0f;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f04f 0200 	mov.w	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
	device->acceleration_z_g 	= 0.0f;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f04f 0200 	mov.w	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]

	device->temperature_deg_c	= 0.0f;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f04f 0200 	mov.w	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]

	uint8_t errNum = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	// check if the correct device is connected
	uint8_t rxdata = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	737b      	strb	r3, [r7, #13]
	status = ADXL355_ReadRegister(device, ADXL355_DEVID_ID, &rxdata);
 80005bc:	f107 030d 	add.w	r3, r7, #13
 80005c0:	461a      	mov	r2, r3
 80005c2:	2100      	movs	r1, #0
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f000 f81d 	bl	8000604 <ADXL355_ReadRegister>
 80005ca:	4603      	mov	r3, r0
 80005cc:	73bb      	strb	r3, [r7, #14]
	printf("status = %i", status);
 80005ce:	7bbb      	ldrb	r3, [r7, #14]
 80005d0:	4619      	mov	r1, r3
 80005d2:	480b      	ldr	r0, [pc, #44]	; (8000600 <ADXL355_init+0x7c>)
 80005d4:	f007 fde4 	bl	80081a0 <iprintf>
	errNum += (status != HAL_OK);
 80005d8:	7bbb      	ldrb	r3, [r7, #14]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	bf14      	ite	ne
 80005de:	2301      	movne	r3, #1
 80005e0:	2300      	moveq	r3, #0
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	461a      	mov	r2, r3
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	4413      	add	r3, r2
 80005ea:	73fb      	strb	r3, [r7, #15]

	if (rxdata != ADXL355_DEVID_ID_VAL){
 80005ec:	7b7b      	ldrb	r3, [r7, #13]
 80005ee:	2bad      	cmp	r3, #173	; 0xad
 80005f0:	d001      	beq.n	80005f6 <ADXL355_init+0x72>
		return rxdata;
 80005f2:	7b7b      	ldrb	r3, [r7, #13]
 80005f4:	e000      	b.n	80005f8 <ADXL355_init+0x74>
	}
	else
	{
		return rxdata;
 80005f6:	7b7b      	ldrb	r3, [r7, #13]
	}
	//return 0;
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	080090d4 	.word	0x080090d4

08000604 <ADXL355_ReadRegister>:
//}

// low level functions

HAL_StatusTypeDef ADXL355_ReadRegister(ADXL355_type *device, uint8_t txdata, uint8_t *rxdata)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af02      	add	r7, sp, #8
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	460b      	mov	r3, r1
 800060e:	607a      	str	r2, [r7, #4]
 8000610:	72fb      	strb	r3, [r7, #11]
	return HAL_SPI_TransmitReceive(device->hspi, &txdata, rxdata, 1, SPI_TIMEOUT); //(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6818      	ldr	r0, [r3, #0]
 8000616:	f107 010b 	add.w	r1, r7, #11
 800061a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061e:	9300      	str	r3, [sp, #0]
 8000620:	2301      	movs	r3, #1
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	f003 f9f7 	bl	8003a16 <HAL_SPI_TransmitReceive>
 8000628:	4603      	mov	r3, r0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f000 fc49 	bl	8000ed0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f84d 	bl	80006dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 f947 	bl	80008d4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000646:	f000 f8b1 	bl	80007ac <MX_SPI2_Init>
  MX_DMA_Init();
 800064a:	f000 f91b 	bl	8000884 <MX_DMA_Init>
  MX_SPI5_Init();
 800064e:	f000 f8e3 	bl	8000818 <MX_SPI5_Init>
  MX_USB_DEVICE_Init();
 8000652:	f007 f863 	bl	800771c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  ADXL355_type adxl355;
  for(int i = 0; i < 5; i++){
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
 800065a:	e00a      	b.n	8000672 <main+0x3e>
	  printf("Starting in %i...\n\r", i);
 800065c:	69f9      	ldr	r1, [r7, #28]
 800065e:	481a      	ldr	r0, [pc, #104]	; (80006c8 <main+0x94>)
 8000660:	f007 fd9e 	bl	80081a0 <iprintf>
	  HAL_Delay(1000);
 8000664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000668:	f000 fca4 	bl	8000fb4 <HAL_Delay>
  for(int i = 0; i < 5; i++){
 800066c:	69fb      	ldr	r3, [r7, #28]
 800066e:	3301      	adds	r3, #1
 8000670:	61fb      	str	r3, [r7, #28]
 8000672:	69fb      	ldr	r3, [r7, #28]
 8000674:	2b04      	cmp	r3, #4
 8000676:	ddf1      	ble.n	800065c <main+0x28>
  }
  printf("Requesting data from ADXL355... \n\r");
 8000678:	4814      	ldr	r0, [pc, #80]	; (80006cc <main+0x98>)
 800067a:	f007 fd91 	bl	80081a0 <iprintf>
  uint8_t status;
  status = ADXL355_init(&adxl355, &hspi2);
 800067e:	1d3b      	adds	r3, r7, #4
 8000680:	4913      	ldr	r1, [pc, #76]	; (80006d0 <main+0x9c>)
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff7e 	bl	8000584 <ADXL355_init>
 8000688:	4603      	mov	r3, r0
 800068a:	76fb      	strb	r3, [r7, #27]
  printf("Status: %i\n\r", status);
 800068c:	7efb      	ldrb	r3, [r7, #27]
 800068e:	4619      	mov	r1, r3
 8000690:	4810      	ldr	r0, [pc, #64]	; (80006d4 <main+0xa0>)
 8000692:	f007 fd85 	bl	80081a0 <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(2000);
 8000696:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800069a:	f000 fc8b 	bl	8000fb4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // PC13 = LED
 800069e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a2:	480d      	ldr	r0, [pc, #52]	; (80006d8 <main+0xa4>)
 80006a4:	f001 fa43 	bl	8001b2e <HAL_GPIO_TogglePin>
	printf("Requesting data from ADXL355... \n\r");
 80006a8:	4808      	ldr	r0, [pc, #32]	; (80006cc <main+0x98>)
 80006aa:	f007 fd79 	bl	80081a0 <iprintf>
	status = ADXL355_init(&adxl355, &hspi2);
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	4907      	ldr	r1, [pc, #28]	; (80006d0 <main+0x9c>)
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff66 	bl	8000584 <ADXL355_init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	76fb      	strb	r3, [r7, #27]
	printf("Status: %i\n\r", status);
 80006bc:	7efb      	ldrb	r3, [r7, #27]
 80006be:	4619      	mov	r1, r3
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <main+0xa0>)
 80006c2:	f007 fd6d 	bl	80081a0 <iprintf>
	HAL_Delay(2000);
 80006c6:	e7e6      	b.n	8000696 <main+0x62>
 80006c8:	080090e0 	.word	0x080090e0
 80006cc:	080090f4 	.word	0x080090f4
 80006d0:	2000017c 	.word	0x2000017c
 80006d4:	08009118 	.word	0x08009118
 80006d8:	40020800 	.word	0x40020800

080006dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	2230      	movs	r2, #48	; 0x30
 80006e8:	2100      	movs	r1, #0
 80006ea:	4618      	mov	r0, r3
 80006ec:	f007 fd50 	bl	8008190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f0:	f107 030c 	add.w	r3, r7, #12
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	2300      	movs	r3, #0
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <SystemClock_Config+0xc8>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000708:	4a26      	ldr	r2, [pc, #152]	; (80007a4 <SystemClock_Config+0xc8>)
 800070a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070e:	6413      	str	r3, [r2, #64]	; 0x40
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <SystemClock_Config+0xc8>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000718:	60bb      	str	r3, [r7, #8]
 800071a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <SystemClock_Config+0xcc>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a20      	ldr	r2, [pc, #128]	; (80007a8 <SystemClock_Config+0xcc>)
 8000726:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800072a:	6013      	str	r3, [r2, #0]
 800072c:	4b1e      	ldr	r3, [pc, #120]	; (80007a8 <SystemClock_Config+0xcc>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800073c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000742:	2302      	movs	r3, #2
 8000744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800074a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800074c:	2319      	movs	r3, #25
 800074e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000750:	23c0      	movs	r3, #192	; 0xc0
 8000752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000754:	2302      	movs	r3, #2
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000758:	2304      	movs	r3, #4
 800075a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	f107 0320 	add.w	r3, r7, #32
 8000760:	4618      	mov	r0, r3
 8000762:	f002 fc9f 	bl	80030a4 <HAL_RCC_OscConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800076c:	f000 f95d 	bl	8000a2a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000770:	230f      	movs	r3, #15
 8000772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	2302      	movs	r3, #2
 8000776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000778:	2300      	movs	r3, #0
 800077a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	2103      	movs	r1, #3
 800078c:	4618      	mov	r0, r3
 800078e:	f002 ff01 	bl	8003594 <HAL_RCC_ClockConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000798:	f000 f947 	bl	8000a2a <Error_Handler>
  }
}
 800079c:	bf00      	nop
 800079e:	3750      	adds	r7, #80	; 0x50
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007b0:	4b17      	ldr	r3, [pc, #92]	; (8000810 <MX_SPI2_Init+0x64>)
 80007b2:	4a18      	ldr	r2, [pc, #96]	; (8000814 <MX_SPI2_Init+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <MX_SPI2_Init+0x64>)
 80007b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <MX_SPI2_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007c4:	4b12      	ldr	r3, [pc, #72]	; (8000810 <MX_SPI2_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <MX_SPI2_Init+0x64>)
 80007cc:	2202      	movs	r2, #2
 80007ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <MX_SPI2_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <MX_SPI2_Init+0x64>)
 80007d8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007de:	4b0c      	ldr	r3, [pc, #48]	; (8000810 <MX_SPI2_Init+0x64>)
 80007e0:	2238      	movs	r2, #56	; 0x38
 80007e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <MX_SPI2_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_SPI2_Init+0x64>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <MX_SPI2_Init+0x64>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_SPI2_Init+0x64>)
 80007f8:	220a      	movs	r2, #10
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <MX_SPI2_Init+0x64>)
 80007fe:	f003 f881 	bl	8003904 <HAL_SPI_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000808:	f000 f90f 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	2000017c 	.word	0x2000017c
 8000814:	40003800 	.word	0x40003800

08000818 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_SPI5_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_SPI5_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_SPI5_Init+0x64>)
 8000824:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000828:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_SPI5_Init+0x64>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_SPI5_Init+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_SPI5_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_SPI5_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_SPI5_Init+0x64>)
 8000844:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000848:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_SPI5_Init+0x64>)
 800084c:	2200      	movs	r2, #0
 800084e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_SPI5_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_SPI5_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_SPI5_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_SPI5_Init+0x64>)
 8000864:	220a      	movs	r2, #10
 8000866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_SPI5_Init+0x64>)
 800086a:	f003 f84b 	bl	8003904 <HAL_SPI_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000874:	f000 f8d9 	bl	8000a2a <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	200001d4 	.word	0x200001d4
 8000880:	40015000 	.word	0x40015000

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_DMA_Init+0x4c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <MX_DMA_Init+0x4c>)
 8000894:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_DMA_Init+0x4c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	200e      	movs	r0, #14
 80008ac:	f000 fc81 	bl	80011b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008b0:	200e      	movs	r0, #14
 80008b2:	f000 fc9a 	bl	80011ea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	200f      	movs	r0, #15
 80008bc:	f000 fc79 	bl	80011b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80008c0:	200f      	movs	r0, #15
 80008c2:	f000 fc92 	bl	80011ea <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	; 0x28
 80008d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
 80008ee:	4b42      	ldr	r3, [pc, #264]	; (80009f8 <MX_GPIO_Init+0x124>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a41      	ldr	r2, [pc, #260]	; (80009f8 <MX_GPIO_Init+0x124>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <MX_GPIO_Init+0x124>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	4b3b      	ldr	r3, [pc, #236]	; (80009f8 <MX_GPIO_Init+0x124>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a3a      	ldr	r2, [pc, #232]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b38      	ldr	r3, [pc, #224]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	4b34      	ldr	r3, [pc, #208]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a33      	ldr	r2, [pc, #204]	; (80009f8 <MX_GPIO_Init+0x124>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b31      	ldr	r3, [pc, #196]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b2d      	ldr	r3, [pc, #180]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a2c      	ldr	r2, [pc, #176]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b2a      	ldr	r3, [pc, #168]	; (80009f8 <MX_GPIO_Init+0x124>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000960:	4826      	ldr	r0, [pc, #152]	; (80009fc <MX_GPIO_Init+0x128>)
 8000962:	f001 f8cb 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2113      	movs	r1, #19
 800096a:	4825      	ldr	r0, [pc, #148]	; (8000a00 <MX_GPIO_Init+0x12c>)
 800096c:	f001 f8c6 	bl	8001afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000976:	2301      	movs	r3, #1
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	481c      	ldr	r0, [pc, #112]	; (80009fc <MX_GPIO_Init+0x128>)
 800098a:	f000 ff33 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800098e:	2313      	movs	r3, #19
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4816      	ldr	r0, [pc, #88]	; (8000a00 <MX_GPIO_Init+0x12c>)
 80009a6:	f000 ff25 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009aa:	2380      	movs	r3, #128	; 0x80
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	4811      	ldr	r0, [pc, #68]	; (8000a04 <MX_GPIO_Init+0x130>)
 80009be:	f000 ff19 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	480a      	ldr	r0, [pc, #40]	; (8000a04 <MX_GPIO_Init+0x130>)
 80009da:	f000 ff0b 	bl	80017f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2100      	movs	r1, #0
 80009e2:	2017      	movs	r0, #23
 80009e4:	f000 fbe5 	bl	80011b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009e8:	2017      	movs	r0, #23
 80009ea:	f000 fbfe 	bl	80011ea <HAL_NVIC_EnableIRQ>

}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020800 	.word	0x40020800
 8000a00:	40020000 	.word	0x40020000
 8000a04:	40020400 	.word	0x40020400

08000a08 <_write>:

/* USER CODE BEGIN 4 */
// redirect printf to USB
int _write(int file, char *ptr, int len) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	4619      	mov	r1, r3
 8000a1a:	68b8      	ldr	r0, [r7, #8]
 8000a1c:	f006 ff3c 	bl	8007898 <CDC_Transmit_FS>
 8000a20:	687b      	ldr	r3, [r7, #4]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2e:	b672      	cpsid	i
}
 8000a30:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <Error_Handler+0x8>

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40023800 	.word	0x40023800

08000a84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08c      	sub	sp, #48	; 0x30
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a78      	ldr	r2, [pc, #480]	; (8000c84 <HAL_SPI_MspInit+0x200>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	f040 809a 	bne.w	8000bdc <HAL_SPI_MspInit+0x158>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	4b76      	ldr	r3, [pc, #472]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a75      	ldr	r2, [pc, #468]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000ab2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b73      	ldr	r3, [pc, #460]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac0:	61bb      	str	r3, [r7, #24]
 8000ac2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	4b6f      	ldr	r3, [pc, #444]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a6e      	ldr	r2, [pc, #440]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000ace:	f043 0302 	orr.w	r3, r3, #2
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b6c      	ldr	r3, [pc, #432]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697b      	ldr	r3, [r7, #20]
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000ae0:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8000ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aee:	2303      	movs	r3, #3
 8000af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000af2:	2305      	movs	r3, #5
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	4619      	mov	r1, r3
 8000afc:	4863      	ldr	r0, [pc, #396]	; (8000c8c <HAL_SPI_MspInit+0x208>)
 8000afe:	f000 fe79 	bl	80017f4 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000b02:	4b63      	ldr	r3, [pc, #396]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b04:	4a63      	ldr	r2, [pc, #396]	; (8000c94 <HAL_SPI_MspInit+0x210>)
 8000b06:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000b08:	4b61      	ldr	r3, [pc, #388]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b0e:	4b60      	ldr	r3, [pc, #384]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b10:	2240      	movs	r2, #64	; 0x40
 8000b12:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b14:	4b5e      	ldr	r3, [pc, #376]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b1a:	4b5d      	ldr	r3, [pc, #372]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b20:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b22:	4b5b      	ldr	r3, [pc, #364]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b28:	4b59      	ldr	r3, [pc, #356]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000b2e:	4b58      	ldr	r3, [pc, #352]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b34:	4b56      	ldr	r3, [pc, #344]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b3a:	4b55      	ldr	r3, [pc, #340]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b3c:	2204      	movs	r2, #4
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b40:	4b53      	ldr	r3, [pc, #332]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b42:	2203      	movs	r2, #3
 8000b44:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b46:	4b52      	ldr	r3, [pc, #328]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b4c:	4b50      	ldr	r3, [pc, #320]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b52:	484f      	ldr	r0, [pc, #316]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b54:	f000 fb64 	bl	8001220 <HAL_DMA_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8000b5e:	f7ff ff64 	bl	8000a2a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4a4a      	ldr	r2, [pc, #296]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b66:	649a      	str	r2, [r3, #72]	; 0x48
 8000b68:	4a49      	ldr	r2, [pc, #292]	; (8000c90 <HAL_SPI_MspInit+0x20c>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000b6e:	4b4a      	ldr	r3, [pc, #296]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000b70:	4a4a      	ldr	r2, [pc, #296]	; (8000c9c <HAL_SPI_MspInit+0x218>)
 8000b72:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000b74:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b7a:	4b47      	ldr	r3, [pc, #284]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b80:	4b45      	ldr	r3, [pc, #276]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b86:	4b44      	ldr	r3, [pc, #272]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b8c:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b8e:	4b42      	ldr	r3, [pc, #264]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b94:	4b40      	ldr	r3, [pc, #256]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000b9a:	4b3f      	ldr	r3, [pc, #252]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000ba0:	4b3d      	ldr	r3, [pc, #244]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ba6:	4b3c      	ldr	r3, [pc, #240]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000ba8:	2204      	movs	r2, #4
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bac:	4b3a      	ldr	r3, [pc, #232]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000bae:	2203      	movs	r2, #3
 8000bb0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000bb2:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000bb8:	4b37      	ldr	r3, [pc, #220]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000bbe:	4836      	ldr	r0, [pc, #216]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000bc0:	f000 fb2e 	bl	8001220 <HAL_DMA_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8000bca:	f7ff ff2e 	bl	8000a2a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a31      	ldr	r2, [pc, #196]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000bd2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bd4:	4a30      	ldr	r2, [pc, #192]	; (8000c98 <HAL_SPI_MspInit+0x214>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000bda:	e04f      	b.n	8000c7c <HAL_SPI_MspInit+0x1f8>
  else if(hspi->Instance==SPI5)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a2f      	ldr	r2, [pc, #188]	; (8000ca0 <HAL_SPI_MspInit+0x21c>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d14a      	bne.n	8000c7c <HAL_SPI_MspInit+0x1f8>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000bf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a1f      	ldr	r2, [pc, #124]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a18      	ldr	r2, [pc, #96]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <HAL_SPI_MspInit+0x204>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000c4a:	2306      	movs	r3, #6
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	480d      	ldr	r0, [pc, #52]	; (8000c8c <HAL_SPI_MspInit+0x208>)
 8000c56:	f000 fdcd 	bl	80017f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c60:	2302      	movs	r3, #2
 8000c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000c6c:	2306      	movs	r3, #6
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	480b      	ldr	r0, [pc, #44]	; (8000ca4 <HAL_SPI_MspInit+0x220>)
 8000c78:	f000 fdbc 	bl	80017f4 <HAL_GPIO_Init>
}
 8000c7c:	bf00      	nop
 8000c7e:	3730      	adds	r7, #48	; 0x30
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40003800 	.word	0x40003800
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	2000022c 	.word	0x2000022c
 8000c94:	40026070 	.word	0x40026070
 8000c98:	2000028c 	.word	0x2000028c
 8000c9c:	40026058 	.word	0x40026058
 8000ca0:	40015000 	.word	0x40015000
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <NMI_Handler+0x4>

08000cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <HardFault_Handler+0x4>

08000cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <MemManage_Handler+0x4>

08000cba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cbe:	e7fe      	b.n	8000cbe <BusFault_Handler+0x4>

08000cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc4:	e7fe      	b.n	8000cc4 <UsageFault_Handler+0x4>

08000cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf4:	f000 f93e 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <DMA1_Stream3_IRQHandler+0x10>)
 8000d02:	f000 fb3b 	bl	800137c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000028c 	.word	0x2000028c

08000d10 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d14:	4802      	ldr	r0, [pc, #8]	; (8000d20 <DMA1_Stream4_IRQHandler+0x10>)
 8000d16:	f000 fb31 	bl	800137c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000022c 	.word	0x2000022c

08000d24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000d28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d2c:	f000 ff1a 	bl	8001b64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <OTG_FS_IRQHandler+0x10>)
 8000d3a:	f001 f886 	bl	8001e4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	200017d4 	.word	0x200017d4

08000d48 <_read>:
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e00a      	b.n	8000d70 <_read+0x28>
 8000d5a:	f3af 8000 	nop.w
 8000d5e:	4601      	mov	r1, r0
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	60ba      	str	r2, [r7, #8]
 8000d66:	b2ca      	uxtb	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697a      	ldr	r2, [r7, #20]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	dbf0      	blt.n	8000d5a <_read+0x12>
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_close>:
 8000d82:	b480      	push	{r7}
 8000d84:	b083      	sub	sp, #12
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
 8000d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8e:	4618      	mov	r0, r3
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <_fstat>:
 8000d9a:	b480      	push	{r7}
 8000d9c:	b083      	sub	sp, #12
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
 8000da2:	6039      	str	r1, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	2300      	movs	r3, #0
 8000dae:	4618      	mov	r0, r3
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <_isatty>:
 8000dba:	b480      	push	{r7}
 8000dbc:	b083      	sub	sp, #12
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <_lseek>:
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	3714      	adds	r7, #20
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
	...

08000dec <_sbrk>:
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
 8000e1c:	f007 f98e 	bl	800813c <__errno>
 8000e20:	4603      	mov	r3, r0
 8000e22:	220c      	movs	r2, #12
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20020000 	.word	0x20020000
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	200002ec 	.word	0x200002ec
 8000e54:	20001f10 	.word	0x20001f10

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <SystemInit+0x20>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <SystemInit+0x20>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <Reset_Handler>:
 8000e7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eb4 <LoopFillZerobss+0x12>
 8000e80:	480d      	ldr	r0, [pc, #52]	; (8000eb8 <LoopFillZerobss+0x16>)
 8000e82:	490e      	ldr	r1, [pc, #56]	; (8000ebc <LoopFillZerobss+0x1a>)
 8000e84:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <LoopFillZerobss+0x1e>)
 8000e86:	2300      	movs	r3, #0
 8000e88:	e002      	b.n	8000e90 <LoopCopyDataInit>

08000e8a <CopyDataInit>:
 8000e8a:	58d4      	ldr	r4, [r2, r3]
 8000e8c:	50c4      	str	r4, [r0, r3]
 8000e8e:	3304      	adds	r3, #4

08000e90 <LoopCopyDataInit>:
 8000e90:	18c4      	adds	r4, r0, r3
 8000e92:	428c      	cmp	r4, r1
 8000e94:	d3f9      	bcc.n	8000e8a <CopyDataInit>
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <LoopFillZerobss+0x22>)
 8000e98:	4c0b      	ldr	r4, [pc, #44]	; (8000ec8 <LoopFillZerobss+0x26>)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e001      	b.n	8000ea2 <LoopFillZerobss>

08000e9e <FillZerobss>:
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	3204      	adds	r2, #4

08000ea2 <LoopFillZerobss>:
 8000ea2:	42a2      	cmp	r2, r4
 8000ea4:	d3fb      	bcc.n	8000e9e <FillZerobss>
 8000ea6:	f7ff ffd7 	bl	8000e58 <SystemInit>
 8000eaa:	f007 f94d 	bl	8008148 <__libc_init_array>
 8000eae:	f7ff fbc1 	bl	8000634 <main>
 8000eb2:	4770      	bx	lr
 8000eb4:	20020000 	.word	0x20020000
 8000eb8:	20000000 	.word	0x20000000
 8000ebc:	20000160 	.word	0x20000160
 8000ec0:	08009230 	.word	0x08009230
 8000ec4:	20000160 	.word	0x20000160
 8000ec8:	20001f10 	.word	0x20001f10

08000ecc <ADC_IRQHandler>:
 8000ecc:	e7fe      	b.n	8000ecc <ADC_IRQHandler>
	...

08000ed0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_Init+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_Init+0x40>)
 8000eda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ede:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_Init+0x40>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_Init+0x40>)
 8000ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_Init+0x40>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_Init+0x40>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f94f 	bl	800119c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	200f      	movs	r0, #15
 8000f00:	f000 f808 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fd96 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023c00 	.word	0x40023c00

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f967 	bl	8001206 <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 f92f 	bl	80011b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	200002f0 	.word	0x200002f0

08000f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	200002f0 	.word	0x200002f0

08000fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fbc:	f7ff ffee 	bl	8000f9c <HAL_GetTick>
 8000fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fcc:	d005      	beq.n	8000fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <HAL_Delay+0x44>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fda:	bf00      	nop
 8000fdc:	f7ff ffde 	bl	8000f9c <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	68fa      	ldr	r2, [r7, #12]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8f7      	bhi.n	8000fdc <HAL_Delay+0x28>
  {
  }
}
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	3710      	adds	r7, #16
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000008 	.word	0x20000008

08000ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800100c:	4b0c      	ldr	r3, [pc, #48]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001012:	68ba      	ldr	r2, [r7, #8]
 8001014:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001018:	4013      	ands	r3, r2
 800101a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001024:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800102e:	4a04      	ldr	r2, [pc, #16]	; (8001040 <__NVIC_SetPriorityGrouping+0x44>)
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	60d3      	str	r3, [r2, #12]
}
 8001034:	bf00      	nop
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001048:	4b04      	ldr	r3, [pc, #16]	; (800105c <__NVIC_GetPriorityGrouping+0x18>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	f003 0307 	and.w	r3, r3, #7
}
 8001052:	4618      	mov	r0, r3
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	2b00      	cmp	r3, #0
 8001070:	db0b      	blt.n	800108a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001072:	79fb      	ldrb	r3, [r7, #7]
 8001074:	f003 021f 	and.w	r2, r3, #31
 8001078:	4907      	ldr	r1, [pc, #28]	; (8001098 <__NVIC_EnableIRQ+0x38>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	095b      	lsrs	r3, r3, #5
 8001080:	2001      	movs	r0, #1
 8001082:	fa00 f202 	lsl.w	r2, r0, r2
 8001086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	e000e100 	.word	0xe000e100

0800109c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	6039      	str	r1, [r7, #0]
 80010a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db0a      	blt.n	80010c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	490c      	ldr	r1, [pc, #48]	; (80010e8 <__NVIC_SetPriority+0x4c>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	0112      	lsls	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	440b      	add	r3, r1
 80010c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c4:	e00a      	b.n	80010dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4908      	ldr	r1, [pc, #32]	; (80010ec <__NVIC_SetPriority+0x50>)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 030f 	and.w	r3, r3, #15
 80010d2:	3b04      	subs	r3, #4
 80010d4:	0112      	lsls	r2, r2, #4
 80010d6:	b2d2      	uxtb	r2, r2
 80010d8:	440b      	add	r3, r1
 80010da:	761a      	strb	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000e100 	.word	0xe000e100
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b089      	sub	sp, #36	; 0x24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	f1c3 0307 	rsb	r3, r3, #7
 800110a:	2b04      	cmp	r3, #4
 800110c:	bf28      	it	cs
 800110e:	2304      	movcs	r3, #4
 8001110:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3304      	adds	r3, #4
 8001116:	2b06      	cmp	r3, #6
 8001118:	d902      	bls.n	8001120 <NVIC_EncodePriority+0x30>
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3b03      	subs	r3, #3
 800111e:	e000      	b.n	8001122 <NVIC_EncodePriority+0x32>
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	f04f 32ff 	mov.w	r2, #4294967295
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001138:	f04f 31ff 	mov.w	r1, #4294967295
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa01 f303 	lsl.w	r3, r1, r3
 8001142:	43d9      	mvns	r1, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	4313      	orrs	r3, r2
         );
}
 800114a:	4618      	mov	r0, r3
 800114c:	3724      	adds	r7, #36	; 0x24
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
	...

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001168:	d301      	bcc.n	800116e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116a:	2301      	movs	r3, #1
 800116c:	e00f      	b.n	800118e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800116e:	4a0a      	ldr	r2, [pc, #40]	; (8001198 <SysTick_Config+0x40>)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3b01      	subs	r3, #1
 8001174:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001176:	210f      	movs	r1, #15
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f7ff ff8e 	bl	800109c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <SysTick_Config+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001186:	4b04      	ldr	r3, [pc, #16]	; (8001198 <SysTick_Config+0x40>)
 8001188:	2207      	movs	r2, #7
 800118a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	e000e010 	.word	0xe000e010

0800119c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff ff29 	bl	8000ffc <__NVIC_SetPriorityGrouping>
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b086      	sub	sp, #24
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	60b9      	str	r1, [r7, #8]
 80011bc:	607a      	str	r2, [r7, #4]
 80011be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011c4:	f7ff ff3e 	bl	8001044 <__NVIC_GetPriorityGrouping>
 80011c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	68b9      	ldr	r1, [r7, #8]
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff8e 	bl	80010f0 <NVIC_EncodePriority>
 80011d4:	4602      	mov	r2, r0
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	4611      	mov	r1, r2
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff ff5d 	bl	800109c <__NVIC_SetPriority>
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	4603      	mov	r3, r0
 80011f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff31 	bl	8001060 <__NVIC_EnableIRQ>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffa2 	bl	8001158 <SysTick_Config>
 8001214:	4603      	mov	r3, r0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff feb6 	bl	8000f9c <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e099      	b.n	8001370 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2202      	movs	r2, #2
 8001240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0201 	bic.w	r2, r2, #1
 800125a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800125c:	e00f      	b.n	800127e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800125e:	f7ff fe9d 	bl	8000f9c <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b05      	cmp	r3, #5
 800126a:	d908      	bls.n	800127e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2220      	movs	r2, #32
 8001270:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2203      	movs	r2, #3
 8001276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e078      	b.n	8001370 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	d1e8      	bne.n	800125e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001294:	697a      	ldr	r2, [r7, #20]
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <HAL_DMA_Init+0x158>)
 8001298:	4013      	ands	r3, r2
 800129a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685a      	ldr	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	691b      	ldr	r3, [r3, #16]
 80012b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	2b04      	cmp	r3, #4
 80012d6:	d107      	bne.n	80012e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4313      	orrs	r3, r2
 80012e2:	697a      	ldr	r2, [r7, #20]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695b      	ldr	r3, [r3, #20]
 80012f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	f023 0307 	bic.w	r3, r3, #7
 80012fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	4313      	orrs	r3, r2
 8001308:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	2b04      	cmp	r3, #4
 8001310:	d117      	bne.n	8001342 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	4313      	orrs	r3, r2
 800131a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00e      	beq.n	8001342 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f9e9 	bl	80016fc <DMA_CheckFifoParam>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d008      	beq.n	8001342 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2240      	movs	r2, #64	; 0x40
 8001334:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2201      	movs	r2, #1
 800133a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800133e:	2301      	movs	r3, #1
 8001340:	e016      	b.n	8001370 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f000 f9a0 	bl	8001690 <DMA_CalcBaseAndBitshift>
 8001350:	4603      	mov	r3, r0
 8001352:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001358:	223f      	movs	r2, #63	; 0x3f
 800135a:	409a      	lsls	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800136e:	2300      	movs	r3, #0
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	f010803f 	.word	0xf010803f

0800137c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001388:	4b8e      	ldr	r3, [pc, #568]	; (80015c4 <HAL_DMA_IRQHandler+0x248>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a8e      	ldr	r2, [pc, #568]	; (80015c8 <HAL_DMA_IRQHandler+0x24c>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0a9b      	lsrs	r3, r3, #10
 8001394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800139a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a6:	2208      	movs	r2, #8
 80013a8:	409a      	lsls	r2, r3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	4013      	ands	r3, r2
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d01a      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0304 	and.w	r3, r3, #4
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d013      	beq.n	80013e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0204 	bic.w	r2, r2, #4
 80013ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d4:	2208      	movs	r2, #8
 80013d6:	409a      	lsls	r2, r3
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e0:	f043 0201 	orr.w	r2, r3, #1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ec:	2201      	movs	r2, #1
 80013ee:	409a      	lsls	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d012      	beq.n	800141e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00b      	beq.n	800141e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140a:	2201      	movs	r2, #1
 800140c:	409a      	lsls	r2, r3
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001416:	f043 0202 	orr.w	r2, r3, #2
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001422:	2204      	movs	r2, #4
 8001424:	409a      	lsls	r2, r3
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	4013      	ands	r3, r2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d012      	beq.n	8001454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d00b      	beq.n	8001454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001440:	2204      	movs	r2, #4
 8001442:	409a      	lsls	r2, r3
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800144c:	f043 0204 	orr.w	r2, r3, #4
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001458:	2210      	movs	r2, #16
 800145a:	409a      	lsls	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d043      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d03c      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001476:	2210      	movs	r2, #16
 8001478:	409a      	lsls	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d018      	beq.n	80014be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d108      	bne.n	80014ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d024      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	4798      	blx	r3
 80014aa:	e01f      	b.n	80014ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d01b      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	4798      	blx	r3
 80014bc:	e016      	b.n	80014ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f022 0208 	bic.w	r2, r2, #8
 80014da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	2220      	movs	r2, #32
 80014f2:	409a      	lsls	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 808f 	beq.w	800161c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0310 	and.w	r3, r3, #16
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 8087 	beq.w	800161c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001512:	2220      	movs	r2, #32
 8001514:	409a      	lsls	r2, r3
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b05      	cmp	r3, #5
 8001524:	d136      	bne.n	8001594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0216 	bic.w	r2, r2, #22
 8001534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <HAL_DMA_IRQHandler+0x1da>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0208 	bic.w	r2, r2, #8
 8001564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156a:	223f      	movs	r2, #63	; 0x3f
 800156c:	409a      	lsls	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2201      	movs	r2, #1
 8001576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001586:	2b00      	cmp	r3, #0
 8001588:	d07e      	beq.n	8001688 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	4798      	blx	r3
        }
        return;
 8001592:	e079      	b.n	8001688 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d01d      	beq.n	80015de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10d      	bne.n	80015cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d031      	beq.n	800161c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	4798      	blx	r3
 80015c0:	e02c      	b.n	800161c <HAL_DMA_IRQHandler+0x2a0>
 80015c2:	bf00      	nop
 80015c4:	20000000 	.word	0x20000000
 80015c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d023      	beq.n	800161c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	4798      	blx	r3
 80015dc:	e01e      	b.n	800161c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10f      	bne.n	800160c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f022 0210 	bic.w	r2, r2, #16
 80015fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001620:	2b00      	cmp	r3, #0
 8001622:	d032      	beq.n	800168a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d022      	beq.n	8001676 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2205      	movs	r2, #5
 8001634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f022 0201 	bic.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	3301      	adds	r3, #1
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	429a      	cmp	r2, r3
 8001652:	d307      	bcc.n	8001664 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f2      	bne.n	8001648 <HAL_DMA_IRQHandler+0x2cc>
 8001662:	e000      	b.n	8001666 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001664:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	2b00      	cmp	r3, #0
 800167c:	d005      	beq.n	800168a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	4798      	blx	r3
 8001686:	e000      	b.n	800168a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001688:	bf00      	nop
    }
  }
}
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	b2db      	uxtb	r3, r3
 800169e:	3b10      	subs	r3, #16
 80016a0:	4a14      	ldr	r2, [pc, #80]	; (80016f4 <DMA_CalcBaseAndBitshift+0x64>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016aa:	4a13      	ldr	r2, [pc, #76]	; (80016f8 <DMA_CalcBaseAndBitshift+0x68>)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d909      	bls.n	80016d2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	1d1a      	adds	r2, r3, #4
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	659a      	str	r2, [r3, #88]	; 0x58
 80016d0:	e007      	b.n	80016e2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016da:	f023 0303 	bic.w	r3, r3, #3
 80016de:	687a      	ldr	r2, [r7, #4]
 80016e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	aaaaaaab 	.word	0xaaaaaaab
 80016f8:	08009180 	.word	0x08009180

080016fc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d11f      	bne.n	8001756 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d856      	bhi.n	80017ca <DMA_CheckFifoParam+0xce>
 800171c:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <DMA_CheckFifoParam+0x28>)
 800171e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001722:	bf00      	nop
 8001724:	08001735 	.word	0x08001735
 8001728:	08001747 	.word	0x08001747
 800172c:	08001735 	.word	0x08001735
 8001730:	080017cb 	.word	0x080017cb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d046      	beq.n	80017ce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001744:	e043      	b.n	80017ce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800174e:	d140      	bne.n	80017d2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001750:	2301      	movs	r3, #1
 8001752:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001754:	e03d      	b.n	80017d2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800175e:	d121      	bne.n	80017a4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d837      	bhi.n	80017d6 <DMA_CheckFifoParam+0xda>
 8001766:	a201      	add	r2, pc, #4	; (adr r2, 800176c <DMA_CheckFifoParam+0x70>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	0800177d 	.word	0x0800177d
 8001770:	08001783 	.word	0x08001783
 8001774:	0800177d 	.word	0x0800177d
 8001778:	08001795 	.word	0x08001795
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
      break;
 8001780:	e030      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001786:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d025      	beq.n	80017da <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001792:	e022      	b.n	80017da <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001798:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800179c:	d11f      	bne.n	80017de <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017a2:	e01c      	b.n	80017de <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d903      	bls.n	80017b2 <DMA_CheckFifoParam+0xb6>
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	2b03      	cmp	r3, #3
 80017ae:	d003      	beq.n	80017b8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017b0:	e018      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	73fb      	strb	r3, [r7, #15]
      break;
 80017b6:	e015      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00e      	beq.n	80017e2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	73fb      	strb	r3, [r7, #15]
      break;
 80017c8:	e00b      	b.n	80017e2 <DMA_CheckFifoParam+0xe6>
      break;
 80017ca:	bf00      	nop
 80017cc:	e00a      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017ce:	bf00      	nop
 80017d0:	e008      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017d2:	bf00      	nop
 80017d4:	e006      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017d6:	bf00      	nop
 80017d8:	e004      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017da:	bf00      	nop
 80017dc:	e002      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;   
 80017de:	bf00      	nop
 80017e0:	e000      	b.n	80017e4 <DMA_CheckFifoParam+0xe8>
      break;
 80017e2:	bf00      	nop
    }
  } 
  
  return status; 
 80017e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3714      	adds	r7, #20
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800180a:	2300      	movs	r3, #0
 800180c:	61fb      	str	r3, [r7, #28]
 800180e:	e159      	b.n	8001ac4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	4013      	ands	r3, r2
 8001822:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	429a      	cmp	r2, r3
 800182a:	f040 8148 	bne.w	8001abe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 0303 	and.w	r3, r3, #3
 8001836:	2b01      	cmp	r3, #1
 8001838:	d005      	beq.n	8001846 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001842:	2b02      	cmp	r3, #2
 8001844:	d130      	bne.n	80018a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	2203      	movs	r2, #3
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	68da      	ldr	r2, [r3, #12]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800187c:	2201      	movs	r2, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	091b      	lsrs	r3, r3, #4
 8001892:	f003 0201 	and.w	r2, r3, #1
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f003 0303 	and.w	r3, r3, #3
 80018b0:	2b03      	cmp	r3, #3
 80018b2:	d017      	beq.n	80018e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	4013      	ands	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d123      	bne.n	8001938 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	08da      	lsrs	r2, r3, #3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3208      	adds	r2, #8
 80018f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	f003 0307 	and.w	r3, r3, #7
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	220f      	movs	r2, #15
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	08da      	lsrs	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3208      	adds	r2, #8
 8001932:	69b9      	ldr	r1, [r7, #24]
 8001934:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f003 0203 	and.w	r2, r3, #3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 80a2 	beq.w	8001abe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b57      	ldr	r3, [pc, #348]	; (8001adc <HAL_GPIO_Init+0x2e8>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	4a56      	ldr	r2, [pc, #344]	; (8001adc <HAL_GPIO_Init+0x2e8>)
 8001984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001988:	6453      	str	r3, [r2, #68]	; 0x44
 800198a:	4b54      	ldr	r3, [pc, #336]	; (8001adc <HAL_GPIO_Init+0x2e8>)
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001996:	4a52      	ldr	r2, [pc, #328]	; (8001ae0 <HAL_GPIO_Init+0x2ec>)
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	089b      	lsrs	r3, r3, #2
 800199c:	3302      	adds	r3, #2
 800199e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f003 0303 	and.w	r3, r3, #3
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a49      	ldr	r2, [pc, #292]	; (8001ae4 <HAL_GPIO_Init+0x2f0>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x202>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a48      	ldr	r2, [pc, #288]	; (8001ae8 <HAL_GPIO_Init+0x2f4>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x1fe>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a47      	ldr	r2, [pc, #284]	; (8001aec <HAL_GPIO_Init+0x2f8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x1fa>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a46      	ldr	r2, [pc, #280]	; (8001af0 <HAL_GPIO_Init+0x2fc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x1f6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a45      	ldr	r2, [pc, #276]	; (8001af4 <HAL_GPIO_Init+0x300>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x1f2>
 80019e2:	2304      	movs	r3, #4
 80019e4:	e008      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019e6:	2307      	movs	r3, #7
 80019e8:	e006      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019ea:	2303      	movs	r3, #3
 80019ec:	e004      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e002      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <HAL_GPIO_Init+0x204>
 80019f6:	2300      	movs	r3, #0
 80019f8:	69fa      	ldr	r2, [r7, #28]
 80019fa:	f002 0203 	and.w	r2, r2, #3
 80019fe:	0092      	lsls	r2, r2, #2
 8001a00:	4093      	lsls	r3, r2
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a08:	4935      	ldr	r1, [pc, #212]	; (8001ae0 <HAL_GPIO_Init+0x2ec>)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	089b      	lsrs	r3, r3, #2
 8001a0e:	3302      	adds	r3, #2
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a16:	4b38      	ldr	r3, [pc, #224]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3a:	4a2f      	ldr	r2, [pc, #188]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a40:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a64:	4a24      	ldr	r2, [pc, #144]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a8e:	4a1a      	ldr	r2, [pc, #104]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ab8:	4a0f      	ldr	r2, [pc, #60]	; (8001af8 <HAL_GPIO_Init+0x304>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	61fb      	str	r3, [r7, #28]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	2b0f      	cmp	r3, #15
 8001ac8:	f67f aea2 	bls.w	8001810 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001acc:	bf00      	nop
 8001ace:	bf00      	nop
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40013800 	.word	0x40013800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40020400 	.word	0x40020400
 8001aec:	40020800 	.word	0x40020800
 8001af0:	40020c00 	.word	0x40020c00
 8001af4:	40021000 	.word	0x40021000
 8001af8:	40013c00 	.word	0x40013c00

08001afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	807b      	strh	r3, [r7, #2]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b0c:	787b      	ldrb	r3, [r7, #1]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b12:	887a      	ldrh	r2, [r7, #2]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b18:	e003      	b.n	8001b22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b1a:	887b      	ldrh	r3, [r7, #2]
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	619a      	str	r2, [r3, #24]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b085      	sub	sp, #20
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	460b      	mov	r3, r1
 8001b38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b40:	887a      	ldrh	r2, [r7, #2]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4013      	ands	r3, r2
 8001b46:	041a      	lsls	r2, r3, #16
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	400b      	ands	r3, r1
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	619a      	str	r2, [r3, #24]
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
	...

08001b64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	88fb      	ldrh	r3, [r7, #6]
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b7a:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f806 	bl	8001b94 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40013c00 	.word	0x40013c00

08001b94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b9e:	bf00      	nop
 8001ba0:	370c      	adds	r7, #12
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001baa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bac:	b08f      	sub	sp, #60	; 0x3c
 8001bae:	af0a      	add	r7, sp, #40	; 0x28
 8001bb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d101      	bne.n	8001bbc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e10f      	b.n	8001ddc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f005 ffa6 	bl	8007b28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2203      	movs	r2, #3
 8001be0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f002 fa8d 	bl	800411a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	687e      	ldr	r6, [r7, #4]
 8001c08:	466d      	mov	r5, sp
 8001c0a:	f106 0410 	add.w	r4, r6, #16
 8001c0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c1e:	1d33      	adds	r3, r6, #4
 8001c20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c22:	6838      	ldr	r0, [r7, #0]
 8001c24:	f002 f964 	bl	8003ef0 <USB_CoreInit>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0d0      	b.n	8001ddc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 fa7b 	bl	800413c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c46:	2300      	movs	r3, #0
 8001c48:	73fb      	strb	r3, [r7, #15]
 8001c4a:	e04a      	b.n	8001ce2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	333d      	adds	r3, #61	; 0x3d
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	4613      	mov	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	440b      	add	r3, r1
 8001c6e:	333c      	adds	r3, #60	; 0x3c
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	b298      	uxth	r0, r3
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	3344      	adds	r3, #68	; 0x44
 8001c88:	4602      	mov	r2, r0
 8001c8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	3340      	adds	r3, #64	; 0x40
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	3348      	adds	r3, #72	; 0x48
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	334c      	adds	r3, #76	; 0x4c
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	3354      	adds	r3, #84	; 0x54
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cdc:	7bfb      	ldrb	r3, [r7, #15]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	73fb      	strb	r3, [r7, #15]
 8001ce2:	7bfa      	ldrb	r2, [r7, #15]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d3af      	bcc.n	8001c4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	e044      	b.n	8001d7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cf2:	7bfa      	ldrb	r2, [r7, #15]
 8001cf4:	6879      	ldr	r1, [r7, #4]
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	00db      	lsls	r3, r3, #3
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d1e:	7bfa      	ldrb	r2, [r7, #15]
 8001d20:	6879      	ldr	r1, [r7, #4]
 8001d22:	4613      	mov	r3, r2
 8001d24:	00db      	lsls	r3, r3, #3
 8001d26:	4413      	add	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	440b      	add	r3, r1
 8001d2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d34:	7bfa      	ldrb	r2, [r7, #15]
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	00db      	lsls	r3, r3, #3
 8001d52:	4413      	add	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d60:	7bfa      	ldrb	r2, [r7, #15]
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	4613      	mov	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	4413      	add	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	73fb      	strb	r3, [r7, #15]
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d3b5      	bcc.n	8001cf2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	687e      	ldr	r6, [r7, #4]
 8001d8e:	466d      	mov	r5, sp
 8001d90:	f106 0410 	add.w	r4, r6, #16
 8001d94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001da0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001da4:	1d33      	adds	r3, r6, #4
 8001da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da8:	6838      	ldr	r0, [r7, #0]
 8001daa:	f002 fa13 	bl	80041d4 <USB_DevInit>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2202      	movs	r2, #2
 8001db8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e00d      	b.n	8001ddc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 fb62 	bl	800549e <USB_DevDisconnect>

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001de4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d101      	bne.n	8001e00 <HAL_PCD_Start+0x1c>
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	e020      	b.n	8001e42 <HAL_PCD_Start+0x5e>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d109      	bne.n	8001e24 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d005      	beq.n	8001e24 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f002 f965 	bl	80040f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fb12 	bl	800545c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e4a:	b590      	push	{r4, r7, lr}
 8001e4c:	b08d      	sub	sp, #52	; 0x34
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 fbd0 	bl	8005606 <USB_GetMode>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f040 848a 	bne.w	8002782 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 fb34 	bl	80054e0 <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8480 	beq.w	8002780 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 fb21 	bl	80054e0 <USB_ReadInterrupts>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d107      	bne.n	8001eb8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f002 0202 	and.w	r2, r2, #2
 8001eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 fb0f 	bl	80054e0 <USB_ReadInterrupts>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d161      	bne.n	8001f90 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0210 	bic.w	r2, r2, #16
 8001eda:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f003 020f 	and.w	r2, r3, #15
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3304      	adds	r3, #4
 8001efa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	0c5b      	lsrs	r3, r3, #17
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d124      	bne.n	8001f52 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d035      	beq.n	8001f80 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	6a38      	ldr	r0, [r7, #32]
 8001f28:	f003 f946 	bl	80051b8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	691a      	ldr	r2, [r3, #16]
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	091b      	lsrs	r3, r3, #4
 8001f34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f38:	441a      	add	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	6a1a      	ldr	r2, [r3, #32]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f4a:	441a      	add	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	621a      	str	r2, [r3, #32]
 8001f50:	e016      	b.n	8001f80 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	0c5b      	lsrs	r3, r3, #17
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d110      	bne.n	8001f80 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f64:	2208      	movs	r2, #8
 8001f66:	4619      	mov	r1, r3
 8001f68:	6a38      	ldr	r0, [r7, #32]
 8001f6a:	f003 f925 	bl	80051b8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	6a1a      	ldr	r2, [r3, #32]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f7a:	441a      	add	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0210 	orr.w	r2, r2, #16
 8001f8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f003 faa3 	bl	80054e0 <USB_ReadInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001fa4:	f040 80a7 	bne.w	80020f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 faa8 	bl	8005506 <USB_ReadDevAllOutEpInterrupt>
 8001fb6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001fb8:	e099      	b.n	80020ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 808e 	beq.w	80020e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f003 facc 	bl	800556e <USB_ReadDevOutEPInterrupt>
 8001fd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fec2 	bl	8002d80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00c      	beq.n	8002020 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002012:	461a      	mov	r2, r3
 8002014:	2308      	movs	r3, #8
 8002016:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 ff98 	bl	8002f50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d008      	beq.n	800203c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002036:	461a      	mov	r2, r3
 8002038:	2310      	movs	r3, #16
 800203a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d030      	beq.n	80020a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800204e:	2b80      	cmp	r3, #128	; 0x80
 8002050:	d109      	bne.n	8002066 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002060:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002064:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	3304      	adds	r3, #4
 800207a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	78db      	ldrb	r3, [r3, #3]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d108      	bne.n	8002096 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2200      	movs	r2, #0
 8002088:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	b2db      	uxtb	r3, r3
 800208e:	4619      	mov	r1, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f005 fe45 	bl	8007d20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020a2:	461a      	mov	r2, r3
 80020a4:	2302      	movs	r3, #2
 80020a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020be:	461a      	mov	r2, r3
 80020c0:	2320      	movs	r3, #32
 80020c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020da:	461a      	mov	r2, r3
 80020dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	3301      	adds	r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f47f af62 	bne.w	8001fba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 f9f0 	bl	80054e0 <USB_ReadInterrupts>
 8002100:	4603      	mov	r3, r0
 8002102:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002106:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800210a:	f040 80db 	bne.w	80022c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f003 fa11 	bl	800553a <USB_ReadDevAllInEpInterrupt>
 8002118:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800211e:	e0cd      	b.n	80022bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80c2 	beq.w	80022b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f003 fa37 	bl	80055aa <USB_ReadDevInEPInterrupt>
 800213c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d057      	beq.n	80021f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	2201      	movs	r2, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800215c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	43db      	mvns	r3, r3
 8002162:	69f9      	ldr	r1, [r7, #28]
 8002164:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002168:	4013      	ands	r3, r2
 800216a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	4413      	add	r3, r2
 8002174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002178:	461a      	mov	r2, r3
 800217a:	2301      	movs	r3, #1
 800217c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d132      	bne.n	80021ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	334c      	adds	r3, #76	; 0x4c
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4403      	add	r3, r0
 80021a6:	3348      	adds	r3, #72	; 0x48
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4419      	add	r1, r3
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4403      	add	r3, r0
 80021ba:	334c      	adds	r3, #76	; 0x4c
 80021bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d113      	bne.n	80021ec <HAL_PCD_IRQHandler+0x3a2>
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	3354      	adds	r3, #84	; 0x54
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d108      	bne.n	80021ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021e4:	461a      	mov	r2, r3
 80021e6:	2101      	movs	r1, #1
 80021e8:	f003 fa3e 	bl	8005668 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4619      	mov	r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f005 fd19 	bl	8007c2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800220e:	461a      	mov	r2, r3
 8002210:	2308      	movs	r3, #8
 8002212:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800222a:	461a      	mov	r2, r3
 800222c:	2310      	movs	r3, #16
 800222e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002246:	461a      	mov	r2, r3
 8002248:	2340      	movs	r3, #64	; 0x40
 800224a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d023      	beq.n	800229e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002256:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002258:	6a38      	ldr	r0, [r7, #32]
 800225a:	f002 f91f 	bl	800449c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800225e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	3338      	adds	r3, #56	; 0x38
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	78db      	ldrb	r3, [r3, #3]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d108      	bne.n	800228c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2200      	movs	r2, #0
 800227e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f005 fd5c 	bl	8007d44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	4413      	add	r3, r2
 8002294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002298:	461a      	mov	r2, r3
 800229a:	2302      	movs	r3, #2
 800229c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fcdb 	bl	8002c66 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b2:	3301      	adds	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f47f af2e 	bne.w	8002120 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f003 f909 	bl	80054e0 <USB_ReadInterrupts>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022d8:	d122      	bne.n	8002320 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d108      	bne.n	800230a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002300:	2100      	movs	r1, #0
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fec2 	bl	800308c <HAL_PCDEx_LPM_Callback>
 8002308:	e002      	b.n	8002310 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f005 fcfa 	bl	8007d04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800231e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f003 f8db 	bl	80054e0 <USB_ReadInterrupts>
 800232a:	4603      	mov	r3, r0
 800232c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002330:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002334:	d112      	bne.n	800235c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d102      	bne.n	800234c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f005 fcb6 	bl	8007cb8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800235a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f003 f8bd 	bl	80054e0 <USB_ReadInterrupts>
 8002366:	4603      	mov	r3, r0
 8002368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002370:	f040 80b7 	bne.w	80024e2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2110      	movs	r1, #16
 800238e:	4618      	mov	r0, r3
 8002390:	f002 f884 	bl	800449c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002394:	2300      	movs	r3, #0
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002398:	e046      	b.n	8002428 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a6:	461a      	mov	r2, r3
 80023a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023be:	0151      	lsls	r1, r2, #5
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	440a      	add	r2, r1
 80023c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023da:	461a      	mov	r2, r3
 80023dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f2:	0151      	lsls	r1, r2, #5
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	440a      	add	r2, r1
 80023f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002400:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4413      	add	r3, r2
 800240a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002412:	0151      	lsls	r1, r2, #5
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	440a      	add	r2, r1
 8002418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800241c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002420:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002424:	3301      	adds	r3, #1
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800242e:	429a      	cmp	r2, r3
 8002430:	d3b3      	bcc.n	800239a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002438:	69db      	ldr	r3, [r3, #28]
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002440:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002444:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	2b00      	cmp	r3, #0
 800244c:	d016      	beq.n	800247c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002458:	69fa      	ldr	r2, [r7, #28]
 800245a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800245e:	f043 030b 	orr.w	r3, r3, #11
 8002462:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002474:	f043 030b 	orr.w	r3, r3, #11
 8002478:	6453      	str	r3, [r2, #68]	; 0x44
 800247a:	e015      	b.n	80024a8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800248a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800248e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002492:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024a2:	f043 030b 	orr.w	r3, r3, #11
 80024a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024cc:	461a      	mov	r2, r3
 80024ce:	f003 f8cb 	bl	8005668 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 fffa 	bl	80054e0 <USB_ReadInterrupts>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024f6:	d124      	bne.n	8002542 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f003 f890 	bl	8005622 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f002 f845 	bl	8004596 <USB_GetDevSpeed>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681c      	ldr	r4, [r3, #0]
 8002518:	f001 f9e8 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800251c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002522:	b2db      	uxtb	r3, r3
 8002524:	461a      	mov	r2, r3
 8002526:	4620      	mov	r0, r4
 8002528:	f001 fd44 	bl	8003fb4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f005 fba4 	bl	8007c7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695a      	ldr	r2, [r3, #20]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002540:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f002 ffca 	bl	80054e0 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b08      	cmp	r3, #8
 8002554:	d10a      	bne.n	800256c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f005 fb81 	bl	8007c5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695a      	ldr	r2, [r3, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f002 0208 	and.w	r2, r2, #8
 800256a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f002 ffb5 	bl	80054e0 <USB_ReadInterrupts>
 8002576:	4603      	mov	r3, r0
 8002578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257c:	2b80      	cmp	r3, #128	; 0x80
 800257e:	d122      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800258c:	2301      	movs	r3, #1
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
 8002590:	e014      	b.n	80025bc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002596:	4613      	mov	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	440b      	add	r3, r1
 80025a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d105      	bne.n	80025b6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	4619      	mov	r1, r3
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fb27 	bl	8002c04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	3301      	adds	r3, #1
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d3e5      	bcc.n	8002592 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f002 ff88 	bl	80054e0 <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025da:	d13b      	bne.n	8002654 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025dc:	2301      	movs	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
 80025e0:	e02b      	b.n	800263a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	3340      	adds	r3, #64	; 0x40
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d115      	bne.n	8002634 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002608:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800260a:	2b00      	cmp	r3, #0
 800260c:	da12      	bge.n	8002634 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	333f      	adds	r3, #63	; 0x3f
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800262a:	b2db      	uxtb	r3, r3
 800262c:	4619      	mov	r1, r3
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fae8 	bl	8002c04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	3301      	adds	r3, #1
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002640:	429a      	cmp	r2, r3
 8002642:	d3ce      	bcc.n	80025e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f002 ff41 	bl	80054e0 <USB_ReadInterrupts>
 800265e:	4603      	mov	r3, r0
 8002660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002668:	d155      	bne.n	8002716 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800266a:	2301      	movs	r3, #1
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
 800266e:	e045      	b.n	80026fc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	4413      	add	r3, r2
 8002678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d12e      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002698:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800269a:	2b00      	cmp	r3, #0
 800269c:	da2b      	bge.n	80026f6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80026aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d121      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f2:	6053      	str	r3, [r2, #4]
            break;
 80026f4:	e007      	b.n	8002706 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	3301      	adds	r3, #1
 80026fa:	627b      	str	r3, [r7, #36]	; 0x24
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002702:	429a      	cmp	r2, r3
 8002704:	d3b4      	bcc.n	8002670 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695a      	ldr	r2, [r3, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002714:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4618      	mov	r0, r3
 800271c:	f002 fee0 	bl	80054e0 <USB_ReadInterrupts>
 8002720:	4603      	mov	r3, r0
 8002722:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272a:	d10a      	bne.n	8002742 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f005 fb1b 	bl	8007d68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695a      	ldr	r2, [r3, #20]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002740:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f002 feca 	bl	80054e0 <USB_ReadInterrupts>
 800274c:	4603      	mov	r3, r0
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b04      	cmp	r3, #4
 8002754:	d115      	bne.n	8002782 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d002      	beq.n	800276e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f005 fb0b 	bl	8007d84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6859      	ldr	r1, [r3, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	e000      	b.n	8002782 <HAL_PCD_IRQHandler+0x938>
      return;
 8002780:	bf00      	nop
    }
  }
}
 8002782:	3734      	adds	r7, #52	; 0x34
 8002784:	46bd      	mov	sp, r7
 8002786:	bd90      	pop	{r4, r7, pc}

08002788 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	460b      	mov	r3, r1
 8002792:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_PCD_SetAddress+0x1a>
 800279e:	2302      	movs	r3, #2
 80027a0:	e013      	b.n	80027ca <HAL_PCD_SetAddress+0x42>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	4611      	mov	r1, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f002 fe28 	bl	8005410 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	4608      	mov	r0, r1
 80027dc:	4611      	mov	r1, r2
 80027de:	461a      	mov	r2, r3
 80027e0:	4603      	mov	r3, r0
 80027e2:	70fb      	strb	r3, [r7, #3]
 80027e4:	460b      	mov	r3, r1
 80027e6:	803b      	strh	r3, [r7, #0]
 80027e8:	4613      	mov	r3, r2
 80027ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027ec:	2300      	movs	r3, #0
 80027ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	da0f      	bge.n	8002818 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027f8:	78fb      	ldrb	r3, [r7, #3]
 80027fa:	f003 020f 	and.w	r2, r3, #15
 80027fe:	4613      	mov	r3, r2
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	3338      	adds	r3, #56	; 0x38
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4413      	add	r3, r2
 800280c:	3304      	adds	r3, #4
 800280e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2201      	movs	r2, #1
 8002814:	705a      	strb	r2, [r3, #1]
 8002816:	e00f      	b.n	8002838 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002818:	78fb      	ldrb	r3, [r7, #3]
 800281a:	f003 020f 	and.w	r2, r3, #15
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	3304      	adds	r3, #4
 8002830:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002838:	78fb      	ldrb	r3, [r7, #3]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	b2da      	uxtb	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002844:	883a      	ldrh	r2, [r7, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	78ba      	ldrb	r2, [r7, #2]
 800284e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	785b      	ldrb	r3, [r3, #1]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002862:	78bb      	ldrb	r3, [r7, #2]
 8002864:	2b02      	cmp	r3, #2
 8002866:	d102      	bne.n	800286e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_PCD_EP_Open+0xaa>
 8002878:	2302      	movs	r3, #2
 800287a:	e00e      	b.n	800289a <HAL_PCD_EP_Open+0xc8>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68f9      	ldr	r1, [r7, #12]
 800288a:	4618      	mov	r0, r3
 800288c:	f001 fea8 	bl	80045e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002898:	7afb      	ldrb	r3, [r7, #11]
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	460b      	mov	r3, r1
 80028ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da0f      	bge.n	80028d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b6:	78fb      	ldrb	r3, [r7, #3]
 80028b8:	f003 020f 	and.w	r2, r3, #15
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	3338      	adds	r3, #56	; 0x38
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	3304      	adds	r3, #4
 80028cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	705a      	strb	r2, [r3, #1]
 80028d4:	e00f      	b.n	80028f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	f003 020f 	and.w	r2, r3, #15
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	3304      	adds	r3, #4
 80028ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_PCD_EP_Close+0x6e>
 800290c:	2302      	movs	r3, #2
 800290e:	e00e      	b.n	800292e <HAL_PCD_EP_Close+0x8c>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68f9      	ldr	r1, [r7, #12]
 800291e:	4618      	mov	r0, r3
 8002920:	f001 fee6 	bl	80046f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
 8002942:	460b      	mov	r3, r1
 8002944:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002946:	7afb      	ldrb	r3, [r7, #11]
 8002948:	f003 020f 	and.w	r2, r3, #15
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4413      	add	r3, r2
 800295c:	3304      	adds	r3, #4
 800295e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2200      	movs	r2, #0
 8002970:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002978:	7afb      	ldrb	r3, [r7, #11]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	b2da      	uxtb	r2, r3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d102      	bne.n	8002992 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002992:	7afb      	ldrb	r3, [r7, #11]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	2b00      	cmp	r3, #0
 800299a:	d109      	bne.n	80029b0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	6979      	ldr	r1, [r7, #20]
 80029aa:	f002 f9c5 	bl	8004d38 <USB_EP0StartXfer>
 80029ae:	e008      	b.n	80029c2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6818      	ldr	r0, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	691b      	ldr	r3, [r3, #16]
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	6979      	ldr	r1, [r7, #20]
 80029be:	f001 ff73 	bl	80048a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029d8:	78fb      	ldrb	r3, [r7, #3]
 80029da:	f003 020f 	and.w	r2, r3, #15
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	00db      	lsls	r3, r3, #3
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a0c:	7afb      	ldrb	r3, [r7, #11]
 8002a0e:	f003 020f 	and.w	r2, r3, #15
 8002a12:	4613      	mov	r3, r2
 8002a14:	00db      	lsls	r3, r3, #3
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	3338      	adds	r3, #56	; 0x38
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	4413      	add	r3, r2
 8002a20:	3304      	adds	r3, #4
 8002a22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	2200      	movs	r2, #0
 8002a34:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a3c:	7afb      	ldrb	r3, [r7, #11]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d102      	bne.n	8002a56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a56:	7afb      	ldrb	r3, [r7, #11]
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d109      	bne.n	8002a74 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6979      	ldr	r1, [r7, #20]
 8002a6e:	f002 f963 	bl	8004d38 <USB_EP0StartXfer>
 8002a72:	e008      	b.n	8002a86 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	461a      	mov	r2, r3
 8002a80:	6979      	ldr	r1, [r7, #20]
 8002a82:	f001 ff11 	bl	80048a8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3718      	adds	r7, #24
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	f003 020f 	and.w	r2, r3, #15
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d901      	bls.n	8002aae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e050      	b.n	8002b50 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da0f      	bge.n	8002ad6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	3338      	adds	r3, #56	; 0x38
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3304      	adds	r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	705a      	strb	r2, [r3, #1]
 8002ad4:	e00d      	b.n	8002af2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	3304      	adds	r3, #4
 8002aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d101      	bne.n	8002b12 <HAL_PCD_EP_SetStall+0x82>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e01e      	b.n	8002b50 <HAL_PCD_EP_SetStall+0xc0>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68f9      	ldr	r1, [r7, #12]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f002 fba1 	bl	8005268 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b26:	78fb      	ldrb	r3, [r7, #3]
 8002b28:	f003 030f 	and.w	r3, r3, #15
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10a      	bne.n	8002b46 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6818      	ldr	r0, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	b2d9      	uxtb	r1, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b40:	461a      	mov	r2, r3
 8002b42:	f002 fd91 	bl	8005668 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	460b      	mov	r3, r1
 8002b62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	f003 020f 	and.w	r2, r3, #15
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d901      	bls.n	8002b76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e042      	b.n	8002bfc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	da0f      	bge.n	8002b9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 020f 	and.w	r2, r3, #15
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	3338      	adds	r3, #56	; 0x38
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	4413      	add	r3, r2
 8002b92:	3304      	adds	r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	705a      	strb	r2, [r3, #1]
 8002b9c:	e00f      	b.n	8002bbe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b9e:	78fb      	ldrb	r3, [r7, #3]
 8002ba0:	f003 020f 	and.w	r2, r3, #15
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc4:	78fb      	ldrb	r3, [r7, #3]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_PCD_EP_ClrStall+0x86>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e00e      	b.n	8002bfc <HAL_PCD_EP_ClrStall+0xa4>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68f9      	ldr	r1, [r7, #12]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f002 fba9 	bl	8005344 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	da0c      	bge.n	8002c32 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c18:	78fb      	ldrb	r3, [r7, #3]
 8002c1a:	f003 020f 	and.w	r2, r3, #15
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	3338      	adds	r3, #56	; 0x38
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	e00c      	b.n	8002c4c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 020f 	and.w	r2, r3, #15
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	3304      	adds	r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68f9      	ldr	r1, [r7, #12]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f002 f9c8 	bl	8004fe8 <USB_EPStopXfer>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c5c:	7afb      	ldrb	r3, [r7, #11]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b08a      	sub	sp, #40	; 0x28
 8002c6a:	af02      	add	r7, sp, #8
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	4413      	add	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	3338      	adds	r3, #56	; 0x38
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	3304      	adds	r3, #4
 8002c8c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a1a      	ldr	r2, [r3, #32]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d901      	bls.n	8002c9e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06c      	b.n	8002d78 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	69fa      	ldr	r2, [r7, #28]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d902      	bls.n	8002cba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	3303      	adds	r3, #3
 8002cbe:	089b      	lsrs	r3, r3, #2
 8002cc0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cc2:	e02b      	b.n	8002d1c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6a1b      	ldr	r3, [r3, #32]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	69fa      	ldr	r2, [r7, #28]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d902      	bls.n	8002ce0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	3303      	adds	r3, #3
 8002ce4:	089b      	lsrs	r3, r3, #2
 8002ce6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6919      	ldr	r1, [r3, #16]
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	6978      	ldr	r0, [r7, #20]
 8002d00:	f002 fa1c 	bl	800513c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	691a      	ldr	r2, [r3, #16]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	441a      	add	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1a      	ldr	r2, [r3, #32]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	441a      	add	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d809      	bhi.n	8002d46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d203      	bcs.n	8002d46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1be      	bne.n	8002cc4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	699a      	ldr	r2, [r3, #24]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d811      	bhi.n	8002d76 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f003 030f 	and.w	r3, r3, #15
 8002d58:	2201      	movs	r2, #1
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	6939      	ldr	r1, [r7, #16]
 8002d6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d72:	4013      	ands	r3, r2
 8002d74:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	333c      	adds	r3, #60	; 0x3c
 8002d98:	3304      	adds	r3, #4
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d17b      	bne.n	8002eae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	4a61      	ldr	r2, [pc, #388]	; (8002f48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	f240 80b9 	bls.w	8002f3c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80b3 	beq.w	8002f3c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	015a      	lsls	r2, r3, #5
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4413      	add	r3, r2
 8002dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002de2:	461a      	mov	r2, r3
 8002de4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002de8:	6093      	str	r3, [r2, #8]
 8002dea:	e0a7      	b.n	8002f3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d009      	beq.n	8002e0a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	015a      	lsls	r2, r3, #5
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e02:	461a      	mov	r2, r3
 8002e04:	2320      	movs	r3, #32
 8002e06:	6093      	str	r3, [r2, #8]
 8002e08:	e098      	b.n	8002f3c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f040 8093 	bne.w	8002f3c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	4a4b      	ldr	r2, [pc, #300]	; (8002f48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d90f      	bls.n	8002e3e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e34:	461a      	mov	r2, r3
 8002e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3a:	6093      	str	r3, [r2, #8]
 8002e3c:	e07e      	b.n	8002f3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	4413      	add	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	4413      	add	r3, r2
 8002e50:	3304      	adds	r3, #4
 8002e52:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	69da      	ldr	r2, [r3, #28]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	0159      	lsls	r1, r3, #5
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	440b      	add	r3, r1
 8002e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6a:	1ad2      	subs	r2, r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d114      	bne.n	8002ea0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	f002 fbec 	bl	8005668 <USB_EP0_OutStart>
 8002e90:	e006      	b.n	8002ea0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	441a      	add	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f004 fea4 	bl	8007bf4 <HAL_PCD_DataOutStageCallback>
 8002eac:	e046      	b.n	8002f3c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	4a26      	ldr	r2, [pc, #152]	; (8002f4c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d124      	bne.n	8002f00 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00a      	beq.n	8002ed6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	015a      	lsls	r2, r3, #5
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	4413      	add	r3, r2
 8002ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ed2:	6093      	str	r3, [r2, #8]
 8002ed4:	e032      	b.n	8002f3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eec:	461a      	mov	r2, r3
 8002eee:	2320      	movs	r3, #32
 8002ef0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f004 fe7b 	bl	8007bf4 <HAL_PCD_DataOutStageCallback>
 8002efe:	e01d      	b.n	8002f3c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d114      	bne.n	8002f30 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d108      	bne.n	8002f30 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	f002 fb9c 	bl	8005668 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	4619      	mov	r1, r3
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f004 fe5c 	bl	8007bf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	4f54300a 	.word	0x4f54300a
 8002f4c:	4f54310a 	.word	0x4f54310a

08002f50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	333c      	adds	r3, #60	; 0x3c
 8002f68:	3304      	adds	r3, #4
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	4a15      	ldr	r2, [pc, #84]	; (8002fd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d90e      	bls.n	8002fa4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d009      	beq.n	8002fa4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fa2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f004 fe13 	bl	8007bd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d90c      	bls.n	8002fcc <PCD_EP_OutSetupPacket_int+0x7c>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d108      	bne.n	8002fcc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	f002 fb4e 	bl	8005668 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	4f54300a 	.word	0x4f54300a

08002fdc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	70fb      	strb	r3, [r7, #3]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d107      	bne.n	800300a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ffa:	883b      	ldrh	r3, [r7, #0]
 8002ffc:	0419      	lsls	r1, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	430a      	orrs	r2, r1
 8003006:	629a      	str	r2, [r3, #40]	; 0x28
 8003008:	e028      	b.n	800305c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	68ba      	ldr	r2, [r7, #8]
 8003014:	4413      	add	r3, r2
 8003016:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	e00d      	b.n	800303a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	3340      	adds	r3, #64	; 0x40
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	0c1b      	lsrs	r3, r3, #16
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	4413      	add	r3, r2
 8003032:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	3301      	adds	r3, #1
 8003038:	73fb      	strb	r3, [r7, #15]
 800303a:	7bfa      	ldrb	r2, [r7, #15]
 800303c:	78fb      	ldrb	r3, [r7, #3]
 800303e:	3b01      	subs	r3, #1
 8003040:	429a      	cmp	r2, r3
 8003042:	d3ec      	bcc.n	800301e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003044:	883b      	ldrh	r3, [r7, #0]
 8003046:	0418      	lsls	r0, r3, #16
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6819      	ldr	r1, [r3, #0]
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	3b01      	subs	r3, #1
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	4302      	orrs	r2, r0
 8003054:	3340      	adds	r3, #64	; 0x40
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
 8003072:	460b      	mov	r3, r1
 8003074:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	887a      	ldrh	r2, [r7, #2]
 800307c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e267      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d075      	beq.n	80031ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030c2:	4b88      	ldr	r3, [pc, #544]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d00c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b85      	ldr	r3, [pc, #532]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d112      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b82      	ldr	r3, [pc, #520]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030e6:	d10b      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b7e      	ldr	r3, [pc, #504]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d05b      	beq.n	80031ac <HAL_RCC_OscConfig+0x108>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d157      	bne.n	80031ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e242      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003108:	d106      	bne.n	8003118 <HAL_RCC_OscConfig+0x74>
 800310a:	4b76      	ldr	r3, [pc, #472]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a75      	ldr	r2, [pc, #468]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x98>
 8003122:	4b70      	ldr	r3, [pc, #448]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6f      	ldr	r2, [pc, #444]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b6d      	ldr	r3, [pc, #436]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6c      	ldr	r2, [pc, #432]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 800313c:	4b69      	ldr	r3, [pc, #420]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a68      	ldr	r2, [pc, #416]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b66      	ldr	r3, [pc, #408]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a65      	ldr	r2, [pc, #404]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fd ff1e 	bl	8000f9c <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003164:	f7fd ff1a 	bl	8000f9c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	; 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e207      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b5b      	ldr	r3, [pc, #364]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xc0>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fd ff0a 	bl	8000f9c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800318c:	f7fd ff06 	bl	8000f9c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	; 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1f3      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0xe8>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ba:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b47      	ldr	r3, [pc, #284]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d11c      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b44      	ldr	r3, [pc, #272]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	4b41      	ldr	r3, [pc, #260]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1c7      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b3b      	ldr	r3, [pc, #236]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4937      	ldr	r1, [pc, #220]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	e03a      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fd febf 	bl	8000f9c <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003222:	f7fd febb 	bl	8000f9c <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1a8      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	4b2b      	ldr	r3, [pc, #172]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4925      	ldr	r1, [pc, #148]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003256:	4b24      	ldr	r3, [pc, #144]	; (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fd fe9e 	bl	8000f9c <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003264:	f7fd fe9a 	bl	8000f9c <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e187      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d036      	beq.n	80032fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b15      	ldr	r3, [pc, #84]	; (80032ec <HAL_RCC_OscConfig+0x248>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fd fe7e 	bl	8000f9c <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032a4:	f7fd fe7a 	bl	8000f9c <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e167      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <HAL_RCC_OscConfig+0x240>)
 80032b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x200>
 80032c2:	e01b      	b.n	80032fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c4:	4b09      	ldr	r3, [pc, #36]	; (80032ec <HAL_RCC_OscConfig+0x248>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7fd fe67 	bl	8000f9c <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	e00e      	b.n	80032f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032d2:	f7fd fe63 	bl	8000f9c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d907      	bls.n	80032f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e150      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
 80032e4:	40023800 	.word	0x40023800
 80032e8:	42470000 	.word	0x42470000
 80032ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	4b88      	ldr	r3, [pc, #544]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ea      	bne.n	80032d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8097 	beq.w	8003438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330e:	4b81      	ldr	r3, [pc, #516]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	4b7d      	ldr	r3, [pc, #500]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	4a7c      	ldr	r2, [pc, #496]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	; 0x40
 800332a:	4b7a      	ldr	r3, [pc, #488]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b77      	ldr	r3, [pc, #476]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d118      	bne.n	8003378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b74      	ldr	r3, [pc, #464]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a73      	ldr	r2, [pc, #460]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fd fe23 	bl	8000f9c <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7fd fe1f 	bl	8000f9c <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e10c      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b6a      	ldr	r3, [pc, #424]	; (8003518 <HAL_RCC_OscConfig+0x474>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x2ea>
 8003380:	4b64      	ldr	r3, [pc, #400]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a63      	ldr	r2, [pc, #396]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	e01c      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b05      	cmp	r3, #5
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x30c>
 8003396:	4b5f      	ldr	r3, [pc, #380]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	4a5e      	ldr	r2, [pc, #376]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6713      	str	r3, [r2, #112]	; 0x70
 80033a2:	4b5c      	ldr	r3, [pc, #368]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a5b      	ldr	r2, [pc, #364]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 80033b0:	4b58      	ldr	r3, [pc, #352]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a57      	ldr	r2, [pc, #348]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	; 0x70
 80033bc:	4b55      	ldr	r3, [pc, #340]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a54      	ldr	r2, [pc, #336]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f023 0304 	bic.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fd fde4 	bl	8000f9c <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fd fde0 	bl	8000f9c <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0cb      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	4b49      	ldr	r3, [pc, #292]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0ee      	beq.n	80033d8 <HAL_RCC_OscConfig+0x334>
 80033fa:	e014      	b.n	8003426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7fd fdce 	bl	8000f9c <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003402:	e00a      	b.n	800341a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fd fdca 	bl	8000f9c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0b5      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341a:	4b3e      	ldr	r3, [pc, #248]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ee      	bne.n	8003404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342c:	4b39      	ldr	r3, [pc, #228]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003430:	4a38      	ldr	r2, [pc, #224]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a1 	beq.w	8003584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b08      	cmp	r3, #8
 800344c:	d05c      	beq.n	8003508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d141      	bne.n	80034da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b31      	ldr	r3, [pc, #196]	; (800351c <HAL_RCC_OscConfig+0x478>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fd fd9e 	bl	8000f9c <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003464:	f7fd fd9a 	bl	8000f9c <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e087      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b27      	ldr	r3, [pc, #156]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	3b01      	subs	r3, #1
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	491b      	ldr	r1, [pc, #108]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ac:	4b1b      	ldr	r3, [pc, #108]	; (800351c <HAL_RCC_OscConfig+0x478>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7fd fd73 	bl	8000f9c <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ba:	f7fd fd6f 	bl	8000f9c <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e05c      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x416>
 80034d8:	e054      	b.n	8003584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	4b10      	ldr	r3, [pc, #64]	; (800351c <HAL_RCC_OscConfig+0x478>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fd fd5c 	bl	8000f9c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fd fd58 	bl	8000f9c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e045      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_OscConfig+0x470>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x444>
 8003506:	e03d      	b.n	8003584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d107      	bne.n	8003520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e038      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
 8003514:	40023800 	.word	0x40023800
 8003518:	40007000 	.word	0x40007000
 800351c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003520:	4b1b      	ldr	r3, [pc, #108]	; (8003590 <HAL_RCC_OscConfig+0x4ec>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d028      	beq.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d121      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d11a      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003550:	4013      	ands	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003558:	4293      	cmp	r3, r2
 800355a:	d111      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	3b01      	subs	r3, #1
 800356a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d107      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800

08003594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0cc      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b68      	ldr	r3, [pc, #416]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0307 	and.w	r3, r3, #7
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d90c      	bls.n	80035d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b65      	ldr	r3, [pc, #404]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b63      	ldr	r3, [pc, #396]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0307 	and.w	r3, r3, #7
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0b8      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e8:	4b59      	ldr	r3, [pc, #356]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4a58      	ldr	r2, [pc, #352]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003600:	4b53      	ldr	r3, [pc, #332]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a52      	ldr	r2, [pc, #328]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800360a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360c:	4b50      	ldr	r3, [pc, #320]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	494d      	ldr	r1, [pc, #308]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d044      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b47      	ldr	r3, [pc, #284]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d119      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d003      	beq.n	8003652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364e:	2b03      	cmp	r3, #3
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b3f      	ldr	r3, [pc, #252]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e067      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003672:	4b37      	ldr	r3, [pc, #220]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4934      	ldr	r1, [pc, #208]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003684:	f7fd fc8a 	bl	8000f9c <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f7fd fc86 	bl	8000f9c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	; 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e04f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2b      	ldr	r3, [pc, #172]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 020c 	and.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1eb      	bne.n	800368c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d20c      	bcs.n	80036dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b22      	ldr	r3, [pc, #136]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b20      	ldr	r3, [pc, #128]	; (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e032      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4916      	ldr	r1, [pc, #88]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	490e      	ldr	r1, [pc, #56]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800371a:	f000 f821 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 800371e:	4602      	mov	r2, r0
 8003720:	4b0b      	ldr	r3, [pc, #44]	; (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	490a      	ldr	r1, [pc, #40]	; (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	5ccb      	ldrb	r3, [r1, r3]
 800372e:	fa22 f303 	lsr.w	r3, r2, r3
 8003732:	4a09      	ldr	r2, [pc, #36]	; (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003736:	4b09      	ldr	r3, [pc, #36]	; (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fd fbea 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023c00 	.word	0x40023c00
 8003750:	40023800 	.word	0x40023800
 8003754:	08009170 	.word	0x08009170
 8003758:	20000000 	.word	0x20000000
 800375c:	20000004 	.word	0x20000004

08003760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b090      	sub	sp, #64	; 0x40
 8003766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	637b      	str	r3, [r7, #52]	; 0x34
 800376c:	2300      	movs	r3, #0
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003770:	2300      	movs	r3, #0
 8003772:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003778:	4b59      	ldr	r3, [pc, #356]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b08      	cmp	r3, #8
 8003782:	d00d      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003784:	2b08      	cmp	r3, #8
 8003786:	f200 80a1 	bhi.w	80038cc <HAL_RCC_GetSysClockFreq+0x16c>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x34>
 800378e:	2b04      	cmp	r3, #4
 8003790:	d003      	beq.n	800379a <HAL_RCC_GetSysClockFreq+0x3a>
 8003792:	e09b      	b.n	80038cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4b53      	ldr	r3, [pc, #332]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003796:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003798:	e09b      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800379a:	4b53      	ldr	r3, [pc, #332]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800379c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800379e:	e098      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a0:	4b4f      	ldr	r3, [pc, #316]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037aa:	4b4d      	ldr	r3, [pc, #308]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d028      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b6:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	2200      	movs	r2, #0
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	627a      	str	r2, [r7, #36]	; 0x24
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037c8:	2100      	movs	r1, #0
 80037ca:	4b47      	ldr	r3, [pc, #284]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037cc:	fb03 f201 	mul.w	r2, r3, r1
 80037d0:	2300      	movs	r3, #0
 80037d2:	fb00 f303 	mul.w	r3, r0, r3
 80037d6:	4413      	add	r3, r2
 80037d8:	4a43      	ldr	r2, [pc, #268]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80037da:	fba0 1202 	umull	r1, r2, r0, r2
 80037de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037e0:	460a      	mov	r2, r1
 80037e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80037e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e6:	4413      	add	r3, r2
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037ec:	2200      	movs	r2, #0
 80037ee:	61bb      	str	r3, [r7, #24]
 80037f0:	61fa      	str	r2, [r7, #28]
 80037f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037fa:	f7fc fd41 	bl	8000280 <__aeabi_uldivmod>
 80037fe:	4602      	mov	r2, r0
 8003800:	460b      	mov	r3, r1
 8003802:	4613      	mov	r3, r2
 8003804:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003806:	e053      	b.n	80038b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003808:	4b35      	ldr	r3, [pc, #212]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	099b      	lsrs	r3, r3, #6
 800380e:	2200      	movs	r2, #0
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	617a      	str	r2, [r7, #20]
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800381a:	f04f 0b00 	mov.w	fp, #0
 800381e:	4652      	mov	r2, sl
 8003820:	465b      	mov	r3, fp
 8003822:	f04f 0000 	mov.w	r0, #0
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	0159      	lsls	r1, r3, #5
 800382c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003830:	0150      	lsls	r0, r2, #5
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	ebb2 080a 	subs.w	r8, r2, sl
 800383a:	eb63 090b 	sbc.w	r9, r3, fp
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800384a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800384e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003852:	ebb2 0408 	subs.w	r4, r2, r8
 8003856:	eb63 0509 	sbc.w	r5, r3, r9
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	00eb      	lsls	r3, r5, #3
 8003864:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003868:	00e2      	lsls	r2, r4, #3
 800386a:	4614      	mov	r4, r2
 800386c:	461d      	mov	r5, r3
 800386e:	eb14 030a 	adds.w	r3, r4, sl
 8003872:	603b      	str	r3, [r7, #0]
 8003874:	eb45 030b 	adc.w	r3, r5, fp
 8003878:	607b      	str	r3, [r7, #4]
 800387a:	f04f 0200 	mov.w	r2, #0
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003886:	4629      	mov	r1, r5
 8003888:	028b      	lsls	r3, r1, #10
 800388a:	4621      	mov	r1, r4
 800388c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003890:	4621      	mov	r1, r4
 8003892:	028a      	lsls	r2, r1, #10
 8003894:	4610      	mov	r0, r2
 8003896:	4619      	mov	r1, r3
 8003898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389a:	2200      	movs	r2, #0
 800389c:	60bb      	str	r3, [r7, #8]
 800389e:	60fa      	str	r2, [r7, #12]
 80038a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038a4:	f7fc fcec 	bl	8000280 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4613      	mov	r3, r2
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038b0:	4b0b      	ldr	r3, [pc, #44]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	0c1b      	lsrs	r3, r3, #16
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	3301      	adds	r3, #1
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038ca:	e002      	b.n	80038d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80038ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3740      	adds	r7, #64	; 0x40
 80038d8:	46bd      	mov	sp, r7
 80038da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038de:	bf00      	nop
 80038e0:	40023800 	.word	0x40023800
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	017d7840 	.word	0x017d7840

080038ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000000 	.word	0x20000000

08003904 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e07b      	b.n	8003a0e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	2b00      	cmp	r3, #0
 800391c:	d108      	bne.n	8003930 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003926:	d009      	beq.n	800393c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	61da      	str	r2, [r3, #28]
 800392e:	e005      	b.n	800393c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd f894 	bl	8000a84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003972:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	691b      	ldr	r3, [r3, #16]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c0:	ea42 0103 	orr.w	r1, r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	0c1b      	lsrs	r3, r3, #16
 80039da:	f003 0104 	and.w	r1, r3, #4
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e2:	f003 0210 	and.w	r2, r3, #16
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69da      	ldr	r2, [r3, #28]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b08c      	sub	sp, #48	; 0x30
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a24:	2301      	movs	r3, #1
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d101      	bne.n	8003a3c <HAL_SPI_TransmitReceive+0x26>
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e18a      	b.n	8003d52 <HAL_SPI_TransmitReceive+0x33c>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a44:	f7fd faaa 	bl	8000f9c <HAL_GetTick>
 8003a48:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a5a:	887b      	ldrh	r3, [r7, #2]
 8003a5c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d00f      	beq.n	8003a86 <HAL_SPI_TransmitReceive+0x70>
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a6c:	d107      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <HAL_SPI_TransmitReceive+0x68>
 8003a76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d003      	beq.n	8003a86 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a7e:	2302      	movs	r3, #2
 8003a80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a84:	e15b      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <HAL_SPI_TransmitReceive+0x82>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_SPI_TransmitReceive+0x82>
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d103      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a9e:	e14e      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d003      	beq.n	8003ab4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2205      	movs	r2, #5
 8003ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	887a      	ldrh	r2, [r7, #2]
 8003ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	887a      	ldrh	r2, [r7, #2]
 8003aca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	887a      	ldrh	r2, [r7, #2]
 8003ad6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	887a      	ldrh	r2, [r7, #2]
 8003adc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af4:	2b40      	cmp	r3, #64	; 0x40
 8003af6:	d007      	beq.n	8003b08 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b10:	d178      	bne.n	8003c04 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x10a>
 8003b1a:	8b7b      	ldrh	r3, [r7, #26]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d166      	bne.n	8003bee <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b24:	881a      	ldrh	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	1c9a      	adds	r2, r3, #2
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b44:	e053      	b.n	8003bee <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d11b      	bne.n	8003b8c <HAL_SPI_TransmitReceive+0x176>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x176>
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d113      	bne.n	8003b8c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	1c9a      	adds	r2, r3, #2
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d119      	bne.n	8003bce <HAL_SPI_TransmitReceive+0x1b8>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d014      	beq.n	8003bce <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	1c9a      	adds	r2, r3, #2
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bce:	f7fd f9e5 	bl	8000f9c <HAL_GetTick>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d807      	bhi.n	8003bee <HAL_SPI_TransmitReceive+0x1d8>
 8003bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be4:	d003      	beq.n	8003bee <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bec:	e0a7      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1a6      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x130>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1a1      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x130>
 8003c02:	e07c      	b.n	8003cfe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d002      	beq.n	8003c12 <HAL_SPI_TransmitReceive+0x1fc>
 8003c0c:	8b7b      	ldrh	r3, [r7, #26]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d16b      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	330c      	adds	r3, #12
 8003c1c:	7812      	ldrb	r2, [r2, #0]
 8003c1e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c38:	e057      	b.n	8003cea <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0302 	and.w	r3, r3, #2
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d11c      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x26c>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d017      	beq.n	8003c82 <HAL_SPI_TransmitReceive+0x26c>
 8003c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d114      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	7812      	ldrb	r2, [r2, #0]
 8003c64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d119      	bne.n	8003cc4 <HAL_SPI_TransmitReceive+0x2ae>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d014      	beq.n	8003cc4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68da      	ldr	r2, [r3, #12]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	b2d2      	uxtb	r2, r2
 8003ca6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cc4:	f7fd f96a 	bl	8000f9c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d803      	bhi.n	8003cdc <HAL_SPI_TransmitReceive+0x2c6>
 8003cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cda:	d102      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x2cc>
 8003cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ce8:	e029      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1a2      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x224>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d19d      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 f8b2 	bl	8003e6c <SPI_EndRxTxTransaction>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d006      	beq.n	8003d1c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d1a:	e010      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10b      	bne.n	8003d3c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	617b      	str	r3, [r7, #20]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	617b      	str	r3, [r7, #20]
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	e000      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3730      	adds	r7, #48	; 0x30
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	60b9      	str	r1, [r7, #8]
 8003d66:	603b      	str	r3, [r7, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d6c:	f7fd f916 	bl	8000f9c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	4413      	add	r3, r2
 8003d7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d7c:	f7fd f90e 	bl	8000f9c <HAL_GetTick>
 8003d80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d82:	4b39      	ldr	r3, [pc, #228]	; (8003e68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	015b      	lsls	r3, r3, #5
 8003d88:	0d1b      	lsrs	r3, r3, #20
 8003d8a:	69fa      	ldr	r2, [r7, #28]
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
 8003d90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d92:	e054      	b.n	8003e3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d050      	beq.n	8003e3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d9c:	f7fd f8fe 	bl	8000f9c <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	69fa      	ldr	r2, [r7, #28]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d902      	bls.n	8003db2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d13d      	bne.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dca:	d111      	bne.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd4:	d004      	beq.n	8003de0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d107      	bne.n	8003df0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df8:	d10f      	bne.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e017      	b.n	8003e5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	461a      	mov	r2, r3
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d19b      	bne.n	8003d94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3720      	adds	r7, #32
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20000000 	.word	0x20000000

08003e6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b088      	sub	sp, #32
 8003e70:	af02      	add	r7, sp, #8
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e78:	4b1b      	ldr	r3, [pc, #108]	; (8003ee8 <SPI_EndRxTxTransaction+0x7c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1b      	ldr	r2, [pc, #108]	; (8003eec <SPI_EndRxTxTransaction+0x80>)
 8003e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e82:	0d5b      	lsrs	r3, r3, #21
 8003e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e88:	fb02 f303 	mul.w	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e96:	d112      	bne.n	8003ebe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	2180      	movs	r1, #128	; 0x80
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f7ff ff5a 	bl	8003d5c <SPI_WaitFlagStateUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d016      	beq.n	8003edc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eb2:	f043 0220 	orr.w	r2, r3, #32
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e00f      	b.n	8003ede <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed4:	2b80      	cmp	r3, #128	; 0x80
 8003ed6:	d0f2      	beq.n	8003ebe <SPI_EndRxTxTransaction+0x52>
 8003ed8:	e000      	b.n	8003edc <SPI_EndRxTxTransaction+0x70>
        break;
 8003eda:	bf00      	nop
  }

  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3718      	adds	r7, #24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	165e9f81 	.word	0x165e9f81

08003ef0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	b580      	push	{r7, lr}
 8003ef4:	b084      	sub	sp, #16
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	f107 001c 	add.w	r0, r7, #28
 8003efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d122      	bne.n	8003f4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f001 fbee 	bl	8005724 <USB_CoreReset>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	73fb      	strb	r3, [r7, #15]
 8003f4c:	e01a      	b.n	8003f84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f001 fbe2 	bl	8005724 <USB_CoreReset>
 8003f60:	4603      	mov	r3, r0
 8003f62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d106      	bne.n	8003f78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	639a      	str	r2, [r3, #56]	; 0x38
 8003f76:	e005      	b.n	8003f84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d10b      	bne.n	8003fa2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f043 0206 	orr.w	r2, r3, #6
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f043 0220 	orr.w	r2, r3, #32
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fae:	b004      	add	sp, #16
 8003fb0:	4770      	bx	lr
	...

08003fb4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b087      	sub	sp, #28
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	60f8      	str	r0, [r7, #12]
 8003fbc:	60b9      	str	r1, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d165      	bne.n	8004094 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	4a41      	ldr	r2, [pc, #260]	; (80040d0 <USB_SetTurnaroundTime+0x11c>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d906      	bls.n	8003fde <USB_SetTurnaroundTime+0x2a>
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4a40      	ldr	r2, [pc, #256]	; (80040d4 <USB_SetTurnaroundTime+0x120>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d202      	bcs.n	8003fde <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fd8:	230f      	movs	r3, #15
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	e062      	b.n	80040a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4a3c      	ldr	r2, [pc, #240]	; (80040d4 <USB_SetTurnaroundTime+0x120>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d306      	bcc.n	8003ff4 <USB_SetTurnaroundTime+0x40>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	4a3b      	ldr	r2, [pc, #236]	; (80040d8 <USB_SetTurnaroundTime+0x124>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d202      	bcs.n	8003ff4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003fee:	230e      	movs	r3, #14
 8003ff0:	617b      	str	r3, [r7, #20]
 8003ff2:	e057      	b.n	80040a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4a38      	ldr	r2, [pc, #224]	; (80040d8 <USB_SetTurnaroundTime+0x124>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d306      	bcc.n	800400a <USB_SetTurnaroundTime+0x56>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4a37      	ldr	r2, [pc, #220]	; (80040dc <USB_SetTurnaroundTime+0x128>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d202      	bcs.n	800400a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004004:	230d      	movs	r3, #13
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	e04c      	b.n	80040a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	4a33      	ldr	r2, [pc, #204]	; (80040dc <USB_SetTurnaroundTime+0x128>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d306      	bcc.n	8004020 <USB_SetTurnaroundTime+0x6c>
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4a32      	ldr	r2, [pc, #200]	; (80040e0 <USB_SetTurnaroundTime+0x12c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d802      	bhi.n	8004020 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800401a:	230c      	movs	r3, #12
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	e041      	b.n	80040a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4a2f      	ldr	r2, [pc, #188]	; (80040e0 <USB_SetTurnaroundTime+0x12c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d906      	bls.n	8004036 <USB_SetTurnaroundTime+0x82>
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4a2e      	ldr	r2, [pc, #184]	; (80040e4 <USB_SetTurnaroundTime+0x130>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d802      	bhi.n	8004036 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004030:	230b      	movs	r3, #11
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e036      	b.n	80040a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4a2a      	ldr	r2, [pc, #168]	; (80040e4 <USB_SetTurnaroundTime+0x130>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d906      	bls.n	800404c <USB_SetTurnaroundTime+0x98>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4a29      	ldr	r2, [pc, #164]	; (80040e8 <USB_SetTurnaroundTime+0x134>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d802      	bhi.n	800404c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004046:	230a      	movs	r3, #10
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	e02b      	b.n	80040a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4a26      	ldr	r2, [pc, #152]	; (80040e8 <USB_SetTurnaroundTime+0x134>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d906      	bls.n	8004062 <USB_SetTurnaroundTime+0xae>
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4a25      	ldr	r2, [pc, #148]	; (80040ec <USB_SetTurnaroundTime+0x138>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d202      	bcs.n	8004062 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800405c:	2309      	movs	r3, #9
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	e020      	b.n	80040a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4a21      	ldr	r2, [pc, #132]	; (80040ec <USB_SetTurnaroundTime+0x138>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d306      	bcc.n	8004078 <USB_SetTurnaroundTime+0xc4>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	4a20      	ldr	r2, [pc, #128]	; (80040f0 <USB_SetTurnaroundTime+0x13c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d802      	bhi.n	8004078 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004072:	2308      	movs	r3, #8
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e015      	b.n	80040a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	4a1d      	ldr	r2, [pc, #116]	; (80040f0 <USB_SetTurnaroundTime+0x13c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d906      	bls.n	800408e <USB_SetTurnaroundTime+0xda>
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <USB_SetTurnaroundTime+0x140>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d202      	bcs.n	800408e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004088:	2307      	movs	r3, #7
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	e00a      	b.n	80040a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800408e:	2306      	movs	r3, #6
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	e007      	b.n	80040a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800409a:	2309      	movs	r3, #9
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e001      	b.n	80040a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80040a0:	2309      	movs	r3, #9
 80040a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	029b      	lsls	r3, r3, #10
 80040b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040bc:	431a      	orrs	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	00d8acbf 	.word	0x00d8acbf
 80040d4:	00e4e1c0 	.word	0x00e4e1c0
 80040d8:	00f42400 	.word	0x00f42400
 80040dc:	01067380 	.word	0x01067380
 80040e0:	011a499f 	.word	0x011a499f
 80040e4:	01312cff 	.word	0x01312cff
 80040e8:	014ca43f 	.word	0x014ca43f
 80040ec:	016e3600 	.word	0x016e3600
 80040f0:	01a6ab1f 	.word	0x01a6ab1f
 80040f4:	01e84800 	.word	0x01e84800

080040f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f043 0201 	orr.w	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800411a:	b480      	push	{r7}
 800411c:	b083      	sub	sp, #12
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b084      	sub	sp, #16
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004158:	78fb      	ldrb	r3, [r7, #3]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d115      	bne.n	800418a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800416a:	2001      	movs	r0, #1
 800416c:	f7fc ff22 	bl	8000fb4 <HAL_Delay>
      ms++;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3301      	adds	r3, #1
 8004174:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f001 fa45 	bl	8005606 <USB_GetMode>
 800417c:	4603      	mov	r3, r0
 800417e:	2b01      	cmp	r3, #1
 8004180:	d01e      	beq.n	80041c0 <USB_SetCurrentMode+0x84>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b31      	cmp	r3, #49	; 0x31
 8004186:	d9f0      	bls.n	800416a <USB_SetCurrentMode+0x2e>
 8004188:	e01a      	b.n	80041c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800418a:	78fb      	ldrb	r3, [r7, #3]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d115      	bne.n	80041bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800419c:	2001      	movs	r0, #1
 800419e:	f7fc ff09 	bl	8000fb4 <HAL_Delay>
      ms++;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	3301      	adds	r3, #1
 80041a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f001 fa2c 	bl	8005606 <USB_GetMode>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <USB_SetCurrentMode+0x84>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2b31      	cmp	r3, #49	; 0x31
 80041b8:	d9f0      	bls.n	800419c <USB_SetCurrentMode+0x60>
 80041ba:	e001      	b.n	80041c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e005      	b.n	80041cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b32      	cmp	r3, #50	; 0x32
 80041c4:	d101      	bne.n	80041ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041d4:	b084      	sub	sp, #16
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b086      	sub	sp, #24
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041ee:	2300      	movs	r3, #0
 80041f0:	613b      	str	r3, [r7, #16]
 80041f2:	e009      	b.n	8004208 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	3340      	adds	r3, #64	; 0x40
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	2200      	movs	r2, #0
 8004200:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	3301      	adds	r3, #1
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b0e      	cmp	r3, #14
 800420c:	d9f2      	bls.n	80041f4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800420e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004210:	2b00      	cmp	r3, #0
 8004212:	d11c      	bne.n	800424e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004222:	f043 0302 	orr.w	r3, r3, #2
 8004226:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	639a      	str	r2, [r3, #56]	; 0x38
 800424c:	e00b      	b.n	8004266 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800426c:	461a      	mov	r2, r3
 800426e:	2300      	movs	r3, #0
 8004270:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004278:	4619      	mov	r1, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	461a      	mov	r2, r3
 8004282:	680b      	ldr	r3, [r1, #0]
 8004284:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004288:	2b01      	cmp	r3, #1
 800428a:	d10c      	bne.n	80042a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	2b00      	cmp	r3, #0
 8004290:	d104      	bne.n	800429c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004292:	2100      	movs	r1, #0
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f965 	bl	8004564 <USB_SetDevSpeed>
 800429a:	e008      	b.n	80042ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800429c:	2101      	movs	r1, #1
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f960 	bl	8004564 <USB_SetDevSpeed>
 80042a4:	e003      	b.n	80042ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80042a6:	2103      	movs	r1, #3
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f95b 	bl	8004564 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80042ae:	2110      	movs	r1, #16
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8f3 	bl	800449c <USB_FlushTxFifo>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f91f 	bl	8004504 <USB_FlushRxFifo>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d6:	461a      	mov	r2, r3
 80042d8:	2300      	movs	r3, #0
 80042da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e2:	461a      	mov	r2, r3
 80042e4:	2300      	movs	r3, #0
 80042e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ee:	461a      	mov	r2, r3
 80042f0:	2300      	movs	r3, #0
 80042f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042f4:	2300      	movs	r3, #0
 80042f6:	613b      	str	r3, [r7, #16]
 80042f8:	e043      	b.n	8004382 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	015a      	lsls	r2, r3, #5
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	4413      	add	r3, r2
 8004302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800430c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004310:	d118      	bne.n	8004344 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10a      	bne.n	800432e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004324:	461a      	mov	r2, r3
 8004326:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	e013      	b.n	8004356 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	015a      	lsls	r2, r3, #5
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	4413      	add	r3, r2
 8004336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433a:	461a      	mov	r2, r3
 800433c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004340:	6013      	str	r3, [r2, #0]
 8004342:	e008      	b.n	8004356 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004350:	461a      	mov	r2, r3
 8004352:	2300      	movs	r3, #0
 8004354:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004362:	461a      	mov	r2, r3
 8004364:	2300      	movs	r3, #0
 8004366:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	461a      	mov	r2, r3
 8004376:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800437a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	3301      	adds	r3, #1
 8004380:	613b      	str	r3, [r7, #16]
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	429a      	cmp	r2, r3
 8004388:	d3b7      	bcc.n	80042fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800438a:	2300      	movs	r3, #0
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	e043      	b.n	8004418 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043a6:	d118      	bne.n	80043da <USB_DevInit+0x206>
    {
      if (i == 0U)
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d10a      	bne.n	80043c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	015a      	lsls	r2, r3, #5
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4413      	add	r3, r2
 80043b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ba:	461a      	mov	r2, r3
 80043bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	e013      	b.n	80043ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	461a      	mov	r2, r3
 80043d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	e008      	b.n	80043ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e6:	461a      	mov	r2, r3
 80043e8:	2300      	movs	r3, #0
 80043ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	015a      	lsls	r2, r3, #5
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4413      	add	r3, r2
 80043f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f8:	461a      	mov	r2, r3
 80043fa:	2300      	movs	r3, #0
 80043fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440a:	461a      	mov	r2, r3
 800440c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004410:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	3301      	adds	r3, #1
 8004416:	613b      	str	r3, [r7, #16]
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	429a      	cmp	r2, r3
 800441e:	d3b7      	bcc.n	8004390 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	68fa      	ldr	r2, [r7, #12]
 800442a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800442e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004432:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004440:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	2b00      	cmp	r3, #0
 8004446:	d105      	bne.n	8004454 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f043 0210 	orr.w	r2, r3, #16
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	4b0f      	ldr	r3, [pc, #60]	; (8004498 <USB_DevInit+0x2c4>)
 800445a:	4313      	orrs	r3, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d005      	beq.n	8004472 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	f043 0208 	orr.w	r2, r3, #8
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d107      	bne.n	8004488 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004480:	f043 0304 	orr.w	r3, r3, #4
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004488:	7dfb      	ldrb	r3, [r7, #23]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3718      	adds	r7, #24
 800448e:	46bd      	mov	sp, r7
 8004490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004494:	b004      	add	sp, #16
 8004496:	4770      	bx	lr
 8004498:	803c3800 	.word	0x803c3800

0800449c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	3301      	adds	r3, #1
 80044ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a13      	ldr	r2, [pc, #76]	; (8004500 <USB_FlushTxFifo+0x64>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d901      	bls.n	80044bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e01b      	b.n	80044f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	daf2      	bge.n	80044aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	019b      	lsls	r3, r3, #6
 80044cc:	f043 0220 	orr.w	r2, r3, #32
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	3301      	adds	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a08      	ldr	r2, [pc, #32]	; (8004500 <USB_FlushTxFifo+0x64>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e006      	b.n	80044f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0320 	and.w	r3, r3, #32
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d0f0      	beq.n	80044d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3714      	adds	r7, #20
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr
 8004500:	00030d40 	.word	0x00030d40

08004504 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4a11      	ldr	r2, [pc, #68]	; (8004560 <USB_FlushRxFifo+0x5c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d901      	bls.n	8004522 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e018      	b.n	8004554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	daf2      	bge.n	8004510 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2210      	movs	r2, #16
 8004532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	3301      	adds	r3, #1
 8004538:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4a08      	ldr	r2, [pc, #32]	; (8004560 <USB_FlushRxFifo+0x5c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e006      	b.n	8004554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0310 	and.w	r3, r3, #16
 800454e:	2b10      	cmp	r3, #16
 8004550:	d0f0      	beq.n	8004534 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	00030d40 	.word	0x00030d40

08004564 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	460b      	mov	r3, r1
 800456e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	78fb      	ldrb	r3, [r7, #3]
 800457e:	68f9      	ldr	r1, [r7, #12]
 8004580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004584:	4313      	orrs	r3, r2
 8004586:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3714      	adds	r7, #20
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004596:	b480      	push	{r7}
 8004598:	b087      	sub	sp, #28
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	f003 0306 	and.w	r3, r3, #6
 80045ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d102      	bne.n	80045bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]
 80045ba:	e00a      	b.n	80045d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d002      	beq.n	80045c8 <USB_GetDevSpeed+0x32>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2b06      	cmp	r3, #6
 80045c6:	d102      	bne.n	80045ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045c8:	2302      	movs	r3, #2
 80045ca:	75fb      	strb	r3, [r7, #23]
 80045cc:	e001      	b.n	80045d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045ce:	230f      	movs	r3, #15
 80045d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	371c      	adds	r7, #28
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	785b      	ldrb	r3, [r3, #1]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d13a      	bne.n	8004672 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004602:	69da      	ldr	r2, [r3, #28]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	2101      	movs	r1, #1
 800460e:	fa01 f303 	lsl.w	r3, r1, r3
 8004612:	b29b      	uxth	r3, r3
 8004614:	68f9      	ldr	r1, [r7, #12]
 8004616:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800461a:	4313      	orrs	r3, r2
 800461c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d155      	bne.n	80046e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	791b      	ldrb	r3, [r3, #4]
 800464e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004650:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	059b      	lsls	r3, r3, #22
 8004656:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004658:	4313      	orrs	r3, r2
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	0151      	lsls	r1, r2, #5
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	440a      	add	r2, r1
 8004662:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	e036      	b.n	80046e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004678:	69da      	ldr	r2, [r3, #28]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	2101      	movs	r1, #1
 8004684:	fa01 f303 	lsl.w	r3, r1, r3
 8004688:	041b      	lsls	r3, r3, #16
 800468a:	68f9      	ldr	r1, [r7, #12]
 800468c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004690:	4313      	orrs	r3, r2
 8004692:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d11a      	bne.n	80046e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	015a      	lsls	r2, r3, #5
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	4413      	add	r3, r2
 80046b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	791b      	ldrb	r3, [r3, #4]
 80046c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046c6:	430b      	orrs	r3, r1
 80046c8:	4313      	orrs	r3, r2
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	0151      	lsls	r1, r2, #5
 80046ce:	68fa      	ldr	r2, [r7, #12]
 80046d0:	440a      	add	r2, r1
 80046d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
	...

080046f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	785b      	ldrb	r3, [r3, #1]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d161      	bne.n	80047d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800471e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004722:	d11f      	bne.n	8004764 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4413      	add	r3, r2
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	0151      	lsls	r1, r2, #5
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	440a      	add	r2, r1
 800473a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004742:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	0151      	lsls	r1, r2, #5
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	440a      	add	r2, r1
 800475a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004762:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	2101      	movs	r1, #1
 8004776:	fa01 f303 	lsl.w	r3, r1, r3
 800477a:	b29b      	uxth	r3, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004784:	4013      	ands	r3, r2
 8004786:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800478e:	69da      	ldr	r2, [r3, #28]
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f003 030f 	and.w	r3, r3, #15
 8004798:	2101      	movs	r1, #1
 800479a:	fa01 f303 	lsl.w	r3, r1, r3
 800479e:	b29b      	uxth	r3, r3
 80047a0:	43db      	mvns	r3, r3
 80047a2:	68f9      	ldr	r1, [r7, #12]
 80047a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047a8:	4013      	ands	r3, r2
 80047aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	0159      	lsls	r1, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	440b      	add	r3, r1
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	4619      	mov	r1, r3
 80047c8:	4b35      	ldr	r3, [pc, #212]	; (80048a0 <USB_DeactivateEndpoint+0x1b0>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]
 80047ce:	e060      	b.n	8004892 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	015a      	lsls	r2, r3, #5
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	4413      	add	r3, r2
 80047d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047e6:	d11f      	bne.n	8004828 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	0151      	lsls	r1, r2, #5
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	440a      	add	r2, r1
 80047fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004802:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004806:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004822:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004826:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800482e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	f003 030f 	and.w	r3, r3, #15
 8004838:	2101      	movs	r1, #1
 800483a:	fa01 f303 	lsl.w	r3, r1, r3
 800483e:	041b      	lsls	r3, r3, #16
 8004840:	43db      	mvns	r3, r3
 8004842:	68f9      	ldr	r1, [r7, #12]
 8004844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004848:	4013      	ands	r3, r2
 800484a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004852:	69da      	ldr	r2, [r3, #28]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	2101      	movs	r1, #1
 800485e:	fa01 f303 	lsl.w	r3, r1, r3
 8004862:	041b      	lsls	r3, r3, #16
 8004864:	43db      	mvns	r3, r3
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800486c:	4013      	ands	r3, r2
 800486e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	0159      	lsls	r1, r3, #5
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	440b      	add	r3, r1
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	4619      	mov	r1, r3
 800488c:	4b05      	ldr	r3, [pc, #20]	; (80048a4 <USB_DeactivateEndpoint+0x1b4>)
 800488e:	4013      	ands	r3, r2
 8004890:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3714      	adds	r7, #20
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr
 80048a0:	ec337800 	.word	0xec337800
 80048a4:	eff37800 	.word	0xeff37800

080048a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	; 0x28
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	785b      	ldrb	r3, [r3, #1]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	f040 815c 	bne.w	8004b82 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	699b      	ldr	r3, [r3, #24]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d132      	bne.n	8004938 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048d2:	69bb      	ldr	r3, [r7, #24]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	0151      	lsls	r1, r2, #5
 80048e4:	69fa      	ldr	r2, [r7, #28]
 80048e6:	440a      	add	r2, r1
 80048e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	0151      	lsls	r1, r2, #5
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	440a      	add	r2, r1
 800490c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004914:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	015a      	lsls	r2, r3, #5
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	4413      	add	r3, r2
 800491e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	0151      	lsls	r1, r2, #5
 8004928:	69fa      	ldr	r2, [r7, #28]
 800492a:	440a      	add	r2, r1
 800492c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004930:	0cdb      	lsrs	r3, r3, #19
 8004932:	04db      	lsls	r3, r3, #19
 8004934:	6113      	str	r3, [r2, #16]
 8004936:	e074      	b.n	8004a22 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	0151      	lsls	r1, r2, #5
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	440a      	add	r2, r1
 800494e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004952:	0cdb      	lsrs	r3, r3, #19
 8004954:	04db      	lsls	r3, r3, #19
 8004956:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	0151      	lsls	r1, r2, #5
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	440a      	add	r2, r1
 800496e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004972:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004976:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800497a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	015a      	lsls	r2, r3, #5
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	4413      	add	r3, r2
 8004984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004988:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	6999      	ldr	r1, [r3, #24]
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	440b      	add	r3, r1
 8004994:	1e59      	subs	r1, r3, #1
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	fbb1 f3f3 	udiv	r3, r1, r3
 800499e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80049a0:	4b9d      	ldr	r3, [pc, #628]	; (8004c18 <USB_EPStartXfer+0x370>)
 80049a2:	400b      	ands	r3, r1
 80049a4:	69b9      	ldr	r1, [r7, #24]
 80049a6:	0148      	lsls	r0, r1, #5
 80049a8:	69f9      	ldr	r1, [r7, #28]
 80049aa:	4401      	add	r1, r0
 80049ac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049b0:	4313      	orrs	r3, r2
 80049b2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c0:	691a      	ldr	r2, [r3, #16]
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ca:	69b9      	ldr	r1, [r7, #24]
 80049cc:	0148      	lsls	r0, r1, #5
 80049ce:	69f9      	ldr	r1, [r7, #28]
 80049d0:	4401      	add	r1, r0
 80049d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049d6:	4313      	orrs	r3, r2
 80049d8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	791b      	ldrb	r3, [r3, #4]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d11f      	bne.n	8004a22 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	0151      	lsls	r1, r2, #5
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	440a      	add	r2, r1
 80049f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049fc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004a00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	0151      	lsls	r1, r2, #5
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	440a      	add	r2, r1
 8004a18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d14b      	bne.n	8004ac0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d009      	beq.n	8004a44 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	791b      	ldrb	r3, [r3, #4]
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d128      	bne.n	8004a9e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d110      	bne.n	8004a7e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	0151      	lsls	r1, r2, #5
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	440a      	add	r2, r1
 8004a72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	e00f      	b.n	8004a9e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69ba      	ldr	r2, [r7, #24]
 8004aae:	0151      	lsls	r1, r2, #5
 8004ab0:	69fa      	ldr	r2, [r7, #28]
 8004ab2:	440a      	add	r2, r1
 8004ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004abc:	6013      	str	r3, [r2, #0]
 8004abe:	e133      	b.n	8004d28 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	69ba      	ldr	r2, [r7, #24]
 8004ad0:	0151      	lsls	r1, r2, #5
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	440a      	add	r2, r1
 8004ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ada:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ade:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	791b      	ldrb	r3, [r3, #4]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d015      	beq.n	8004b14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 811b 	beq.w	8004d28 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	2101      	movs	r1, #1
 8004b04:	fa01 f303 	lsl.w	r3, r1, r3
 8004b08:	69f9      	ldr	r1, [r7, #28]
 8004b0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	634b      	str	r3, [r1, #52]	; 0x34
 8004b12:	e109      	b.n	8004d28 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d110      	bne.n	8004b46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	015a      	lsls	r2, r3, #5
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69ba      	ldr	r2, [r7, #24]
 8004b34:	0151      	lsls	r1, r2, #5
 8004b36:	69fa      	ldr	r2, [r7, #28]
 8004b38:	440a      	add	r2, r1
 8004b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	e00f      	b.n	8004b66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	0151      	lsls	r1, r2, #5
 8004b58:	69fa      	ldr	r2, [r7, #28]
 8004b5a:	440a      	add	r2, r1
 8004b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	6919      	ldr	r1, [r3, #16]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	781a      	ldrb	r2, [r3, #0]
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	b298      	uxth	r0, r3
 8004b74:	79fb      	ldrb	r3, [r7, #7]
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	4603      	mov	r3, r0
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fade 	bl	800513c <USB_WritePacket>
 8004b80:	e0d2      	b.n	8004d28 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	69fb      	ldr	r3, [r7, #28]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b9c:	0cdb      	lsrs	r3, r3, #19
 8004b9e:	04db      	lsls	r3, r3, #19
 8004ba0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	015a      	lsls	r2, r3, #5
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	4413      	add	r3, r2
 8004baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	0151      	lsls	r1, r2, #5
 8004bb4:	69fa      	ldr	r2, [r7, #28]
 8004bb6:	440a      	add	r2, r1
 8004bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bbc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bc0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bc4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d126      	bne.n	8004c1c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bda:	691a      	ldr	r2, [r3, #16]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004be4:	69b9      	ldr	r1, [r7, #24]
 8004be6:	0148      	lsls	r0, r1, #5
 8004be8:	69f9      	ldr	r1, [r7, #28]
 8004bea:	4401      	add	r1, r0
 8004bec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	69ba      	ldr	r2, [r7, #24]
 8004c04:	0151      	lsls	r1, r2, #5
 8004c06:	69fa      	ldr	r2, [r7, #28]
 8004c08:	440a      	add	r2, r1
 8004c0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c12:	6113      	str	r3, [r2, #16]
 8004c14:	e03a      	b.n	8004c8c <USB_EPStartXfer+0x3e4>
 8004c16:	bf00      	nop
 8004c18:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	699a      	ldr	r2, [r3, #24]
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	4413      	add	r3, r2
 8004c26:	1e5a      	subs	r2, r3, #1
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	8afa      	ldrh	r2, [r7, #22]
 8004c38:	fb03 f202 	mul.w	r2, r3, r2
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	015a      	lsls	r2, r3, #5
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	4413      	add	r3, r2
 8004c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4c:	691a      	ldr	r2, [r3, #16]
 8004c4e:	8afb      	ldrh	r3, [r7, #22]
 8004c50:	04d9      	lsls	r1, r3, #19
 8004c52:	4b38      	ldr	r3, [pc, #224]	; (8004d34 <USB_EPStartXfer+0x48c>)
 8004c54:	400b      	ands	r3, r1
 8004c56:	69b9      	ldr	r1, [r7, #24]
 8004c58:	0148      	lsls	r0, r1, #5
 8004c5a:	69f9      	ldr	r1, [r7, #28]
 8004c5c:	4401      	add	r1, r0
 8004c5e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c62:	4313      	orrs	r3, r2
 8004c64:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c7c:	69b9      	ldr	r1, [r7, #24]
 8004c7e:	0148      	lsls	r0, r1, #5
 8004c80:	69f9      	ldr	r1, [r7, #28]
 8004c82:	4401      	add	r1, r0
 8004c84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c8c:	79fb      	ldrb	r3, [r7, #7]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d10d      	bne.n	8004cae <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d009      	beq.n	8004cae <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6919      	ldr	r1, [r3, #16]
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004caa:	460a      	mov	r2, r1
 8004cac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	791b      	ldrb	r3, [r3, #4]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d128      	bne.n	8004d08 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d110      	bne.n	8004ce8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	0151      	lsls	r1, r2, #5
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	440a      	add	r2, r1
 8004cdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ce0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ce4:	6013      	str	r3, [r2, #0]
 8004ce6:	e00f      	b.n	8004d08 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	69ba      	ldr	r2, [r7, #24]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	69fa      	ldr	r2, [r7, #28]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69ba      	ldr	r2, [r7, #24]
 8004d18:	0151      	lsls	r1, r2, #5
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	440a      	add	r2, r1
 8004d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d22:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3720      	adds	r7, #32
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	1ff80000 	.word	0x1ff80000

08004d38 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b087      	sub	sp, #28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	4613      	mov	r3, r2
 8004d44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	785b      	ldrb	r3, [r3, #1]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	f040 80ce 	bne.w	8004ef6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d132      	bne.n	8004dc8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	0151      	lsls	r1, r2, #5
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	440a      	add	r2, r1
 8004d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	693a      	ldr	r2, [r7, #16]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004da4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc0:	0cdb      	lsrs	r3, r3, #19
 8004dc2:	04db      	lsls	r3, r3, #19
 8004dc4:	6113      	str	r3, [r2, #16]
 8004dc6:	e04e      	b.n	8004e66 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	0151      	lsls	r1, r2, #5
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	440a      	add	r2, r1
 8004dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de2:	0cdb      	lsrs	r3, r3, #19
 8004de4:	04db      	lsls	r3, r3, #19
 8004de6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	015a      	lsls	r2, r3, #5
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	4413      	add	r3, r2
 8004df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	693a      	ldr	r2, [r7, #16]
 8004df8:	0151      	lsls	r1, r2, #5
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	440a      	add	r2, r1
 8004dfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e0a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	699a      	ldr	r2, [r3, #24]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d903      	bls.n	8004e20 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	015a      	lsls	r2, r3, #5
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	4413      	add	r3, r2
 8004e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	0151      	lsls	r1, r2, #5
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	440a      	add	r2, r1
 8004e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e56:	6939      	ldr	r1, [r7, #16]
 8004e58:	0148      	lsls	r0, r1, #5
 8004e5a:	6979      	ldr	r1, [r7, #20]
 8004e5c:	4401      	add	r1, r0
 8004e5e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e62:	4313      	orrs	r3, r2
 8004e64:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d11e      	bne.n	8004eaa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d009      	beq.n	8004e88 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	461a      	mov	r2, r3
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	0151      	lsls	r1, r2, #5
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	e097      	b.n	8004fda <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	0151      	lsls	r1, r2, #5
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	440a      	add	r2, r1
 8004ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ec8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8083 	beq.w	8004fda <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	f003 030f 	and.w	r3, r3, #15
 8004ee4:	2101      	movs	r1, #1
 8004ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eea:	6979      	ldr	r1, [r7, #20]
 8004eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	634b      	str	r3, [r1, #52]	; 0x34
 8004ef4:	e071      	b.n	8004fda <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	0151      	lsls	r1, r2, #5
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	440a      	add	r2, r1
 8004f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f10:	0cdb      	lsrs	r3, r3, #19
 8004f12:	04db      	lsls	r3, r3, #19
 8004f14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	693a      	ldr	r2, [r7, #16]
 8004f26:	0151      	lsls	r1, r2, #5
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	440a      	add	r2, r1
 8004f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f38:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	0151      	lsls	r1, r2, #5
 8004f64:	697a      	ldr	r2, [r7, #20]
 8004f66:	440a      	add	r2, r1
 8004f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f70:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f88:	6939      	ldr	r1, [r7, #16]
 8004f8a:	0148      	lsls	r0, r1, #5
 8004f8c:	6979      	ldr	r1, [r7, #20]
 8004f8e:	4401      	add	r1, r0
 8004f90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f94:	4313      	orrs	r3, r2
 8004f96:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004f98:	79fb      	ldrb	r3, [r7, #7]
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d10d      	bne.n	8004fba <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d009      	beq.n	8004fba <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	6919      	ldr	r1, [r3, #16]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	460a      	mov	r2, r1
 8004fb8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fd8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b087      	sub	sp, #28
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	785b      	ldrb	r3, [r3, #1]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d14a      	bne.n	800509c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800501a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800501e:	f040 8086 	bne.w	800512e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	683a      	ldr	r2, [r7, #0]
 8005034:	7812      	ldrb	r2, [r2, #0]
 8005036:	0151      	lsls	r1, r2, #5
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	440a      	add	r2, r1
 800503c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005040:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005044:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	4413      	add	r3, r2
 8005050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	683a      	ldr	r2, [r7, #0]
 8005058:	7812      	ldrb	r2, [r2, #0]
 800505a:	0151      	lsls	r1, r2, #5
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	440a      	add	r2, r1
 8005060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005064:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005068:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	3301      	adds	r3, #1
 800506e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f242 7210 	movw	r2, #10000	; 0x2710
 8005076:	4293      	cmp	r3, r2
 8005078:	d902      	bls.n	8005080 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	75fb      	strb	r3, [r7, #23]
          break;
 800507e:	e056      	b.n	800512e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	015a      	lsls	r2, r3, #5
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005094:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005098:	d0e7      	beq.n	800506a <USB_EPStopXfer+0x82>
 800509a:	e048      	b.n	800512e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050b4:	d13b      	bne.n	800512e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	015a      	lsls	r2, r3, #5
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4413      	add	r3, r2
 80050c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	683a      	ldr	r2, [r7, #0]
 80050c8:	7812      	ldrb	r2, [r2, #0]
 80050ca:	0151      	lsls	r1, r2, #5
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	440a      	add	r2, r1
 80050d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050d8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	0151      	lsls	r1, r2, #5
 80050f0:	693a      	ldr	r2, [r7, #16]
 80050f2:	440a      	add	r2, r1
 80050f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050fc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	3301      	adds	r3, #1
 8005102:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f242 7210 	movw	r2, #10000	; 0x2710
 800510a:	4293      	cmp	r3, r2
 800510c:	d902      	bls.n	8005114 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	75fb      	strb	r3, [r7, #23]
          break;
 8005112:	e00c      	b.n	800512e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4413      	add	r3, r2
 800511e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005128:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800512c:	d0e7      	beq.n	80050fe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800512e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005130:	4618      	mov	r0, r3
 8005132:	371c      	adds	r7, #28
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800513c:	b480      	push	{r7}
 800513e:	b089      	sub	sp, #36	; 0x24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	4611      	mov	r1, r2
 8005148:	461a      	mov	r2, r3
 800514a:	460b      	mov	r3, r1
 800514c:	71fb      	strb	r3, [r7, #7]
 800514e:	4613      	mov	r3, r2
 8005150:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800515a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800515e:	2b00      	cmp	r3, #0
 8005160:	d123      	bne.n	80051aa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005162:	88bb      	ldrh	r3, [r7, #4]
 8005164:	3303      	adds	r3, #3
 8005166:	089b      	lsrs	r3, r3, #2
 8005168:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800516a:	2300      	movs	r3, #0
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	e018      	b.n	80051a2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	031a      	lsls	r2, r3, #12
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4413      	add	r3, r2
 8005178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800517c:	461a      	mov	r2, r3
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	3301      	adds	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	3301      	adds	r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	3301      	adds	r3, #1
 8005194:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	3301      	adds	r3, #1
 800519a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	3301      	adds	r3, #1
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	69ba      	ldr	r2, [r7, #24]
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d3e2      	bcc.n	8005170 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3724      	adds	r7, #36	; 0x24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr

080051b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b08b      	sub	sp, #44	; 0x2c
 80051bc:	af00      	add	r7, sp, #0
 80051be:	60f8      	str	r0, [r7, #12]
 80051c0:	60b9      	str	r1, [r7, #8]
 80051c2:	4613      	mov	r3, r2
 80051c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051ce:	88fb      	ldrh	r3, [r7, #6]
 80051d0:	089b      	lsrs	r3, r3, #2
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	f003 0303 	and.w	r3, r3, #3
 80051dc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051de:	2300      	movs	r3, #0
 80051e0:	623b      	str	r3, [r7, #32]
 80051e2:	e014      	b.n	800520e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	601a      	str	r2, [r3, #0]
    pDest++;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	3301      	adds	r3, #1
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	3301      	adds	r3, #1
 80051fa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fe:	3301      	adds	r3, #1
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	3301      	adds	r3, #1
 8005206:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	3301      	adds	r3, #1
 800520c:	623b      	str	r3, [r7, #32]
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	429a      	cmp	r2, r3
 8005214:	d3e6      	bcc.n	80051e4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005216:	8bfb      	ldrh	r3, [r7, #30]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01e      	beq.n	800525a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005220:	69bb      	ldr	r3, [r7, #24]
 8005222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005226:	461a      	mov	r2, r3
 8005228:	f107 0310 	add.w	r3, r7, #16
 800522c:	6812      	ldr	r2, [r2, #0]
 800522e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005230:	693a      	ldr	r2, [r7, #16]
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	b2db      	uxtb	r3, r3
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
 800523c:	b2da      	uxtb	r2, r3
 800523e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005240:	701a      	strb	r2, [r3, #0]
      i++;
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	3301      	adds	r3, #1
 8005246:	623b      	str	r3, [r7, #32]
      pDest++;
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	3301      	adds	r3, #1
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800524e:	8bfb      	ldrh	r3, [r7, #30]
 8005250:	3b01      	subs	r3, #1
 8005252:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005254:	8bfb      	ldrh	r3, [r7, #30]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1ea      	bne.n	8005230 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800525c:	4618      	mov	r0, r3
 800525e:	372c      	adds	r7, #44	; 0x2c
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d12c      	bne.n	80052de <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	015a      	lsls	r2, r3, #5
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4413      	add	r3, r2
 800528c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	db12      	blt.n	80052bc <USB_EPSetStall+0x54>
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00f      	beq.n	80052bc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68ba      	ldr	r2, [r7, #8]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052ba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	68fa      	ldr	r2, [r7, #12]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	e02b      	b.n	8005336 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	db12      	blt.n	8005316 <USB_EPSetStall+0xae>
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00f      	beq.n	8005316 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	015a      	lsls	r2, r3, #5
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	0151      	lsls	r1, r2, #5
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	440a      	add	r2, r1
 800530c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005310:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005314:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	0151      	lsls	r1, r2, #5
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	440a      	add	r2, r1
 800532c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005334:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	785b      	ldrb	r3, [r3, #1]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d128      	bne.n	80053b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800537e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	791b      	ldrb	r3, [r3, #4]
 8005384:	2b03      	cmp	r3, #3
 8005386:	d003      	beq.n	8005390 <USB_EPClearStall+0x4c>
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	791b      	ldrb	r3, [r3, #4]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d138      	bne.n	8005402 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	0151      	lsls	r1, r2, #5
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	440a      	add	r2, r1
 80053a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ae:	6013      	str	r3, [r2, #0]
 80053b0:	e027      	b.n	8005402 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	0151      	lsls	r1, r2, #5
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	440a      	add	r2, r1
 80053c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	791b      	ldrb	r3, [r3, #4]
 80053d6:	2b03      	cmp	r3, #3
 80053d8:	d003      	beq.n	80053e2 <USB_EPClearStall+0x9e>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	791b      	ldrb	r3, [r3, #4]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d10f      	bne.n	8005402 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	0151      	lsls	r1, r2, #5
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	440a      	add	r2, r1
 80053f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005400:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800542e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005432:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	78fb      	ldrb	r3, [r7, #3]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005444:	68f9      	ldr	r1, [r7, #12]
 8005446:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800544a:	4313      	orrs	r3, r2
 800544c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005476:	f023 0303 	bic.w	r3, r3, #3
 800547a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800548a:	f023 0302 	bic.w	r3, r3, #2
 800548e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr

0800549e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800549e:	b480      	push	{r7}
 80054a0:	b085      	sub	sp, #20
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054b8:	f023 0303 	bic.w	r3, r3, #3
 80054bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054cc:	f043 0302 	orr.w	r3, r3, #2
 80054d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	695b      	ldr	r3, [r3, #20]
 80054ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4013      	ands	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054f8:	68fb      	ldr	r3, [r7, #12]
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3714      	adds	r7, #20
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005506:	b480      	push	{r7}
 8005508:	b085      	sub	sp, #20
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005522:	69db      	ldr	r3, [r3, #28]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	4013      	ands	r3, r2
 8005528:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	0c1b      	lsrs	r3, r3, #16
}
 800552e:	4618      	mov	r0, r3
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005556:	69db      	ldr	r3, [r3, #28]
 8005558:	68ba      	ldr	r2, [r7, #8]
 800555a:	4013      	ands	r3, r2
 800555c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	b29b      	uxth	r3, r3
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800556e:	b480      	push	{r7}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
 8005576:	460b      	mov	r3, r1
 8005578:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800557e:	78fb      	ldrb	r3, [r7, #3]
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	4013      	ands	r3, r2
 800559a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800559c:	68bb      	ldr	r3, [r7, #8]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	460b      	mov	r3, r1
 80055b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	fa22 f303 	lsr.w	r3, r2, r3
 80055da:	01db      	lsls	r3, r3, #7
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	4013      	ands	r3, r2
 80055f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055f8:	68bb      	ldr	r3, [r7, #8]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	371c      	adds	r7, #28
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	f003 0301 	and.w	r3, r3, #1
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005622:	b480      	push	{r7}
 8005624:	b085      	sub	sp, #20
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800563c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005640:	f023 0307 	bic.w	r3, r3, #7
 8005644:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005658:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800565a:	2300      	movs	r3, #0
}
 800565c:	4618      	mov	r0, r3
 800565e:	3714      	adds	r7, #20
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	460b      	mov	r3, r1
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	333c      	adds	r3, #60	; 0x3c
 800567e:	3304      	adds	r3, #4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4a26      	ldr	r2, [pc, #152]	; (8005720 <USB_EP0_OutStart+0xb8>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d90a      	bls.n	80056a2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005698:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800569c:	d101      	bne.n	80056a2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	e037      	b.n	8005712 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	461a      	mov	r2, r3
 80056aa:	2300      	movs	r3, #0
 80056ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d0:	f043 0318 	orr.w	r3, r3, #24
 80056d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056e8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056ea:	7afb      	ldrb	r3, [r7, #11]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d10f      	bne.n	8005710 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f6:	461a      	mov	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800570a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800570e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	4f54300a 	.word	0x4f54300a

08005724 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3301      	adds	r3, #1
 8005734:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a13      	ldr	r2, [pc, #76]	; (8005788 <USB_CoreReset+0x64>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e01b      	b.n	800577a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	daf2      	bge.n	8005730 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800574a:	2300      	movs	r3, #0
 800574c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	f043 0201 	orr.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3301      	adds	r3, #1
 800575e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4a09      	ldr	r2, [pc, #36]	; (8005788 <USB_CoreReset+0x64>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e006      	b.n	800577a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b01      	cmp	r3, #1
 8005776:	d0f0      	beq.n	800575a <USB_CoreReset+0x36>

  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	00030d40 	.word	0x00030d40

0800578c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	460b      	mov	r3, r1
 8005796:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005798:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800579c:	f002 fc8a 	bl	80080b4 <USBD_static_malloc>
 80057a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d109      	bne.n	80057bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	32b0      	adds	r2, #176	; 0xb0
 80057b2:	2100      	movs	r1, #0
 80057b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80057b8:	2302      	movs	r3, #2
 80057ba:	e0d4      	b.n	8005966 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80057bc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80057c0:	2100      	movs	r1, #0
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f002 fce4 	bl	8008190 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	32b0      	adds	r2, #176	; 0xb0
 80057d2:	68f9      	ldr	r1, [r7, #12]
 80057d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	32b0      	adds	r2, #176	; 0xb0
 80057e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	7c1b      	ldrb	r3, [r3, #16]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d138      	bne.n	8005866 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80057f4:	4b5e      	ldr	r3, [pc, #376]	; (8005970 <USBD_CDC_Init+0x1e4>)
 80057f6:	7819      	ldrb	r1, [r3, #0]
 80057f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057fc:	2202      	movs	r2, #2
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f002 fb35 	bl	8007e6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005804:	4b5a      	ldr	r3, [pc, #360]	; (8005970 <USBD_CDC_Init+0x1e4>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	f003 020f 	and.w	r2, r3, #15
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	4613      	mov	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	440b      	add	r3, r1
 8005818:	3324      	adds	r3, #36	; 0x24
 800581a:	2201      	movs	r2, #1
 800581c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800581e:	4b55      	ldr	r3, [pc, #340]	; (8005974 <USBD_CDC_Init+0x1e8>)
 8005820:	7819      	ldrb	r1, [r3, #0]
 8005822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005826:	2202      	movs	r2, #2
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f002 fb20 	bl	8007e6e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800582e:	4b51      	ldr	r3, [pc, #324]	; (8005974 <USBD_CDC_Init+0x1e8>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	f003 020f 	and.w	r2, r3, #15
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005846:	2201      	movs	r2, #1
 8005848:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800584a:	4b4b      	ldr	r3, [pc, #300]	; (8005978 <USBD_CDC_Init+0x1ec>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f003 020f 	and.w	r2, r3, #15
 8005852:	6879      	ldr	r1, [r7, #4]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	009b      	lsls	r3, r3, #2
 800585c:	440b      	add	r3, r1
 800585e:	3326      	adds	r3, #38	; 0x26
 8005860:	2210      	movs	r2, #16
 8005862:	801a      	strh	r2, [r3, #0]
 8005864:	e035      	b.n	80058d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005866:	4b42      	ldr	r3, [pc, #264]	; (8005970 <USBD_CDC_Init+0x1e4>)
 8005868:	7819      	ldrb	r1, [r3, #0]
 800586a:	2340      	movs	r3, #64	; 0x40
 800586c:	2202      	movs	r2, #2
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f002 fafd 	bl	8007e6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005874:	4b3e      	ldr	r3, [pc, #248]	; (8005970 <USBD_CDC_Init+0x1e4>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	f003 020f 	and.w	r2, r3, #15
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	4613      	mov	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	440b      	add	r3, r1
 8005888:	3324      	adds	r3, #36	; 0x24
 800588a:	2201      	movs	r2, #1
 800588c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800588e:	4b39      	ldr	r3, [pc, #228]	; (8005974 <USBD_CDC_Init+0x1e8>)
 8005890:	7819      	ldrb	r1, [r3, #0]
 8005892:	2340      	movs	r3, #64	; 0x40
 8005894:	2202      	movs	r2, #2
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f002 fae9 	bl	8007e6e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800589c:	4b35      	ldr	r3, [pc, #212]	; (8005974 <USBD_CDC_Init+0x1e8>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f003 020f 	and.w	r2, r3, #15
 80058a4:	6879      	ldr	r1, [r7, #4]
 80058a6:	4613      	mov	r3, r2
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	4413      	add	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058b4:	2201      	movs	r2, #1
 80058b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058b8:	4b2f      	ldr	r3, [pc, #188]	; (8005978 <USBD_CDC_Init+0x1ec>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	f003 020f 	and.w	r2, r3, #15
 80058c0:	6879      	ldr	r1, [r7, #4]
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	440b      	add	r3, r1
 80058cc:	3326      	adds	r3, #38	; 0x26
 80058ce:	2210      	movs	r2, #16
 80058d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058d2:	4b29      	ldr	r3, [pc, #164]	; (8005978 <USBD_CDC_Init+0x1ec>)
 80058d4:	7819      	ldrb	r1, [r3, #0]
 80058d6:	2308      	movs	r3, #8
 80058d8:	2203      	movs	r2, #3
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f002 fac7 	bl	8007e6e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80058e0:	4b25      	ldr	r3, [pc, #148]	; (8005978 <USBD_CDC_Init+0x1ec>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	f003 020f 	and.w	r2, r3, #15
 80058e8:	6879      	ldr	r1, [r7, #4]
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	440b      	add	r3, r1
 80058f4:	3324      	adds	r3, #36	; 0x24
 80058f6:	2201      	movs	r2, #1
 80058f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	33b0      	adds	r3, #176	; 0xb0
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2200      	movs	r2, #0
 800591a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005930:	2302      	movs	r3, #2
 8005932:	e018      	b.n	8005966 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	7c1b      	ldrb	r3, [r3, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800593c:	4b0d      	ldr	r3, [pc, #52]	; (8005974 <USBD_CDC_Init+0x1e8>)
 800593e:	7819      	ldrb	r1, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005946:	f44f 7300 	mov.w	r3, #512	; 0x200
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f002 fb7e 	bl	800804c <USBD_LL_PrepareReceive>
 8005950:	e008      	b.n	8005964 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005952:	4b08      	ldr	r3, [pc, #32]	; (8005974 <USBD_CDC_Init+0x1e8>)
 8005954:	7819      	ldrb	r1, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800595c:	2340      	movs	r3, #64	; 0x40
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f002 fb74 	bl	800804c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	20000093 	.word	0x20000093
 8005974:	20000094 	.word	0x20000094
 8005978:	20000095 	.word	0x20000095

0800597c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005988:	4b3a      	ldr	r3, [pc, #232]	; (8005a74 <USBD_CDC_DeInit+0xf8>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	4619      	mov	r1, r3
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f002 fa93 	bl	8007eba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005994:	4b37      	ldr	r3, [pc, #220]	; (8005a74 <USBD_CDC_DeInit+0xf8>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f003 020f 	and.w	r2, r3, #15
 800599c:	6879      	ldr	r1, [r7, #4]
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	440b      	add	r3, r1
 80059a8:	3324      	adds	r3, #36	; 0x24
 80059aa:	2200      	movs	r2, #0
 80059ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80059ae:	4b32      	ldr	r3, [pc, #200]	; (8005a78 <USBD_CDC_DeInit+0xfc>)
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f002 fa80 	bl	8007eba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80059ba:	4b2f      	ldr	r3, [pc, #188]	; (8005a78 <USBD_CDC_DeInit+0xfc>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f003 020f 	and.w	r2, r3, #15
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059d2:	2200      	movs	r2, #0
 80059d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80059d6:	4b29      	ldr	r3, [pc, #164]	; (8005a7c <USBD_CDC_DeInit+0x100>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	4619      	mov	r1, r3
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f002 fa6c 	bl	8007eba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80059e2:	4b26      	ldr	r3, [pc, #152]	; (8005a7c <USBD_CDC_DeInit+0x100>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f003 020f 	and.w	r2, r3, #15
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	3324      	adds	r3, #36	; 0x24
 80059f8:	2200      	movs	r2, #0
 80059fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80059fc:	4b1f      	ldr	r3, [pc, #124]	; (8005a7c <USBD_CDC_DeInit+0x100>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f003 020f 	and.w	r2, r3, #15
 8005a04:	6879      	ldr	r1, [r7, #4]
 8005a06:	4613      	mov	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	440b      	add	r3, r1
 8005a10:	3326      	adds	r3, #38	; 0x26
 8005a12:	2200      	movs	r2, #0
 8005a14:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	32b0      	adds	r2, #176	; 0xb0
 8005a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01f      	beq.n	8005a68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	33b0      	adds	r3, #176	; 0xb0
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	32b0      	adds	r2, #176	; 0xb0
 8005a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f002 fb40 	bl	80080d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	32b0      	adds	r2, #176	; 0xb0
 8005a5a:	2100      	movs	r1, #0
 8005a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3708      	adds	r7, #8
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000093 	.word	0x20000093
 8005a78:	20000094 	.word	0x20000094
 8005a7c:	20000095 	.word	0x20000095

08005a80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	32b0      	adds	r2, #176	; 0xb0
 8005a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e0bf      	b.n	8005c30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d050      	beq.n	8005b5e <USBD_CDC_Setup+0xde>
 8005abc:	2b20      	cmp	r3, #32
 8005abe:	f040 80af 	bne.w	8005c20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	88db      	ldrh	r3, [r3, #6]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d03a      	beq.n	8005b40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	b25b      	sxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	da1b      	bge.n	8005b0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ada:	687a      	ldr	r2, [r7, #4]
 8005adc:	33b0      	adds	r3, #176	; 0xb0
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	683a      	ldr	r2, [r7, #0]
 8005ae8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005aea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005aec:	683a      	ldr	r2, [r7, #0]
 8005aee:	88d2      	ldrh	r2, [r2, #6]
 8005af0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	88db      	ldrh	r3, [r3, #6]
 8005af6:	2b07      	cmp	r3, #7
 8005af8:	bf28      	it	cs
 8005afa:	2307      	movcs	r3, #7
 8005afc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	89fa      	ldrh	r2, [r7, #14]
 8005b02:	4619      	mov	r1, r3
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f001 fd89 	bl	800761c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005b0a:	e090      	b.n	8005c2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	785a      	ldrb	r2, [r3, #1]
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	88db      	ldrh	r3, [r3, #6]
 8005b1a:	2b3f      	cmp	r3, #63	; 0x3f
 8005b1c:	d803      	bhi.n	8005b26 <USBD_CDC_Setup+0xa6>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	88db      	ldrh	r3, [r3, #6]
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	e000      	b.n	8005b28 <USBD_CDC_Setup+0xa8>
 8005b26:	2240      	movs	r2, #64	; 0x40
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005b2e:	6939      	ldr	r1, [r7, #16]
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005b36:	461a      	mov	r2, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f001 fd9b 	bl	8007674 <USBD_CtlPrepareRx>
      break;
 8005b3e:	e076      	b.n	8005c2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	33b0      	adds	r3, #176	; 0xb0
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	7850      	ldrb	r0, [r2, #1]
 8005b56:	2200      	movs	r2, #0
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	4798      	blx	r3
      break;
 8005b5c:	e067      	b.n	8005c2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	785b      	ldrb	r3, [r3, #1]
 8005b62:	2b0b      	cmp	r3, #11
 8005b64:	d851      	bhi.n	8005c0a <USBD_CDC_Setup+0x18a>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <USBD_CDC_Setup+0xec>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005b9d 	.word	0x08005b9d
 8005b70:	08005c19 	.word	0x08005c19
 8005b74:	08005c0b 	.word	0x08005c0b
 8005b78:	08005c0b 	.word	0x08005c0b
 8005b7c:	08005c0b 	.word	0x08005c0b
 8005b80:	08005c0b 	.word	0x08005c0b
 8005b84:	08005c0b 	.word	0x08005c0b
 8005b88:	08005c0b 	.word	0x08005c0b
 8005b8c:	08005c0b 	.word	0x08005c0b
 8005b90:	08005c0b 	.word	0x08005c0b
 8005b94:	08005bc7 	.word	0x08005bc7
 8005b98:	08005bf1 	.word	0x08005bf1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d107      	bne.n	8005bb8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005ba8:	f107 030a 	add.w	r3, r7, #10
 8005bac:	2202      	movs	r2, #2
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f001 fd33 	bl	800761c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bb6:	e032      	b.n	8005c1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 fcbd 	bl	800753a <USBD_CtlError>
            ret = USBD_FAIL;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	75fb      	strb	r3, [r7, #23]
          break;
 8005bc4:	e02b      	b.n	8005c1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b03      	cmp	r3, #3
 8005bd0:	d107      	bne.n	8005be2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bd2:	f107 030d 	add.w	r3, r7, #13
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	4619      	mov	r1, r3
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f001 fd1e 	bl	800761c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005be0:	e01d      	b.n	8005c1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005be2:	6839      	ldr	r1, [r7, #0]
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 fca8 	bl	800753a <USBD_CtlError>
            ret = USBD_FAIL;
 8005bea:	2303      	movs	r3, #3
 8005bec:	75fb      	strb	r3, [r7, #23]
          break;
 8005bee:	e016      	b.n	8005c1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b03      	cmp	r3, #3
 8005bfa:	d00f      	beq.n	8005c1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005bfc:	6839      	ldr	r1, [r7, #0]
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f001 fc9b 	bl	800753a <USBD_CtlError>
            ret = USBD_FAIL;
 8005c04:	2303      	movs	r3, #3
 8005c06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005c08:	e008      	b.n	8005c1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f001 fc94 	bl	800753a <USBD_CtlError>
          ret = USBD_FAIL;
 8005c12:	2303      	movs	r3, #3
 8005c14:	75fb      	strb	r3, [r7, #23]
          break;
 8005c16:	e002      	b.n	8005c1e <USBD_CDC_Setup+0x19e>
          break;
 8005c18:	bf00      	nop
 8005c1a:	e008      	b.n	8005c2e <USBD_CDC_Setup+0x1ae>
          break;
 8005c1c:	bf00      	nop
      }
      break;
 8005c1e:	e006      	b.n	8005c2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005c20:	6839      	ldr	r1, [r7, #0]
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f001 fc89 	bl	800753a <USBD_CtlError>
      ret = USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c2c:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3718      	adds	r7, #24
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}

08005c38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	460b      	mov	r3, r1
 8005c42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005c4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	32b0      	adds	r2, #176	; 0xb0
 8005c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005c5e:	2303      	movs	r3, #3
 8005c60:	e065      	b.n	8005d2e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	32b0      	adds	r2, #176	; 0xb0
 8005c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c72:	78fb      	ldrb	r3, [r7, #3]
 8005c74:	f003 020f 	and.w	r2, r3, #15
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	440b      	add	r3, r1
 8005c84:	3318      	adds	r3, #24
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d02f      	beq.n	8005cec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	f003 020f 	and.w	r2, r3, #15
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	3318      	adds	r3, #24
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	78fb      	ldrb	r3, [r7, #3]
 8005ca4:	f003 010f 	and.w	r1, r3, #15
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	460b      	mov	r3, r1
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	440b      	add	r3, r1
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4403      	add	r3, r0
 8005cb4:	3348      	adds	r3, #72	; 0x48
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	fbb2 f1f3 	udiv	r1, r2, r3
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d112      	bne.n	8005cec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005cc6:	78fb      	ldrb	r3, [r7, #3]
 8005cc8:	f003 020f 	and.w	r2, r3, #15
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	440b      	add	r3, r1
 8005cd8:	3318      	adds	r3, #24
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cde:	78f9      	ldrb	r1, [r7, #3]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f002 f990 	bl	800800a <USBD_LL_Transmit>
 8005cea:	e01f      	b.n	8005d2c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	33b0      	adds	r3, #176	; 0xb0
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d010      	beq.n	8005d2c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	33b0      	adds	r3, #176	; 0xb0
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d28:	78fa      	ldrb	r2, [r7, #3]
 8005d2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}

08005d36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d36:	b580      	push	{r7, lr}
 8005d38:	b084      	sub	sp, #16
 8005d3a:	af00      	add	r7, sp, #0
 8005d3c:	6078      	str	r0, [r7, #4]
 8005d3e:	460b      	mov	r3, r1
 8005d40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	32b0      	adds	r2, #176	; 0xb0
 8005d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	32b0      	adds	r2, #176	; 0xb0
 8005d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e01a      	b.n	8005d9e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f002 f98e 	bl	800808e <USBD_LL_GetRxDataSize>
 8005d72:	4602      	mov	r2, r0
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	33b0      	adds	r3, #176	; 0xb0
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d98:	4611      	mov	r1, r2
 8005d9a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	32b0      	adds	r2, #176	; 0xb0
 8005db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	e025      	b.n	8005e14 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	33b0      	adds	r3, #176	; 0xb0
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d01a      	beq.n	8005e12 <USBD_CDC_EP0_RxReady+0x6c>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005de2:	2bff      	cmp	r3, #255	; 0xff
 8005de4:	d015      	beq.n	8005e12 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	33b0      	adds	r3, #176	; 0xb0
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005dfe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005e06:	b292      	uxth	r2, r2
 8005e08:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	22ff      	movs	r2, #255	; 0xff
 8005e0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b086      	sub	sp, #24
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e24:	2182      	movs	r1, #130	; 0x82
 8005e26:	4818      	ldr	r0, [pc, #96]	; (8005e88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e28:	f000 fd4f 	bl	80068ca <USBD_GetEpDesc>
 8005e2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e2e:	2101      	movs	r1, #1
 8005e30:	4815      	ldr	r0, [pc, #84]	; (8005e88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e32:	f000 fd4a 	bl	80068ca <USBD_GetEpDesc>
 8005e36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e38:	2181      	movs	r1, #129	; 0x81
 8005e3a:	4813      	ldr	r0, [pc, #76]	; (8005e88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e3c:	f000 fd45 	bl	80068ca <USBD_GetEpDesc>
 8005e40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2210      	movs	r2, #16
 8005e4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d006      	beq.n	8005e62 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e5c:	711a      	strb	r2, [r3, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d006      	beq.n	8005e76 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e70:	711a      	strb	r2, [r3, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2243      	movs	r2, #67	; 0x43
 8005e7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e7c:	4b02      	ldr	r3, [pc, #8]	; (8005e88 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	20000050 	.word	0x20000050

08005e8c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b086      	sub	sp, #24
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e94:	2182      	movs	r1, #130	; 0x82
 8005e96:	4818      	ldr	r0, [pc, #96]	; (8005ef8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e98:	f000 fd17 	bl	80068ca <USBD_GetEpDesc>
 8005e9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	4815      	ldr	r0, [pc, #84]	; (8005ef8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005ea2:	f000 fd12 	bl	80068ca <USBD_GetEpDesc>
 8005ea6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ea8:	2181      	movs	r1, #129	; 0x81
 8005eaa:	4813      	ldr	r0, [pc, #76]	; (8005ef8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005eac:	f000 fd0d 	bl	80068ca <USBD_GetEpDesc>
 8005eb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	2210      	movs	r2, #16
 8005ebc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d006      	beq.n	8005ed2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	711a      	strb	r2, [r3, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f042 0202 	orr.w	r2, r2, #2
 8005ed0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d006      	beq.n	8005ee6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2200      	movs	r2, #0
 8005edc:	711a      	strb	r2, [r3, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f042 0202 	orr.w	r2, r2, #2
 8005ee4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2243      	movs	r2, #67	; 0x43
 8005eea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005eec:	4b02      	ldr	r3, [pc, #8]	; (8005ef8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20000050 	.word	0x20000050

08005efc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005f04:	2182      	movs	r1, #130	; 0x82
 8005f06:	4818      	ldr	r0, [pc, #96]	; (8005f68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f08:	f000 fcdf 	bl	80068ca <USBD_GetEpDesc>
 8005f0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005f0e:	2101      	movs	r1, #1
 8005f10:	4815      	ldr	r0, [pc, #84]	; (8005f68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f12:	f000 fcda 	bl	80068ca <USBD_GetEpDesc>
 8005f16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f18:	2181      	movs	r1, #129	; 0x81
 8005f1a:	4813      	ldr	r0, [pc, #76]	; (8005f68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f1c:	f000 fcd5 	bl	80068ca <USBD_GetEpDesc>
 8005f20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2210      	movs	r2, #16
 8005f2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d006      	beq.n	8005f42 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3c:	711a      	strb	r2, [r3, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d006      	beq.n	8005f56 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f50:	711a      	strb	r2, [r3, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2243      	movs	r2, #67	; 0x43
 8005f5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f5c:	4b02      	ldr	r3, [pc, #8]	; (8005f68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3718      	adds	r7, #24
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20000050 	.word	0x20000050

08005f6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	220a      	movs	r2, #10
 8005f78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f7a:	4b03      	ldr	r3, [pc, #12]	; (8005f88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr
 8005f88:	2000000c 	.word	0x2000000c

08005f8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e009      	b.n	8005fb4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	33b0      	adds	r3, #176	; 0xb0
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	32b0      	adds	r2, #176	; 0xb0
 8005fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fda:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e008      	b.n	8005ff8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	371c      	adds	r7, #28
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	32b0      	adds	r2, #176	; 0xb0
 8006018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800601c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006024:	2303      	movs	r3, #3
 8006026:	e004      	b.n	8006032 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	32b0      	adds	r2, #176	; 0xb0
 8006052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006056:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006058:	2301      	movs	r3, #1
 800605a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	32b0      	adds	r2, #176	; 0xb0
 8006066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800606e:	2303      	movs	r3, #3
 8006070:	e025      	b.n	80060be <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006078:	2b00      	cmp	r3, #0
 800607a:	d11f      	bne.n	80060bc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2201      	movs	r2, #1
 8006080:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006084:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <USBD_CDC_TransmitPacket+0x88>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	f003 020f 	and.w	r2, r3, #15
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4613      	mov	r3, r2
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4403      	add	r3, r0
 800609e:	3318      	adds	r3, #24
 80060a0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80060a2:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <USBD_CDC_TransmitPacket+0x88>)
 80060a4:	7819      	ldrb	r1, [r3, #0]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 ffa9 	bl	800800a <USBD_LL_Transmit>

    ret = USBD_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000093 	.word	0x20000093

080060cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	32b0      	adds	r2, #176	; 0xb0
 80060de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	32b0      	adds	r2, #176	; 0xb0
 80060ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d101      	bne.n	80060fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80060f6:	2303      	movs	r3, #3
 80060f8:	e018      	b.n	800612c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	7c1b      	ldrb	r3, [r3, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d10a      	bne.n	8006118 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006102:	4b0c      	ldr	r3, [pc, #48]	; (8006134 <USBD_CDC_ReceivePacket+0x68>)
 8006104:	7819      	ldrb	r1, [r3, #0]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800610c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 ff9b 	bl	800804c <USBD_LL_PrepareReceive>
 8006116:	e008      	b.n	800612a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006118:	4b06      	ldr	r3, [pc, #24]	; (8006134 <USBD_CDC_ReceivePacket+0x68>)
 800611a:	7819      	ldrb	r1, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006122:	2340      	movs	r3, #64	; 0x40
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f001 ff91 	bl	800804c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	20000094 	.word	0x20000094

08006138 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b086      	sub	sp, #24
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	4613      	mov	r3, r2
 8006144:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800614c:	2303      	movs	r3, #3
 800614e:	e01f      	b.n	8006190 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d003      	beq.n	8006176 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	79fa      	ldrb	r2, [r7, #7]
 8006182:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f001 fe0b 	bl	8007da0 <USBD_LL_Init>
 800618a:	4603      	mov	r3, r0
 800618c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800618e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006190:	4618      	mov	r0, r3
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061a2:	2300      	movs	r3, #0
 80061a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e025      	b.n	80061fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	32ae      	adds	r2, #174	; 0xae
 80061c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00f      	beq.n	80061ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	32ae      	adds	r2, #174	; 0xae
 80061d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	f107 020e 	add.w	r2, r7, #14
 80061e0:	4610      	mov	r0, r2
 80061e2:	4798      	blx	r3
 80061e4:	4602      	mov	r2, r0
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80061f2:	1c5a      	adds	r2, r3, #1
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3710      	adds	r7, #16
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f001 fe13 	bl	8007e38 <USBD_LL_Start>
 8006212:	4603      	mov	r3, r0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006224:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006248:	2b00      	cmp	r3, #0
 800624a:	d009      	beq.n	8006260 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	4611      	mov	r1, r2
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
 800625c:	4603      	mov	r3, r0
 800625e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006260:	7bfb      	ldrb	r3, [r7, #15]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b084      	sub	sp, #16
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	460b      	mov	r3, r1
 8006274:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	78fa      	ldrb	r2, [r7, #3]
 8006284:	4611      	mov	r1, r2
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	4798      	blx	r3
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006290:	2303      	movs	r3, #3
 8006292:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}

0800629e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800629e:	b580      	push	{r7, lr}
 80062a0:	b084      	sub	sp, #16
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
 80062a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062ae:	6839      	ldr	r1, [r7, #0]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 f908 	bl	80074c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80062c4:	461a      	mov	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d01a      	beq.n	8006310 <USBD_LL_SetupStage+0x72>
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d822      	bhi.n	8006324 <USBD_LL_SetupStage+0x86>
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <USBD_LL_SetupStage+0x4a>
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d00a      	beq.n	80062fc <USBD_LL_SetupStage+0x5e>
 80062e6:	e01d      	b.n	8006324 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fb5f 	bl	80069b4 <USBD_StdDevReq>
 80062f6:	4603      	mov	r3, r0
 80062f8:	73fb      	strb	r3, [r7, #15]
      break;
 80062fa:	e020      	b.n	800633e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fbc7 	bl	8006a98 <USBD_StdItfReq>
 800630a:	4603      	mov	r3, r0
 800630c:	73fb      	strb	r3, [r7, #15]
      break;
 800630e:	e016      	b.n	800633e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006316:	4619      	mov	r1, r3
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f000 fc29 	bl	8006b70 <USBD_StdEPReq>
 800631e:	4603      	mov	r3, r0
 8006320:	73fb      	strb	r3, [r7, #15]
      break;
 8006322:	e00c      	b.n	800633e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800632a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800632e:	b2db      	uxtb	r3, r3
 8006330:	4619      	mov	r1, r3
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 fde0 	bl	8007ef8 <USBD_LL_StallEP>
 8006338:	4603      	mov	r3, r0
 800633a:	73fb      	strb	r3, [r7, #15]
      break;
 800633c:	bf00      	nop
  }

  return ret;
 800633e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b086      	sub	sp, #24
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	460b      	mov	r3, r1
 8006352:	607a      	str	r2, [r7, #4]
 8006354:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800635a:	7afb      	ldrb	r3, [r7, #11]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d16e      	bne.n	800643e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006366:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800636e:	2b03      	cmp	r3, #3
 8006370:	f040 8098 	bne.w	80064a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	429a      	cmp	r2, r3
 800637e:	d913      	bls.n	80063a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	1ad2      	subs	r2, r2, r3
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	68da      	ldr	r2, [r3, #12]
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	4293      	cmp	r3, r2
 8006398:	bf28      	it	cs
 800639a:	4613      	movcs	r3, r2
 800639c:	461a      	mov	r2, r3
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f001 f984 	bl	80076ae <USBD_CtlContinueRx>
 80063a6:	e07d      	b.n	80064a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d014      	beq.n	80063e0 <USBD_LL_DataOutStage+0x98>
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d81d      	bhi.n	80063f6 <USBD_LL_DataOutStage+0xae>
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d002      	beq.n	80063c4 <USBD_LL_DataOutStage+0x7c>
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d003      	beq.n	80063ca <USBD_LL_DataOutStage+0x82>
 80063c2:	e018      	b.n	80063f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	75bb      	strb	r3, [r7, #22]
            break;
 80063c8:	e018      	b.n	80063fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	4619      	mov	r1, r3
 80063d4:	68f8      	ldr	r0, [r7, #12]
 80063d6:	f000 fa5e 	bl	8006896 <USBD_CoreFindIF>
 80063da:	4603      	mov	r3, r0
 80063dc:	75bb      	strb	r3, [r7, #22]
            break;
 80063de:	e00d      	b.n	80063fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	4619      	mov	r1, r3
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 fa60 	bl	80068b0 <USBD_CoreFindEP>
 80063f0:	4603      	mov	r3, r0
 80063f2:	75bb      	strb	r3, [r7, #22]
            break;
 80063f4:	e002      	b.n	80063fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80063f6:	2300      	movs	r3, #0
 80063f8:	75bb      	strb	r3, [r7, #22]
            break;
 80063fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80063fc:	7dbb      	ldrb	r3, [r7, #22]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d119      	bne.n	8006436 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006408:	b2db      	uxtb	r3, r3
 800640a:	2b03      	cmp	r3, #3
 800640c:	d113      	bne.n	8006436 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800640e:	7dba      	ldrb	r2, [r7, #22]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	32ae      	adds	r2, #174	; 0xae
 8006414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800641e:	7dba      	ldrb	r2, [r7, #22]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006426:	7dba      	ldrb	r2, [r7, #22]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	32ae      	adds	r2, #174	; 0xae
 800642c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	68f8      	ldr	r0, [r7, #12]
 8006434:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006436:	68f8      	ldr	r0, [r7, #12]
 8006438:	f001 f94a 	bl	80076d0 <USBD_CtlSendStatus>
 800643c:	e032      	b.n	80064a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800643e:	7afb      	ldrb	r3, [r7, #11]
 8006440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006444:	b2db      	uxtb	r3, r3
 8006446:	4619      	mov	r1, r3
 8006448:	68f8      	ldr	r0, [r7, #12]
 800644a:	f000 fa31 	bl	80068b0 <USBD_CoreFindEP>
 800644e:	4603      	mov	r3, r0
 8006450:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006452:	7dbb      	ldrb	r3, [r7, #22]
 8006454:	2bff      	cmp	r3, #255	; 0xff
 8006456:	d025      	beq.n	80064a4 <USBD_LL_DataOutStage+0x15c>
 8006458:	7dbb      	ldrb	r3, [r7, #22]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d122      	bne.n	80064a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006464:	b2db      	uxtb	r3, r3
 8006466:	2b03      	cmp	r3, #3
 8006468:	d117      	bne.n	800649a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800646a:	7dba      	ldrb	r2, [r7, #22]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	32ae      	adds	r2, #174	; 0xae
 8006470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00f      	beq.n	800649a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800647a:	7dba      	ldrb	r2, [r7, #22]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006482:	7dba      	ldrb	r2, [r7, #22]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	32ae      	adds	r2, #174	; 0xae
 8006488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	7afa      	ldrb	r2, [r7, #11]
 8006490:	4611      	mov	r1, r2
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	4798      	blx	r3
 8006496:	4603      	mov	r3, r0
 8006498:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800649a:	7dfb      	ldrb	r3, [r7, #23]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80064a0:	7dfb      	ldrb	r3, [r7, #23]
 80064a2:	e000      	b.n	80064a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3718      	adds	r7, #24
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	60f8      	str	r0, [r7, #12]
 80064b6:	460b      	mov	r3, r1
 80064b8:	607a      	str	r2, [r7, #4]
 80064ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80064bc:	7afb      	ldrb	r3, [r7, #11]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d16f      	bne.n	80065a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3314      	adds	r3, #20
 80064c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d15a      	bne.n	8006588 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d914      	bls.n	8006508 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	1ad2      	subs	r2, r2, r3
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	461a      	mov	r2, r3
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f001 f8ac 	bl	8007652 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064fa:	2300      	movs	r3, #0
 80064fc:	2200      	movs	r2, #0
 80064fe:	2100      	movs	r1, #0
 8006500:	68f8      	ldr	r0, [r7, #12]
 8006502:	f001 fda3 	bl	800804c <USBD_LL_PrepareReceive>
 8006506:	e03f      	b.n	8006588 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	429a      	cmp	r2, r3
 8006512:	d11c      	bne.n	800654e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	685a      	ldr	r2, [r3, #4]
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800651c:	429a      	cmp	r2, r3
 800651e:	d316      	bcc.n	800654e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800652a:	429a      	cmp	r2, r3
 800652c:	d20f      	bcs.n	800654e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800652e:	2200      	movs	r2, #0
 8006530:	2100      	movs	r1, #0
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f001 f88d 	bl	8007652 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2200      	movs	r2, #0
 800653c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006540:	2300      	movs	r3, #0
 8006542:	2200      	movs	r2, #0
 8006544:	2100      	movs	r1, #0
 8006546:	68f8      	ldr	r0, [r7, #12]
 8006548:	f001 fd80 	bl	800804c <USBD_LL_PrepareReceive>
 800654c:	e01c      	b.n	8006588 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b03      	cmp	r3, #3
 8006558:	d10f      	bne.n	800657a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800657a:	2180      	movs	r1, #128	; 0x80
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f001 fcbb 	bl	8007ef8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f001 f8b7 	bl	80076f6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d03a      	beq.n	8006608 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f7ff fe42 	bl	800621c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80065a0:	e032      	b.n	8006608 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80065a2:	7afb      	ldrb	r3, [r7, #11]
 80065a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	4619      	mov	r1, r3
 80065ac:	68f8      	ldr	r0, [r7, #12]
 80065ae:	f000 f97f 	bl	80068b0 <USBD_CoreFindEP>
 80065b2:	4603      	mov	r3, r0
 80065b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	2bff      	cmp	r3, #255	; 0xff
 80065ba:	d025      	beq.n	8006608 <USBD_LL_DataInStage+0x15a>
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d122      	bne.n	8006608 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065c8:	b2db      	uxtb	r3, r3
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d11c      	bne.n	8006608 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80065ce:	7dfa      	ldrb	r2, [r7, #23]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	32ae      	adds	r2, #174	; 0xae
 80065d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d014      	beq.n	8006608 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80065de:	7dfa      	ldrb	r2, [r7, #23]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80065e6:	7dfa      	ldrb	r2, [r7, #23]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	32ae      	adds	r2, #174	; 0xae
 80065ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	7afa      	ldrb	r2, [r7, #11]
 80065f4:	4611      	mov	r1, r2
 80065f6:	68f8      	ldr	r0, [r7, #12]
 80065f8:	4798      	blx	r3
 80065fa:	4603      	mov	r3, r0
 80065fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80065fe:	7dbb      	ldrb	r3, [r7, #22]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006604:	7dbb      	ldrb	r3, [r7, #22]
 8006606:	e000      	b.n	800660a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2201      	movs	r2, #1
 8006622:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664a:	2b00      	cmp	r3, #0
 800664c:	d014      	beq.n	8006678 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00e      	beq.n	8006678 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6852      	ldr	r2, [r2, #4]
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	4611      	mov	r1, r2
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006674:	2303      	movs	r3, #3
 8006676:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006678:	2340      	movs	r3, #64	; 0x40
 800667a:	2200      	movs	r2, #0
 800667c:	2100      	movs	r1, #0
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f001 fbf5 	bl	8007e6e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2240      	movs	r2, #64	; 0x40
 8006690:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006694:	2340      	movs	r3, #64	; 0x40
 8006696:	2200      	movs	r2, #0
 8006698:	2180      	movs	r1, #128	; 0x80
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f001 fbe7 	bl	8007e6e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2240      	movs	r2, #64	; 0x40
 80066aa:	621a      	str	r2, [r3, #32]

  return ret;
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	78fa      	ldrb	r2, [r7, #3]
 80066c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2204      	movs	r2, #4
 80066f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006702:	b480      	push	{r7}
 8006704:	b083      	sub	sp, #12
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b04      	cmp	r3, #4
 8006714:	d106      	bne.n	8006724 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800671c:	b2da      	uxtb	r2, r3
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006740:	b2db      	uxtb	r3, r3
 8006742:	2b03      	cmp	r3, #3
 8006744:	d110      	bne.n	8006768 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00b      	beq.n	8006768 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006756:	69db      	ldr	r3, [r3, #28]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006762:	69db      	ldr	r3, [r3, #28]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	460b      	mov	r3, r1
 800677c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	32ae      	adds	r2, #174	; 0xae
 8006788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d101      	bne.n	8006794 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006790:	2303      	movs	r3, #3
 8006792:	e01c      	b.n	80067ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b03      	cmp	r3, #3
 800679e:	d115      	bne.n	80067cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	32ae      	adds	r2, #174	; 0xae
 80067aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	32ae      	adds	r2, #174	; 0xae
 80067be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067c2:	6a1b      	ldr	r3, [r3, #32]
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	4611      	mov	r1, r2
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067cc:	2300      	movs	r3, #0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3708      	adds	r7, #8
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	32ae      	adds	r2, #174	; 0xae
 80067ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e01c      	b.n	8006832 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	2b03      	cmp	r3, #3
 8006802:	d115      	bne.n	8006830 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	32ae      	adds	r2, #174	; 0xae
 800680e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00b      	beq.n	8006830 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	32ae      	adds	r2, #174	; 0xae
 8006822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	78fa      	ldrb	r2, [r7, #3]
 800682a:	4611      	mov	r1, r2
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}

0800683a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800683a:	b480      	push	{r7}
 800683c:	b083      	sub	sp, #12
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2201      	movs	r2, #1
 8006860:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00e      	beq.n	800688c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	6852      	ldr	r2, [r2, #4]
 800687a:	b2d2      	uxtb	r2, r2
 800687c:	4611      	mov	r1, r2
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	4798      	blx	r3
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006888:	2303      	movs	r3, #3
 800688a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800688c:	7bfb      	ldrb	r3, [r7, #15]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	460b      	mov	r3, r1
 80068a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068be:	4618      	mov	r0, r3
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr

080068ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b086      	sub	sp, #24
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	460b      	mov	r3, r1
 80068d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80068de:	2300      	movs	r3, #0
 80068e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	885b      	ldrh	r3, [r3, #2]
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	781b      	ldrb	r3, [r3, #0]
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d920      	bls.n	8006934 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80068fa:	e013      	b.n	8006924 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80068fc:	f107 030a 	add.w	r3, r7, #10
 8006900:	4619      	mov	r1, r3
 8006902:	6978      	ldr	r0, [r7, #20]
 8006904:	f000 f81b 	bl	800693e <USBD_GetNextDesc>
 8006908:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	785b      	ldrb	r3, [r3, #1]
 800690e:	2b05      	cmp	r3, #5
 8006910:	d108      	bne.n	8006924 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	789b      	ldrb	r3, [r3, #2]
 800691a:	78fa      	ldrb	r2, [r7, #3]
 800691c:	429a      	cmp	r2, r3
 800691e:	d008      	beq.n	8006932 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006920:	2300      	movs	r3, #0
 8006922:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	885b      	ldrh	r3, [r3, #2]
 8006928:	b29a      	uxth	r2, r3
 800692a:	897b      	ldrh	r3, [r7, #10]
 800692c:	429a      	cmp	r2, r3
 800692e:	d8e5      	bhi.n	80068fc <USBD_GetEpDesc+0x32>
 8006930:	e000      	b.n	8006934 <USBD_GetEpDesc+0x6a>
          break;
 8006932:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006934:	693b      	ldr	r3, [r7, #16]
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}

0800693e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	881a      	ldrh	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	4413      	add	r3, r2
 8006958:	b29a      	uxth	r2, r3
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4413      	add	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800696a:	68fb      	ldr	r3, [r7, #12]
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	3301      	adds	r3, #1
 800698e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006996:	8a3b      	ldrh	r3, [r7, #16]
 8006998:	021b      	lsls	r3, r3, #8
 800699a:	b21a      	sxth	r2, r3
 800699c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	b21b      	sxth	r3, r3
 80069a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80069a6:	89fb      	ldrh	r3, [r7, #14]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	371c      	adds	r7, #28
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr

080069b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b084      	sub	sp, #16
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069ca:	2b40      	cmp	r3, #64	; 0x40
 80069cc:	d005      	beq.n	80069da <USBD_StdDevReq+0x26>
 80069ce:	2b40      	cmp	r3, #64	; 0x40
 80069d0:	d857      	bhi.n	8006a82 <USBD_StdDevReq+0xce>
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00f      	beq.n	80069f6 <USBD_StdDevReq+0x42>
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d153      	bne.n	8006a82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	32ae      	adds	r2, #174	; 0xae
 80069e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	4798      	blx	r3
 80069f0:	4603      	mov	r3, r0
 80069f2:	73fb      	strb	r3, [r7, #15]
      break;
 80069f4:	e04a      	b.n	8006a8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	785b      	ldrb	r3, [r3, #1]
 80069fa:	2b09      	cmp	r3, #9
 80069fc:	d83b      	bhi.n	8006a76 <USBD_StdDevReq+0xc2>
 80069fe:	a201      	add	r2, pc, #4	; (adr r2, 8006a04 <USBD_StdDevReq+0x50>)
 8006a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a04:	08006a59 	.word	0x08006a59
 8006a08:	08006a6d 	.word	0x08006a6d
 8006a0c:	08006a77 	.word	0x08006a77
 8006a10:	08006a63 	.word	0x08006a63
 8006a14:	08006a77 	.word	0x08006a77
 8006a18:	08006a37 	.word	0x08006a37
 8006a1c:	08006a2d 	.word	0x08006a2d
 8006a20:	08006a77 	.word	0x08006a77
 8006a24:	08006a4f 	.word	0x08006a4f
 8006a28:	08006a41 	.word	0x08006a41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fa3c 	bl	8006eac <USBD_GetDescriptor>
          break;
 8006a34:	e024      	b.n	8006a80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fba1 	bl	8007180 <USBD_SetAddress>
          break;
 8006a3e:	e01f      	b.n	8006a80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a40:	6839      	ldr	r1, [r7, #0]
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fbe0 	bl	8007208 <USBD_SetConfig>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73fb      	strb	r3, [r7, #15]
          break;
 8006a4c:	e018      	b.n	8006a80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fc83 	bl	800735c <USBD_GetConfig>
          break;
 8006a56:	e013      	b.n	8006a80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fcb4 	bl	80073c8 <USBD_GetStatus>
          break;
 8006a60:	e00e      	b.n	8006a80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fce3 	bl	8007430 <USBD_SetFeature>
          break;
 8006a6a:	e009      	b.n	8006a80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fd07 	bl	8007482 <USBD_ClrFeature>
          break;
 8006a74:	e004      	b.n	8006a80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006a76:	6839      	ldr	r1, [r7, #0]
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 fd5e 	bl	800753a <USBD_CtlError>
          break;
 8006a7e:	bf00      	nop
      }
      break;
 8006a80:	e004      	b.n	8006a8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fd58 	bl	800753a <USBD_CtlError>
      break;
 8006a8a:	bf00      	nop
  }

  return ret;
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop

08006a98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d005      	beq.n	8006abe <USBD_StdItfReq+0x26>
 8006ab2:	2b40      	cmp	r3, #64	; 0x40
 8006ab4:	d852      	bhi.n	8006b5c <USBD_StdItfReq+0xc4>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <USBD_StdItfReq+0x26>
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d14e      	bne.n	8006b5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	3b01      	subs	r3, #1
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d840      	bhi.n	8006b4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	889b      	ldrh	r3, [r3, #4]
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d836      	bhi.n	8006b44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	889b      	ldrh	r3, [r3, #4]
 8006ada:	b2db      	uxtb	r3, r3
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fed9 	bl	8006896 <USBD_CoreFindIF>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ae8:	7bbb      	ldrb	r3, [r7, #14]
 8006aea:	2bff      	cmp	r3, #255	; 0xff
 8006aec:	d01d      	beq.n	8006b2a <USBD_StdItfReq+0x92>
 8006aee:	7bbb      	ldrb	r3, [r7, #14]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d11a      	bne.n	8006b2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006af4:	7bba      	ldrb	r2, [r7, #14]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	32ae      	adds	r2, #174	; 0xae
 8006afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00f      	beq.n	8006b24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006b04:	7bba      	ldrb	r2, [r7, #14]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b0c:	7bba      	ldrb	r2, [r7, #14]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	32ae      	adds	r2, #174	; 0xae
 8006b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b22:	e004      	b.n	8006b2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b24:	2303      	movs	r3, #3
 8006b26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b28:	e001      	b.n	8006b2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	88db      	ldrh	r3, [r3, #6]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d110      	bne.n	8006b58 <USBD_StdItfReq+0xc0>
 8006b36:	7bfb      	ldrb	r3, [r7, #15]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10d      	bne.n	8006b58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fdc7 	bl	80076d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b42:	e009      	b.n	8006b58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fcf7 	bl	800753a <USBD_CtlError>
          break;
 8006b4c:	e004      	b.n	8006b58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fcf2 	bl	800753a <USBD_CtlError>
          break;
 8006b56:	e000      	b.n	8006b5a <USBD_StdItfReq+0xc2>
          break;
 8006b58:	bf00      	nop
      }
      break;
 8006b5a:	e004      	b.n	8006b66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 fceb 	bl	800753a <USBD_CtlError>
      break;
 8006b64:	bf00      	nop
  }

  return ret;
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	889b      	ldrh	r3, [r3, #4]
 8006b82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b8c:	2b40      	cmp	r3, #64	; 0x40
 8006b8e:	d007      	beq.n	8006ba0 <USBD_StdEPReq+0x30>
 8006b90:	2b40      	cmp	r3, #64	; 0x40
 8006b92:	f200 817f 	bhi.w	8006e94 <USBD_StdEPReq+0x324>
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d02a      	beq.n	8006bf0 <USBD_StdEPReq+0x80>
 8006b9a:	2b20      	cmp	r3, #32
 8006b9c:	f040 817a 	bne.w	8006e94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	4619      	mov	r1, r3
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f7ff fe83 	bl	80068b0 <USBD_CoreFindEP>
 8006baa:	4603      	mov	r3, r0
 8006bac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bae:	7b7b      	ldrb	r3, [r7, #13]
 8006bb0:	2bff      	cmp	r3, #255	; 0xff
 8006bb2:	f000 8174 	beq.w	8006e9e <USBD_StdEPReq+0x32e>
 8006bb6:	7b7b      	ldrb	r3, [r7, #13]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	f040 8170 	bne.w	8006e9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006bbe:	7b7a      	ldrb	r2, [r7, #13]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006bc6:	7b7a      	ldrb	r2, [r7, #13]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	32ae      	adds	r2, #174	; 0xae
 8006bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f000 8163 	beq.w	8006e9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006bd8:	7b7a      	ldrb	r2, [r7, #13]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	32ae      	adds	r2, #174	; 0xae
 8006bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	4798      	blx	r3
 8006bea:	4603      	mov	r3, r0
 8006bec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bee:	e156      	b.n	8006e9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	785b      	ldrb	r3, [r3, #1]
 8006bf4:	2b03      	cmp	r3, #3
 8006bf6:	d008      	beq.n	8006c0a <USBD_StdEPReq+0x9a>
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	f300 8145 	bgt.w	8006e88 <USBD_StdEPReq+0x318>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 809b 	beq.w	8006d3a <USBD_StdEPReq+0x1ca>
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d03c      	beq.n	8006c82 <USBD_StdEPReq+0x112>
 8006c08:	e13e      	b.n	8006e88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d002      	beq.n	8006c1c <USBD_StdEPReq+0xac>
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d016      	beq.n	8006c48 <USBD_StdEPReq+0xd8>
 8006c1a:	e02c      	b.n	8006c76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c1c:	7bbb      	ldrb	r3, [r7, #14]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00d      	beq.n	8006c3e <USBD_StdEPReq+0xce>
 8006c22:	7bbb      	ldrb	r3, [r7, #14]
 8006c24:	2b80      	cmp	r3, #128	; 0x80
 8006c26:	d00a      	beq.n	8006c3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f001 f963 	bl	8007ef8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c32:	2180      	movs	r1, #128	; 0x80
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f001 f95f 	bl	8007ef8 <USBD_LL_StallEP>
 8006c3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c3c:	e020      	b.n	8006c80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fc7a 	bl	800753a <USBD_CtlError>
              break;
 8006c46:	e01b      	b.n	8006c80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	885b      	ldrh	r3, [r3, #2]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d10e      	bne.n	8006c6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00b      	beq.n	8006c6e <USBD_StdEPReq+0xfe>
 8006c56:	7bbb      	ldrb	r3, [r7, #14]
 8006c58:	2b80      	cmp	r3, #128	; 0x80
 8006c5a:	d008      	beq.n	8006c6e <USBD_StdEPReq+0xfe>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	88db      	ldrh	r3, [r3, #6]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d104      	bne.n	8006c6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c64:	7bbb      	ldrb	r3, [r7, #14]
 8006c66:	4619      	mov	r1, r3
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f001 f945 	bl	8007ef8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fd2e 	bl	80076d0 <USBD_CtlSendStatus>

              break;
 8006c74:	e004      	b.n	8006c80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006c76:	6839      	ldr	r1, [r7, #0]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fc5e 	bl	800753a <USBD_CtlError>
              break;
 8006c7e:	bf00      	nop
          }
          break;
 8006c80:	e107      	b.n	8006e92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d002      	beq.n	8006c94 <USBD_StdEPReq+0x124>
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d016      	beq.n	8006cc0 <USBD_StdEPReq+0x150>
 8006c92:	e04b      	b.n	8006d2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c94:	7bbb      	ldrb	r3, [r7, #14]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00d      	beq.n	8006cb6 <USBD_StdEPReq+0x146>
 8006c9a:	7bbb      	ldrb	r3, [r7, #14]
 8006c9c:	2b80      	cmp	r3, #128	; 0x80
 8006c9e:	d00a      	beq.n	8006cb6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ca0:	7bbb      	ldrb	r3, [r7, #14]
 8006ca2:	4619      	mov	r1, r3
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 f927 	bl	8007ef8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006caa:	2180      	movs	r1, #128	; 0x80
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f001 f923 	bl	8007ef8 <USBD_LL_StallEP>
 8006cb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006cb4:	e040      	b.n	8006d38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006cb6:	6839      	ldr	r1, [r7, #0]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fc3e 	bl	800753a <USBD_CtlError>
              break;
 8006cbe:	e03b      	b.n	8006d38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	885b      	ldrh	r3, [r3, #2]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d136      	bne.n	8006d36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006cc8:	7bbb      	ldrb	r3, [r7, #14]
 8006cca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d004      	beq.n	8006cdc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f001 f92d 	bl	8007f36 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fcf7 	bl	80076d0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ce2:	7bbb      	ldrb	r3, [r7, #14]
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f7ff fde2 	bl	80068b0 <USBD_CoreFindEP>
 8006cec:	4603      	mov	r3, r0
 8006cee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cf0:	7b7b      	ldrb	r3, [r7, #13]
 8006cf2:	2bff      	cmp	r3, #255	; 0xff
 8006cf4:	d01f      	beq.n	8006d36 <USBD_StdEPReq+0x1c6>
 8006cf6:	7b7b      	ldrb	r3, [r7, #13]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d11c      	bne.n	8006d36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006cfc:	7b7a      	ldrb	r2, [r7, #13]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006d04:	7b7a      	ldrb	r2, [r7, #13]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	32ae      	adds	r2, #174	; 0xae
 8006d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d010      	beq.n	8006d36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d14:	7b7a      	ldrb	r2, [r7, #13]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	32ae      	adds	r2, #174	; 0xae
 8006d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	4798      	blx	r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d2a:	e004      	b.n	8006d36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fc03 	bl	800753a <USBD_CtlError>
              break;
 8006d34:	e000      	b.n	8006d38 <USBD_StdEPReq+0x1c8>
              break;
 8006d36:	bf00      	nop
          }
          break;
 8006d38:	e0ab      	b.n	8006e92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b02      	cmp	r3, #2
 8006d44:	d002      	beq.n	8006d4c <USBD_StdEPReq+0x1dc>
 8006d46:	2b03      	cmp	r3, #3
 8006d48:	d032      	beq.n	8006db0 <USBD_StdEPReq+0x240>
 8006d4a:	e097      	b.n	8006e7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d007      	beq.n	8006d62 <USBD_StdEPReq+0x1f2>
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	2b80      	cmp	r3, #128	; 0x80
 8006d56:	d004      	beq.n	8006d62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 fbed 	bl	800753a <USBD_CtlError>
                break;
 8006d60:	e091      	b.n	8006e86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	da0b      	bge.n	8006d82 <USBD_StdEPReq+0x212>
 8006d6a:	7bbb      	ldrb	r3, [r7, #14]
 8006d6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	3310      	adds	r3, #16
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	3304      	adds	r3, #4
 8006d80:	e00b      	b.n	8006d9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d82:	7bbb      	ldrb	r3, [r7, #14]
 8006d84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	4413      	add	r3, r2
 8006d98:	3304      	adds	r3, #4
 8006d9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	2202      	movs	r2, #2
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fc37 	bl	800761c <USBD_CtlSendData>
              break;
 8006dae:	e06a      	b.n	8006e86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	da11      	bge.n	8006ddc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006db8:	7bbb      	ldrb	r3, [r7, #14]
 8006dba:	f003 020f 	and.w	r2, r3, #15
 8006dbe:	6879      	ldr	r1, [r7, #4]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	3324      	adds	r3, #36	; 0x24
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d117      	bne.n	8006e02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fbb0 	bl	800753a <USBD_CtlError>
                  break;
 8006dda:	e054      	b.n	8006e86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	f003 020f 	and.w	r2, r3, #15
 8006de2:	6879      	ldr	r1, [r7, #4]
 8006de4:	4613      	mov	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4413      	add	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006df8:	6839      	ldr	r1, [r7, #0]
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fb9d 	bl	800753a <USBD_CtlError>
                  break;
 8006e00:	e041      	b.n	8006e86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	da0b      	bge.n	8006e22 <USBD_StdEPReq+0x2b2>
 8006e0a:	7bbb      	ldrb	r3, [r7, #14]
 8006e0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e10:	4613      	mov	r3, r2
 8006e12:	009b      	lsls	r3, r3, #2
 8006e14:	4413      	add	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	3310      	adds	r3, #16
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	3304      	adds	r3, #4
 8006e20:	e00b      	b.n	8006e3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e22:	7bbb      	ldrb	r3, [r7, #14]
 8006e24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e28:	4613      	mov	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	4413      	add	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	4413      	add	r3, r2
 8006e38:	3304      	adds	r3, #4
 8006e3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d002      	beq.n	8006e48 <USBD_StdEPReq+0x2d8>
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	2b80      	cmp	r3, #128	; 0x80
 8006e46:	d103      	bne.n	8006e50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e00e      	b.n	8006e6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f001 f88d 	bl	8007f74 <USBD_LL_IsStallEP>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d003      	beq.n	8006e68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	2201      	movs	r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
 8006e66:	e002      	b.n	8006e6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	2202      	movs	r2, #2
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fbd1 	bl	800761c <USBD_CtlSendData>
              break;
 8006e7a:	e004      	b.n	8006e86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fb5b 	bl	800753a <USBD_CtlError>
              break;
 8006e84:	bf00      	nop
          }
          break;
 8006e86:	e004      	b.n	8006e92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006e88:	6839      	ldr	r1, [r7, #0]
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fb55 	bl	800753a <USBD_CtlError>
          break;
 8006e90:	bf00      	nop
      }
      break;
 8006e92:	e005      	b.n	8006ea0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fb4f 	bl	800753a <USBD_CtlError>
      break;
 8006e9c:	e000      	b.n	8006ea0 <USBD_StdEPReq+0x330>
      break;
 8006e9e:	bf00      	nop
  }

  return ret;
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
	...

08006eac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	885b      	ldrh	r3, [r3, #2]
 8006ec6:	0a1b      	lsrs	r3, r3, #8
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	2b06      	cmp	r3, #6
 8006ece:	f200 8128 	bhi.w	8007122 <USBD_GetDescriptor+0x276>
 8006ed2:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <USBD_GetDescriptor+0x2c>)
 8006ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed8:	08006ef5 	.word	0x08006ef5
 8006edc:	08006f0d 	.word	0x08006f0d
 8006ee0:	08006f4d 	.word	0x08006f4d
 8006ee4:	08007123 	.word	0x08007123
 8006ee8:	08007123 	.word	0x08007123
 8006eec:	080070c3 	.word	0x080070c3
 8006ef0:	080070ef 	.word	0x080070ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	7c12      	ldrb	r2, [r2, #16]
 8006f00:	f107 0108 	add.w	r1, r7, #8
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
 8006f08:	60f8      	str	r0, [r7, #12]
      break;
 8006f0a:	e112      	b.n	8007132 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	7c1b      	ldrb	r3, [r3, #16]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d10d      	bne.n	8006f30 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	f107 0208 	add.w	r2, r7, #8
 8006f20:	4610      	mov	r0, r2
 8006f22:	4798      	blx	r3
 8006f24:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f2e:	e100      	b.n	8007132 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f38:	f107 0208 	add.w	r2, r7, #8
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4798      	blx	r3
 8006f40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3301      	adds	r3, #1
 8006f46:	2202      	movs	r2, #2
 8006f48:	701a      	strb	r2, [r3, #0]
      break;
 8006f4a:	e0f2      	b.n	8007132 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	885b      	ldrh	r3, [r3, #2]
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b05      	cmp	r3, #5
 8006f54:	f200 80ac 	bhi.w	80070b0 <USBD_GetDescriptor+0x204>
 8006f58:	a201      	add	r2, pc, #4	; (adr r2, 8006f60 <USBD_GetDescriptor+0xb4>)
 8006f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f5e:	bf00      	nop
 8006f60:	08006f79 	.word	0x08006f79
 8006f64:	08006fad 	.word	0x08006fad
 8006f68:	08006fe1 	.word	0x08006fe1
 8006f6c:	08007015 	.word	0x08007015
 8006f70:	08007049 	.word	0x08007049
 8006f74:	0800707d 	.word	0x0800707d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00b      	beq.n	8006f9c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	7c12      	ldrb	r2, [r2, #16]
 8006f90:	f107 0108 	add.w	r1, r7, #8
 8006f94:	4610      	mov	r0, r2
 8006f96:	4798      	blx	r3
 8006f98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f9a:	e091      	b.n	80070c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f9c:	6839      	ldr	r1, [r7, #0]
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 facb 	bl	800753a <USBD_CtlError>
            err++;
 8006fa4:	7afb      	ldrb	r3, [r7, #11]
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	72fb      	strb	r3, [r7, #11]
          break;
 8006faa:	e089      	b.n	80070c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	7c12      	ldrb	r2, [r2, #16]
 8006fc4:	f107 0108 	add.w	r1, r7, #8
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4798      	blx	r3
 8006fcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fce:	e077      	b.n	80070c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fab1 	bl	800753a <USBD_CtlError>
            err++;
 8006fd8:	7afb      	ldrb	r3, [r7, #11]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	72fb      	strb	r3, [r7, #11]
          break;
 8006fde:	e06f      	b.n	80070c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00b      	beq.n	8007004 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	7c12      	ldrb	r2, [r2, #16]
 8006ff8:	f107 0108 	add.w	r1, r7, #8
 8006ffc:	4610      	mov	r0, r2
 8006ffe:	4798      	blx	r3
 8007000:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007002:	e05d      	b.n	80070c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 fa97 	bl	800753a <USBD_CtlError>
            err++;
 800700c:	7afb      	ldrb	r3, [r7, #11]
 800700e:	3301      	adds	r3, #1
 8007010:	72fb      	strb	r3, [r7, #11]
          break;
 8007012:	e055      	b.n	80070c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d00b      	beq.n	8007038 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	7c12      	ldrb	r2, [r2, #16]
 800702c:	f107 0108 	add.w	r1, r7, #8
 8007030:	4610      	mov	r0, r2
 8007032:	4798      	blx	r3
 8007034:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007036:	e043      	b.n	80070c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fa7d 	bl	800753a <USBD_CtlError>
            err++;
 8007040:	7afb      	ldrb	r3, [r7, #11]
 8007042:	3301      	adds	r3, #1
 8007044:	72fb      	strb	r3, [r7, #11]
          break;
 8007046:	e03b      	b.n	80070c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00b      	beq.n	800706c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	7c12      	ldrb	r2, [r2, #16]
 8007060:	f107 0108 	add.w	r1, r7, #8
 8007064:	4610      	mov	r0, r2
 8007066:	4798      	blx	r3
 8007068:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800706a:	e029      	b.n	80070c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800706c:	6839      	ldr	r1, [r7, #0]
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa63 	bl	800753a <USBD_CtlError>
            err++;
 8007074:	7afb      	ldrb	r3, [r7, #11]
 8007076:	3301      	adds	r3, #1
 8007078:	72fb      	strb	r3, [r7, #11]
          break;
 800707a:	e021      	b.n	80070c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d00b      	beq.n	80070a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	7c12      	ldrb	r2, [r2, #16]
 8007094:	f107 0108 	add.w	r1, r7, #8
 8007098:	4610      	mov	r0, r2
 800709a:	4798      	blx	r3
 800709c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800709e:	e00f      	b.n	80070c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070a0:	6839      	ldr	r1, [r7, #0]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 fa49 	bl	800753a <USBD_CtlError>
            err++;
 80070a8:	7afb      	ldrb	r3, [r7, #11]
 80070aa:	3301      	adds	r3, #1
 80070ac:	72fb      	strb	r3, [r7, #11]
          break;
 80070ae:	e007      	b.n	80070c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fa41 	bl	800753a <USBD_CtlError>
          err++;
 80070b8:	7afb      	ldrb	r3, [r7, #11]
 80070ba:	3301      	adds	r3, #1
 80070bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80070be:	bf00      	nop
      }
      break;
 80070c0:	e037      	b.n	8007132 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	7c1b      	ldrb	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d109      	bne.n	80070de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d2:	f107 0208 	add.w	r2, r7, #8
 80070d6:	4610      	mov	r0, r2
 80070d8:	4798      	blx	r3
 80070da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070dc:	e029      	b.n	8007132 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 fa2a 	bl	800753a <USBD_CtlError>
        err++;
 80070e6:	7afb      	ldrb	r3, [r7, #11]
 80070e8:	3301      	adds	r3, #1
 80070ea:	72fb      	strb	r3, [r7, #11]
      break;
 80070ec:	e021      	b.n	8007132 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	7c1b      	ldrb	r3, [r3, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10d      	bne.n	8007112 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fe:	f107 0208 	add.w	r2, r7, #8
 8007102:	4610      	mov	r0, r2
 8007104:	4798      	blx	r3
 8007106:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	3301      	adds	r3, #1
 800710c:	2207      	movs	r2, #7
 800710e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007110:	e00f      	b.n	8007132 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007112:	6839      	ldr	r1, [r7, #0]
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f000 fa10 	bl	800753a <USBD_CtlError>
        err++;
 800711a:	7afb      	ldrb	r3, [r7, #11]
 800711c:	3301      	adds	r3, #1
 800711e:	72fb      	strb	r3, [r7, #11]
      break;
 8007120:	e007      	b.n	8007132 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 fa08 	bl	800753a <USBD_CtlError>
      err++;
 800712a:	7afb      	ldrb	r3, [r7, #11]
 800712c:	3301      	adds	r3, #1
 800712e:	72fb      	strb	r3, [r7, #11]
      break;
 8007130:	bf00      	nop
  }

  if (err != 0U)
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d11e      	bne.n	8007176 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	88db      	ldrh	r3, [r3, #6]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d016      	beq.n	800716e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007140:	893b      	ldrh	r3, [r7, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00e      	beq.n	8007164 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	88da      	ldrh	r2, [r3, #6]
 800714a:	893b      	ldrh	r3, [r7, #8]
 800714c:	4293      	cmp	r3, r2
 800714e:	bf28      	it	cs
 8007150:	4613      	movcs	r3, r2
 8007152:	b29b      	uxth	r3, r3
 8007154:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007156:	893b      	ldrh	r3, [r7, #8]
 8007158:	461a      	mov	r2, r3
 800715a:	68f9      	ldr	r1, [r7, #12]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fa5d 	bl	800761c <USBD_CtlSendData>
 8007162:	e009      	b.n	8007178 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f9e7 	bl	800753a <USBD_CtlError>
 800716c:	e004      	b.n	8007178 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 faae 	bl	80076d0 <USBD_CtlSendStatus>
 8007174:	e000      	b.n	8007178 <USBD_GetDescriptor+0x2cc>
    return;
 8007176:	bf00      	nop
  }
}
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop

08007180 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b084      	sub	sp, #16
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	889b      	ldrh	r3, [r3, #4]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d131      	bne.n	80071f6 <USBD_SetAddress+0x76>
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	88db      	ldrh	r3, [r3, #6]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d12d      	bne.n	80071f6 <USBD_SetAddress+0x76>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	885b      	ldrh	r3, [r3, #2]
 800719e:	2b7f      	cmp	r3, #127	; 0x7f
 80071a0:	d829      	bhi.n	80071f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	885b      	ldrh	r3, [r3, #2]
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d104      	bne.n	80071c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071ba:	6839      	ldr	r1, [r7, #0]
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 f9bc 	bl	800753a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071c2:	e01d      	b.n	8007200 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	7bfa      	ldrb	r2, [r7, #15]
 80071c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fefb 	bl	8007fcc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa7a 	bl	80076d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d004      	beq.n	80071ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2202      	movs	r2, #2
 80071e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ea:	e009      	b.n	8007200 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f4:	e004      	b.n	8007200 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f99e 	bl	800753a <USBD_CtlError>
  }
}
 80071fe:	bf00      	nop
 8007200:	bf00      	nop
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007212:	2300      	movs	r3, #0
 8007214:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	885b      	ldrh	r3, [r3, #2]
 800721a:	b2da      	uxtb	r2, r3
 800721c:	4b4e      	ldr	r3, [pc, #312]	; (8007358 <USBD_SetConfig+0x150>)
 800721e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007220:	4b4d      	ldr	r3, [pc, #308]	; (8007358 <USBD_SetConfig+0x150>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d905      	bls.n	8007234 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f985 	bl	800753a <USBD_CtlError>
    return USBD_FAIL;
 8007230:	2303      	movs	r3, #3
 8007232:	e08c      	b.n	800734e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d002      	beq.n	8007246 <USBD_SetConfig+0x3e>
 8007240:	2b03      	cmp	r3, #3
 8007242:	d029      	beq.n	8007298 <USBD_SetConfig+0x90>
 8007244:	e075      	b.n	8007332 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007246:	4b44      	ldr	r3, [pc, #272]	; (8007358 <USBD_SetConfig+0x150>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d020      	beq.n	8007290 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800724e:	4b42      	ldr	r3, [pc, #264]	; (8007358 <USBD_SetConfig+0x150>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007258:	4b3f      	ldr	r3, [pc, #252]	; (8007358 <USBD_SetConfig+0x150>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f7fe ffe7 	bl	8006232 <USBD_SetClassConfig>
 8007264:	4603      	mov	r3, r0
 8007266:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007268:	7bfb      	ldrb	r3, [r7, #15]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d008      	beq.n	8007280 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f962 	bl	800753a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2202      	movs	r2, #2
 800727a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800727e:	e065      	b.n	800734c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fa25 	bl	80076d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2203      	movs	r2, #3
 800728a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800728e:	e05d      	b.n	800734c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f000 fa1d 	bl	80076d0 <USBD_CtlSendStatus>
      break;
 8007296:	e059      	b.n	800734c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007298:	4b2f      	ldr	r3, [pc, #188]	; (8007358 <USBD_SetConfig+0x150>)
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d112      	bne.n	80072c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80072a8:	4b2b      	ldr	r3, [pc, #172]	; (8007358 <USBD_SetConfig+0x150>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80072b2:	4b29      	ldr	r3, [pc, #164]	; (8007358 <USBD_SetConfig+0x150>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f7fe ffd6 	bl	800626a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fa06 	bl	80076d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072c4:	e042      	b.n	800734c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80072c6:	4b24      	ldr	r3, [pc, #144]	; (8007358 <USBD_SetConfig+0x150>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	461a      	mov	r2, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d02a      	beq.n	800732a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7fe ffc4 	bl	800626a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80072e2:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <USBD_SetConfig+0x150>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072ec:	4b1a      	ldr	r3, [pc, #104]	; (8007358 <USBD_SetConfig+0x150>)
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	4619      	mov	r1, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fe ff9d 	bl	8006232 <USBD_SetClassConfig>
 80072f8:	4603      	mov	r3, r0
 80072fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80072fc:	7bfb      	ldrb	r3, [r7, #15]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00f      	beq.n	8007322 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f918 	bl	800753a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fe ffa9 	bl	800626a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2202      	movs	r2, #2
 800731c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007320:	e014      	b.n	800734c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f9d4 	bl	80076d0 <USBD_CtlSendStatus>
      break;
 8007328:	e010      	b.n	800734c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f000 f9d0 	bl	80076d0 <USBD_CtlSendStatus>
      break;
 8007330:	e00c      	b.n	800734c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f900 	bl	800753a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800733a:	4b07      	ldr	r3, [pc, #28]	; (8007358 <USBD_SetConfig+0x150>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	4619      	mov	r1, r3
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f7fe ff92 	bl	800626a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007346:	2303      	movs	r3, #3
 8007348:	73fb      	strb	r3, [r7, #15]
      break;
 800734a:	bf00      	nop
  }

  return ret;
 800734c:	7bfb      	ldrb	r3, [r7, #15]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	200002f4 	.word	0x200002f4

0800735c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	88db      	ldrh	r3, [r3, #6]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d004      	beq.n	8007378 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f8e2 	bl	800753a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007376:	e023      	b.n	80073c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b02      	cmp	r3, #2
 8007382:	dc02      	bgt.n	800738a <USBD_GetConfig+0x2e>
 8007384:	2b00      	cmp	r3, #0
 8007386:	dc03      	bgt.n	8007390 <USBD_GetConfig+0x34>
 8007388:	e015      	b.n	80073b6 <USBD_GetConfig+0x5a>
 800738a:	2b03      	cmp	r3, #3
 800738c:	d00b      	beq.n	80073a6 <USBD_GetConfig+0x4a>
 800738e:	e012      	b.n	80073b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	3308      	adds	r3, #8
 800739a:	2201      	movs	r2, #1
 800739c:	4619      	mov	r1, r3
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f93c 	bl	800761c <USBD_CtlSendData>
        break;
 80073a4:	e00c      	b.n	80073c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	3304      	adds	r3, #4
 80073aa:	2201      	movs	r2, #1
 80073ac:	4619      	mov	r1, r3
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 f934 	bl	800761c <USBD_CtlSendData>
        break;
 80073b4:	e004      	b.n	80073c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073b6:	6839      	ldr	r1, [r7, #0]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 f8be 	bl	800753a <USBD_CtlError>
        break;
 80073be:	bf00      	nop
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	3b01      	subs	r3, #1
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d81e      	bhi.n	800741e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	88db      	ldrh	r3, [r3, #6]
 80073e4:	2b02      	cmp	r3, #2
 80073e6:	d004      	beq.n	80073f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f8a5 	bl	800753a <USBD_CtlError>
        break;
 80073f0:	e01a      	b.n	8007428 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	f043 0202 	orr.w	r2, r3, #2
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	330c      	adds	r3, #12
 8007412:	2202      	movs	r2, #2
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f900 	bl	800761c <USBD_CtlSendData>
      break;
 800741c:	e004      	b.n	8007428 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800741e:	6839      	ldr	r1, [r7, #0]
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f88a 	bl	800753a <USBD_CtlError>
      break;
 8007426:	bf00      	nop
  }
}
 8007428:	bf00      	nop
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	885b      	ldrh	r3, [r3, #2]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d107      	bne.n	8007452 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f000 f940 	bl	80076d0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007450:	e013      	b.n	800747a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	885b      	ldrh	r3, [r3, #2]
 8007456:	2b02      	cmp	r3, #2
 8007458:	d10b      	bne.n	8007472 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	889b      	ldrh	r3, [r3, #4]
 800745e:	0a1b      	lsrs	r3, r3, #8
 8007460:	b29b      	uxth	r3, r3
 8007462:	b2da      	uxtb	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 f930 	bl	80076d0 <USBD_CtlSendStatus>
}
 8007470:	e003      	b.n	800747a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f860 	bl	800753a <USBD_CtlError>
}
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007492:	b2db      	uxtb	r3, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	2b02      	cmp	r3, #2
 8007498:	d80b      	bhi.n	80074b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	885b      	ldrh	r3, [r3, #2]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d10c      	bne.n	80074bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f910 	bl	80076d0 <USBD_CtlSendStatus>
      }
      break;
 80074b0:	e004      	b.n	80074bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f840 	bl	800753a <USBD_CtlError>
      break;
 80074ba:	e000      	b.n	80074be <USBD_ClrFeature+0x3c>
      break;
 80074bc:	bf00      	nop
  }
}
 80074be:	bf00      	nop
 80074c0:	3708      	adds	r7, #8
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b084      	sub	sp, #16
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	781a      	ldrb	r2, [r3, #0]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	3301      	adds	r3, #1
 80074e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	781a      	ldrb	r2, [r3, #0]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7ff fa41 	bl	8006978 <SWAPBYTE>
 80074f6:	4603      	mov	r3, r0
 80074f8:	461a      	mov	r2, r3
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3301      	adds	r3, #1
 8007502:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3301      	adds	r3, #1
 8007508:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f7ff fa34 	bl	8006978 <SWAPBYTE>
 8007510:	4603      	mov	r3, r0
 8007512:	461a      	mov	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	3301      	adds	r3, #1
 800751c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3301      	adds	r3, #1
 8007522:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f7ff fa27 	bl	8006978 <SWAPBYTE>
 800752a:	4603      	mov	r3, r0
 800752c:	461a      	mov	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	80da      	strh	r2, [r3, #6]
}
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b082      	sub	sp, #8
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
 8007542:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007544:	2180      	movs	r1, #128	; 0x80
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fcd6 	bl	8007ef8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800754c:	2100      	movs	r1, #0
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fcd2 	bl	8007ef8 <USBD_LL_StallEP>
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007568:	2300      	movs	r3, #0
 800756a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d036      	beq.n	80075e0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007576:	6938      	ldr	r0, [r7, #16]
 8007578:	f000 f836 	bl	80075e8 <USBD_GetLen>
 800757c:	4603      	mov	r3, r0
 800757e:	3301      	adds	r3, #1
 8007580:	b29b      	uxth	r3, r3
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	4413      	add	r3, r2
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	7812      	ldrb	r2, [r2, #0]
 8007594:	701a      	strb	r2, [r3, #0]
  idx++;
 8007596:	7dfb      	ldrb	r3, [r7, #23]
 8007598:	3301      	adds	r3, #1
 800759a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800759c:	7dfb      	ldrb	r3, [r7, #23]
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	4413      	add	r3, r2
 80075a2:	2203      	movs	r2, #3
 80075a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80075a6:	7dfb      	ldrb	r3, [r7, #23]
 80075a8:	3301      	adds	r3, #1
 80075aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80075ac:	e013      	b.n	80075d6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80075ae:	7dfb      	ldrb	r3, [r7, #23]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	4413      	add	r3, r2
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	7812      	ldrb	r2, [r2, #0]
 80075b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	3301      	adds	r3, #1
 80075be:	613b      	str	r3, [r7, #16]
    idx++;
 80075c0:	7dfb      	ldrb	r3, [r7, #23]
 80075c2:	3301      	adds	r3, #1
 80075c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	4413      	add	r3, r2
 80075cc:	2200      	movs	r2, #0
 80075ce:	701a      	strb	r2, [r3, #0]
    idx++;
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
 80075d2:	3301      	adds	r3, #1
 80075d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d1e7      	bne.n	80075ae <USBD_GetString+0x52>
 80075de:	e000      	b.n	80075e2 <USBD_GetString+0x86>
    return;
 80075e0:	bf00      	nop
  }
}
 80075e2:	3718      	adds	r7, #24
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}

080075e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80075f8:	e005      	b.n	8007606 <USBD_GetLen+0x1e>
  {
    len++;
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	3301      	adds	r3, #1
 80075fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	3301      	adds	r3, #1
 8007604:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1f5      	bne.n	80075fa <USBD_GetLen+0x12>
  }

  return len;
 800760e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3714      	adds	r7, #20
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2202      	movs	r2, #2
 800762c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	2100      	movs	r1, #0
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 fce1 	bl	800800a <USBD_LL_Transmit>

  return USBD_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	60f8      	str	r0, [r7, #12]
 800765a:	60b9      	str	r1, [r7, #8]
 800765c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68ba      	ldr	r2, [r7, #8]
 8007662:	2100      	movs	r1, #0
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 fcd0 	bl	800800a <USBD_LL_Transmit>

  return USBD_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	60f8      	str	r0, [r7, #12]
 800767c:	60b9      	str	r1, [r7, #8]
 800767e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2203      	movs	r2, #3
 8007684:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	2100      	movs	r1, #0
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f000 fcd4 	bl	800804c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076a4:	2300      	movs	r3, #0
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	2100      	movs	r1, #0
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 fcc3 	bl	800804c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2204      	movs	r2, #4
 80076dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076e0:	2300      	movs	r3, #0
 80076e2:	2200      	movs	r2, #0
 80076e4:	2100      	movs	r1, #0
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 fc8f 	bl	800800a <USBD_LL_Transmit>

  return USBD_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2205      	movs	r2, #5
 8007702:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007706:	2300      	movs	r3, #0
 8007708:	2200      	movs	r2, #0
 800770a:	2100      	movs	r1, #0
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fc9d 	bl	800804c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007712:	2300      	movs	r3, #0
}
 8007714:	4618      	mov	r0, r3
 8007716:	3708      	adds	r7, #8
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007720:	2200      	movs	r2, #0
 8007722:	4912      	ldr	r1, [pc, #72]	; (800776c <MX_USB_DEVICE_Init+0x50>)
 8007724:	4812      	ldr	r0, [pc, #72]	; (8007770 <MX_USB_DEVICE_Init+0x54>)
 8007726:	f7fe fd07 	bl	8006138 <USBD_Init>
 800772a:	4603      	mov	r3, r0
 800772c:	2b00      	cmp	r3, #0
 800772e:	d001      	beq.n	8007734 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007730:	f7f9 f97b 	bl	8000a2a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007734:	490f      	ldr	r1, [pc, #60]	; (8007774 <MX_USB_DEVICE_Init+0x58>)
 8007736:	480e      	ldr	r0, [pc, #56]	; (8007770 <MX_USB_DEVICE_Init+0x54>)
 8007738:	f7fe fd2e 	bl	8006198 <USBD_RegisterClass>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d001      	beq.n	8007746 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007742:	f7f9 f972 	bl	8000a2a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007746:	490c      	ldr	r1, [pc, #48]	; (8007778 <MX_USB_DEVICE_Init+0x5c>)
 8007748:	4809      	ldr	r0, [pc, #36]	; (8007770 <MX_USB_DEVICE_Init+0x54>)
 800774a:	f7fe fc1f 	bl	8005f8c <USBD_CDC_RegisterInterface>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007754:	f7f9 f969 	bl	8000a2a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007758:	4805      	ldr	r0, [pc, #20]	; (8007770 <MX_USB_DEVICE_Init+0x54>)
 800775a:	f7fe fd53 	bl	8006204 <USBD_Start>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007764:	f7f9 f961 	bl	8000a2a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007768:	bf00      	nop
 800776a:	bd80      	pop	{r7, pc}
 800776c:	200000ac 	.word	0x200000ac
 8007770:	200002f8 	.word	0x200002f8
 8007774:	20000018 	.word	0x20000018
 8007778:	20000098 	.word	0x20000098

0800777c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007780:	2200      	movs	r2, #0
 8007782:	4905      	ldr	r1, [pc, #20]	; (8007798 <CDC_Init_FS+0x1c>)
 8007784:	4805      	ldr	r0, [pc, #20]	; (800779c <CDC_Init_FS+0x20>)
 8007786:	f7fe fc1b 	bl	8005fc0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800778a:	4905      	ldr	r1, [pc, #20]	; (80077a0 <CDC_Init_FS+0x24>)
 800778c:	4803      	ldr	r0, [pc, #12]	; (800779c <CDC_Init_FS+0x20>)
 800778e:	f7fe fc39 	bl	8006004 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007792:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007794:	4618      	mov	r0, r3
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20000dd4 	.word	0x20000dd4
 800779c:	200002f8 	.word	0x200002f8
 80077a0:	200005d4 	.word	0x200005d4

080077a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80077a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	4603      	mov	r3, r0
 80077bc:	6039      	str	r1, [r7, #0]
 80077be:	71fb      	strb	r3, [r7, #7]
 80077c0:	4613      	mov	r3, r2
 80077c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80077c4:	79fb      	ldrb	r3, [r7, #7]
 80077c6:	2b23      	cmp	r3, #35	; 0x23
 80077c8:	d84a      	bhi.n	8007860 <CDC_Control_FS+0xac>
 80077ca:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <CDC_Control_FS+0x1c>)
 80077cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d0:	08007861 	.word	0x08007861
 80077d4:	08007861 	.word	0x08007861
 80077d8:	08007861 	.word	0x08007861
 80077dc:	08007861 	.word	0x08007861
 80077e0:	08007861 	.word	0x08007861
 80077e4:	08007861 	.word	0x08007861
 80077e8:	08007861 	.word	0x08007861
 80077ec:	08007861 	.word	0x08007861
 80077f0:	08007861 	.word	0x08007861
 80077f4:	08007861 	.word	0x08007861
 80077f8:	08007861 	.word	0x08007861
 80077fc:	08007861 	.word	0x08007861
 8007800:	08007861 	.word	0x08007861
 8007804:	08007861 	.word	0x08007861
 8007808:	08007861 	.word	0x08007861
 800780c:	08007861 	.word	0x08007861
 8007810:	08007861 	.word	0x08007861
 8007814:	08007861 	.word	0x08007861
 8007818:	08007861 	.word	0x08007861
 800781c:	08007861 	.word	0x08007861
 8007820:	08007861 	.word	0x08007861
 8007824:	08007861 	.word	0x08007861
 8007828:	08007861 	.word	0x08007861
 800782c:	08007861 	.word	0x08007861
 8007830:	08007861 	.word	0x08007861
 8007834:	08007861 	.word	0x08007861
 8007838:	08007861 	.word	0x08007861
 800783c:	08007861 	.word	0x08007861
 8007840:	08007861 	.word	0x08007861
 8007844:	08007861 	.word	0x08007861
 8007848:	08007861 	.word	0x08007861
 800784c:	08007861 	.word	0x08007861
 8007850:	08007861 	.word	0x08007861
 8007854:	08007861 	.word	0x08007861
 8007858:	08007861 	.word	0x08007861
 800785c:	08007861 	.word	0x08007861
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007860:	bf00      	nop
  }

  return (USBD_OK);
 8007862:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007864:	4618      	mov	r0, r3
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	4805      	ldr	r0, [pc, #20]	; (8007894 <CDC_Receive_FS+0x24>)
 800787e:	f7fe fbc1 	bl	8006004 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007882:	4804      	ldr	r0, [pc, #16]	; (8007894 <CDC_Receive_FS+0x24>)
 8007884:	f7fe fc22 	bl	80060cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007888:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800788a:	4618      	mov	r0, r3
 800788c:	3708      	adds	r7, #8
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	200002f8 	.word	0x200002f8

08007898 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80078a8:	4b0d      	ldr	r3, [pc, #52]	; (80078e0 <CDC_Transmit_FS+0x48>)
 80078aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d001      	beq.n	80078be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e00b      	b.n	80078d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80078be:	887b      	ldrh	r3, [r7, #2]
 80078c0:	461a      	mov	r2, r3
 80078c2:	6879      	ldr	r1, [r7, #4]
 80078c4:	4806      	ldr	r0, [pc, #24]	; (80078e0 <CDC_Transmit_FS+0x48>)
 80078c6:	f7fe fb7b 	bl	8005fc0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80078ca:	4805      	ldr	r0, [pc, #20]	; (80078e0 <CDC_Transmit_FS+0x48>)
 80078cc:	f7fe fbb8 	bl	8006040 <USBD_CDC_TransmitPacket>
 80078d0:	4603      	mov	r3, r0
 80078d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80078d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	200002f8 	.word	0x200002f8

080078e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	4613      	mov	r3, r2
 80078f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80078f2:	2300      	movs	r3, #0
 80078f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80078f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	371c      	adds	r7, #28
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
	...

08007908 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	6039      	str	r1, [r7, #0]
 8007912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	2212      	movs	r2, #18
 8007918:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800791a:	4b03      	ldr	r3, [pc, #12]	; (8007928 <USBD_FS_DeviceDescriptor+0x20>)
}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	200000c8 	.word	0x200000c8

0800792c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	4603      	mov	r3, r0
 8007934:	6039      	str	r1, [r7, #0]
 8007936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2204      	movs	r2, #4
 800793c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800793e:	4b03      	ldr	r3, [pc, #12]	; (800794c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007940:	4618      	mov	r0, r3
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr
 800794c:	200000dc 	.word	0x200000dc

08007950 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	4603      	mov	r3, r0
 8007958:	6039      	str	r1, [r7, #0]
 800795a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800795c:	79fb      	ldrb	r3, [r7, #7]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	4907      	ldr	r1, [pc, #28]	; (8007984 <USBD_FS_ProductStrDescriptor+0x34>)
 8007966:	4808      	ldr	r0, [pc, #32]	; (8007988 <USBD_FS_ProductStrDescriptor+0x38>)
 8007968:	f7ff fdf8 	bl	800755c <USBD_GetString>
 800796c:	e004      	b.n	8007978 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	4904      	ldr	r1, [pc, #16]	; (8007984 <USBD_FS_ProductStrDescriptor+0x34>)
 8007972:	4805      	ldr	r0, [pc, #20]	; (8007988 <USBD_FS_ProductStrDescriptor+0x38>)
 8007974:	f7ff fdf2 	bl	800755c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007978:	4b02      	ldr	r3, [pc, #8]	; (8007984 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	200015d4 	.word	0x200015d4
 8007988:	08009128 	.word	0x08009128

0800798c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	4603      	mov	r3, r0
 8007994:	6039      	str	r1, [r7, #0]
 8007996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	4904      	ldr	r1, [pc, #16]	; (80079ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800799c:	4804      	ldr	r0, [pc, #16]	; (80079b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800799e:	f7ff fddd 	bl	800755c <USBD_GetString>
  return USBD_StrDesc;
 80079a2:	4b02      	ldr	r3, [pc, #8]	; (80079ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	200015d4 	.word	0x200015d4
 80079b0:	08009140 	.word	0x08009140

080079b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	4603      	mov	r3, r0
 80079bc:	6039      	str	r1, [r7, #0]
 80079be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	221a      	movs	r2, #26
 80079c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079c6:	f000 f843 	bl	8007a50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079ca:	4b02      	ldr	r3, [pc, #8]	; (80079d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	200000e0 	.word	0x200000e0

080079d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	4603      	mov	r3, r0
 80079e0:	6039      	str	r1, [r7, #0]
 80079e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079e4:	79fb      	ldrb	r3, [r7, #7]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d105      	bne.n	80079f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	4907      	ldr	r1, [pc, #28]	; (8007a0c <USBD_FS_ConfigStrDescriptor+0x34>)
 80079ee:	4808      	ldr	r0, [pc, #32]	; (8007a10 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079f0:	f7ff fdb4 	bl	800755c <USBD_GetString>
 80079f4:	e004      	b.n	8007a00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079f6:	683a      	ldr	r2, [r7, #0]
 80079f8:	4904      	ldr	r1, [pc, #16]	; (8007a0c <USBD_FS_ConfigStrDescriptor+0x34>)
 80079fa:	4805      	ldr	r0, [pc, #20]	; (8007a10 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079fc:	f7ff fdae 	bl	800755c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a00:	4b02      	ldr	r3, [pc, #8]	; (8007a0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	200015d4 	.word	0x200015d4
 8007a10:	08009154 	.word	0x08009154

08007a14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	6039      	str	r1, [r7, #0]
 8007a1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a20:	79fb      	ldrb	r3, [r7, #7]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d105      	bne.n	8007a32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a26:	683a      	ldr	r2, [r7, #0]
 8007a28:	4907      	ldr	r1, [pc, #28]	; (8007a48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a2a:	4808      	ldr	r0, [pc, #32]	; (8007a4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a2c:	f7ff fd96 	bl	800755c <USBD_GetString>
 8007a30:	e004      	b.n	8007a3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4904      	ldr	r1, [pc, #16]	; (8007a48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a36:	4805      	ldr	r0, [pc, #20]	; (8007a4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a38:	f7ff fd90 	bl	800755c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a3c:	4b02      	ldr	r3, [pc, #8]	; (8007a48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a3e:	4618      	mov	r0, r3
 8007a40:	3708      	adds	r7, #8
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	200015d4 	.word	0x200015d4
 8007a4c:	08009160 	.word	0x08009160

08007a50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a56:	4b0f      	ldr	r3, [pc, #60]	; (8007a94 <Get_SerialNum+0x44>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a5c:	4b0e      	ldr	r3, [pc, #56]	; (8007a98 <Get_SerialNum+0x48>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a62:	4b0e      	ldr	r3, [pc, #56]	; (8007a9c <Get_SerialNum+0x4c>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d009      	beq.n	8007a8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a76:	2208      	movs	r2, #8
 8007a78:	4909      	ldr	r1, [pc, #36]	; (8007aa0 <Get_SerialNum+0x50>)
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f814 	bl	8007aa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a80:	2204      	movs	r2, #4
 8007a82:	4908      	ldr	r1, [pc, #32]	; (8007aa4 <Get_SerialNum+0x54>)
 8007a84:	68b8      	ldr	r0, [r7, #8]
 8007a86:	f000 f80f 	bl	8007aa8 <IntToUnicode>
  }
}
 8007a8a:	bf00      	nop
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	1fff7a10 	.word	0x1fff7a10
 8007a98:	1fff7a14 	.word	0x1fff7a14
 8007a9c:	1fff7a18 	.word	0x1fff7a18
 8007aa0:	200000e2 	.word	0x200000e2
 8007aa4:	200000f2 	.word	0x200000f2

08007aa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b087      	sub	sp, #28
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	60b9      	str	r1, [r7, #8]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007aba:	2300      	movs	r3, #0
 8007abc:	75fb      	strb	r3, [r7, #23]
 8007abe:	e027      	b.n	8007b10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	0f1b      	lsrs	r3, r3, #28
 8007ac4:	2b09      	cmp	r3, #9
 8007ac6:	d80b      	bhi.n	8007ae0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	0f1b      	lsrs	r3, r3, #28
 8007acc:	b2da      	uxtb	r2, r3
 8007ace:	7dfb      	ldrb	r3, [r7, #23]
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	440b      	add	r3, r1
 8007ad8:	3230      	adds	r2, #48	; 0x30
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	701a      	strb	r2, [r3, #0]
 8007ade:	e00a      	b.n	8007af6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	0f1b      	lsrs	r3, r3, #28
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	4619      	mov	r1, r3
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	440b      	add	r3, r1
 8007af0:	3237      	adds	r2, #55	; 0x37
 8007af2:	b2d2      	uxtb	r2, r2
 8007af4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	011b      	lsls	r3, r3, #4
 8007afa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	3301      	adds	r3, #1
 8007b02:	68ba      	ldr	r2, [r7, #8]
 8007b04:	4413      	add	r3, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b0a:	7dfb      	ldrb	r3, [r7, #23]
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	75fb      	strb	r3, [r7, #23]
 8007b10:	7dfa      	ldrb	r2, [r7, #23]
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	429a      	cmp	r2, r3
 8007b16:	d3d3      	bcc.n	8007ac0 <IntToUnicode+0x18>
  }
}
 8007b18:	bf00      	nop
 8007b1a:	bf00      	nop
 8007b1c:	371c      	adds	r7, #28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
	...

08007b28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08a      	sub	sp, #40	; 0x28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
 8007b38:	605a      	str	r2, [r3, #4]
 8007b3a:	609a      	str	r2, [r3, #8]
 8007b3c:	60da      	str	r2, [r3, #12]
 8007b3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b48:	d13a      	bne.n	8007bc0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	613b      	str	r3, [r7, #16]
 8007b4e:	4b1e      	ldr	r3, [pc, #120]	; (8007bc8 <HAL_PCD_MspInit+0xa0>)
 8007b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b52:	4a1d      	ldr	r2, [pc, #116]	; (8007bc8 <HAL_PCD_MspInit+0xa0>)
 8007b54:	f043 0301 	orr.w	r3, r3, #1
 8007b58:	6313      	str	r3, [r2, #48]	; 0x30
 8007b5a:	4b1b      	ldr	r3, [pc, #108]	; (8007bc8 <HAL_PCD_MspInit+0xa0>)
 8007b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	613b      	str	r3, [r7, #16]
 8007b64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b66:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b70:	2300      	movs	r3, #0
 8007b72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b74:	2303      	movs	r3, #3
 8007b76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b78:	230a      	movs	r3, #10
 8007b7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b7c:	f107 0314 	add.w	r3, r7, #20
 8007b80:	4619      	mov	r1, r3
 8007b82:	4812      	ldr	r0, [pc, #72]	; (8007bcc <HAL_PCD_MspInit+0xa4>)
 8007b84:	f7f9 fe36 	bl	80017f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b88:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <HAL_PCD_MspInit+0xa0>)
 8007b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8c:	4a0e      	ldr	r2, [pc, #56]	; (8007bc8 <HAL_PCD_MspInit+0xa0>)
 8007b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b92:	6353      	str	r3, [r2, #52]	; 0x34
 8007b94:	2300      	movs	r3, #0
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	4b0b      	ldr	r3, [pc, #44]	; (8007bc8 <HAL_PCD_MspInit+0xa0>)
 8007b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9c:	4a0a      	ldr	r2, [pc, #40]	; (8007bc8 <HAL_PCD_MspInit+0xa0>)
 8007b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ba2:	6453      	str	r3, [r2, #68]	; 0x44
 8007ba4:	4b08      	ldr	r3, [pc, #32]	; (8007bc8 <HAL_PCD_MspInit+0xa0>)
 8007ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bac:	60fb      	str	r3, [r7, #12]
 8007bae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	2043      	movs	r0, #67	; 0x43
 8007bb6:	f7f9 fafc 	bl	80011b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007bba:	2043      	movs	r0, #67	; 0x43
 8007bbc:	f7f9 fb15 	bl	80011ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bc0:	bf00      	nop
 8007bc2:	3728      	adds	r7, #40	; 0x28
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40023800 	.word	0x40023800
 8007bcc:	40020000 	.word	0x40020000

08007bd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007be4:	4619      	mov	r1, r3
 8007be6:	4610      	mov	r0, r2
 8007be8:	f7fe fb59 	bl	800629e <USBD_LL_SetupStage>
}
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c06:	78fa      	ldrb	r2, [r7, #3]
 8007c08:	6879      	ldr	r1, [r7, #4]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	00db      	lsls	r3, r3, #3
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	440b      	add	r3, r1
 8007c14:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	78fb      	ldrb	r3, [r7, #3]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	f7fe fb93 	bl	8006348 <USBD_LL_DataOutStage>
}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	460b      	mov	r3, r1
 8007c34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c3c:	78fa      	ldrb	r2, [r7, #3]
 8007c3e:	6879      	ldr	r1, [r7, #4]
 8007c40:	4613      	mov	r3, r2
 8007c42:	00db      	lsls	r3, r3, #3
 8007c44:	4413      	add	r3, r2
 8007c46:	009b      	lsls	r3, r3, #2
 8007c48:	440b      	add	r3, r1
 8007c4a:	334c      	adds	r3, #76	; 0x4c
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	78fb      	ldrb	r3, [r7, #3]
 8007c50:	4619      	mov	r1, r3
 8007c52:	f7fe fc2c 	bl	80064ae <USBD_LL_DataInStage>
}
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe fd60 	bl	8006732 <USBD_LL_SOF>
}
 8007c72:	bf00      	nop
 8007c74:	3708      	adds	r7, #8
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c82:	2301      	movs	r3, #1
 8007c84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d001      	beq.n	8007c92 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c8e:	f7f8 fecc 	bl	8000a2a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c98:	7bfa      	ldrb	r2, [r7, #15]
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7fe fd0a 	bl	80066b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f7fe fcb2 	bl	8006612 <USBD_LL_Reset>
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fe fd05 	bl	80066d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	6812      	ldr	r2, [r2, #0]
 8007cda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cde:	f043 0301 	orr.w	r3, r3, #1
 8007ce2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a1b      	ldr	r3, [r3, #32]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d005      	beq.n	8007cf8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cec:	4b04      	ldr	r3, [pc, #16]	; (8007d00 <HAL_PCD_SuspendCallback+0x48>)
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	4a03      	ldr	r2, [pc, #12]	; (8007d00 <HAL_PCD_SuspendCallback+0x48>)
 8007cf2:	f043 0306 	orr.w	r3, r3, #6
 8007cf6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	e000ed00 	.word	0xe000ed00

08007d04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fe fcf5 	bl	8006702 <USBD_LL_Resume>
}
 8007d18:	bf00      	nop
 8007d1a:	3708      	adds	r7, #8
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	460b      	mov	r3, r1
 8007d2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d32:	78fa      	ldrb	r2, [r7, #3]
 8007d34:	4611      	mov	r1, r2
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe fd4d 	bl	80067d6 <USBD_LL_IsoOUTIncomplete>
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d56:	78fa      	ldrb	r2, [r7, #3]
 8007d58:	4611      	mov	r1, r2
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7fe fd09 	bl	8006772 <USBD_LL_IsoINIncomplete>
}
 8007d60:	bf00      	nop
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b082      	sub	sp, #8
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7fe fd5f 	bl	800683a <USBD_LL_DevConnected>
}
 8007d7c:	bf00      	nop
 8007d7e:	3708      	adds	r7, #8
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fe fd5c 	bl	8006850 <USBD_LL_DevDisconnected>
}
 8007d98:	bf00      	nop
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d13c      	bne.n	8007e2a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007db0:	4a20      	ldr	r2, [pc, #128]	; (8007e34 <USBD_LL_Init+0x94>)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a1e      	ldr	r2, [pc, #120]	; (8007e34 <USBD_LL_Init+0x94>)
 8007dbc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007dc0:	4b1c      	ldr	r3, [pc, #112]	; (8007e34 <USBD_LL_Init+0x94>)
 8007dc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007dc6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007dc8:	4b1a      	ldr	r3, [pc, #104]	; (8007e34 <USBD_LL_Init+0x94>)
 8007dca:	2204      	movs	r2, #4
 8007dcc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007dce:	4b19      	ldr	r3, [pc, #100]	; (8007e34 <USBD_LL_Init+0x94>)
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007dd4:	4b17      	ldr	r3, [pc, #92]	; (8007e34 <USBD_LL_Init+0x94>)
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007dda:	4b16      	ldr	r3, [pc, #88]	; (8007e34 <USBD_LL_Init+0x94>)
 8007ddc:	2202      	movs	r2, #2
 8007dde:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007de0:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <USBD_LL_Init+0x94>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007de6:	4b13      	ldr	r3, [pc, #76]	; (8007e34 <USBD_LL_Init+0x94>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007dec:	4b11      	ldr	r3, [pc, #68]	; (8007e34 <USBD_LL_Init+0x94>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007df2:	4b10      	ldr	r3, [pc, #64]	; (8007e34 <USBD_LL_Init+0x94>)
 8007df4:	2200      	movs	r2, #0
 8007df6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007df8:	4b0e      	ldr	r3, [pc, #56]	; (8007e34 <USBD_LL_Init+0x94>)
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007dfe:	480d      	ldr	r0, [pc, #52]	; (8007e34 <USBD_LL_Init+0x94>)
 8007e00:	f7f9 fed3 	bl	8001baa <HAL_PCD_Init>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007e0a:	f7f8 fe0e 	bl	8000a2a <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007e0e:	2180      	movs	r1, #128	; 0x80
 8007e10:	4808      	ldr	r0, [pc, #32]	; (8007e34 <USBD_LL_Init+0x94>)
 8007e12:	f7fb f92a 	bl	800306a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e16:	2240      	movs	r2, #64	; 0x40
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4806      	ldr	r0, [pc, #24]	; (8007e34 <USBD_LL_Init+0x94>)
 8007e1c:	f7fb f8de 	bl	8002fdc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e20:	2280      	movs	r2, #128	; 0x80
 8007e22:	2101      	movs	r1, #1
 8007e24:	4803      	ldr	r0, [pc, #12]	; (8007e34 <USBD_LL_Init+0x94>)
 8007e26:	f7fb f8d9 	bl	8002fdc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3708      	adds	r7, #8
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	200017d4 	.word	0x200017d4

08007e38 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7f9 ffc8 	bl	8001de4 <HAL_PCD_Start>
 8007e54:	4603      	mov	r3, r0
 8007e56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f000 f942 	bl	80080e4 <USBD_Get_USB_Status>
 8007e60:	4603      	mov	r3, r0
 8007e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}

08007e6e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e6e:	b580      	push	{r7, lr}
 8007e70:	b084      	sub	sp, #16
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
 8007e76:	4608      	mov	r0, r1
 8007e78:	4611      	mov	r1, r2
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	70fb      	strb	r3, [r7, #3]
 8007e80:	460b      	mov	r3, r1
 8007e82:	70bb      	strb	r3, [r7, #2]
 8007e84:	4613      	mov	r3, r2
 8007e86:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e96:	78bb      	ldrb	r3, [r7, #2]
 8007e98:	883a      	ldrh	r2, [r7, #0]
 8007e9a:	78f9      	ldrb	r1, [r7, #3]
 8007e9c:	f7fa fc99 	bl	80027d2 <HAL_PCD_EP_Open>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 f91c 	bl	80080e4 <USBD_Get_USB_Status>
 8007eac:	4603      	mov	r3, r0
 8007eae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ed4:	78fa      	ldrb	r2, [r7, #3]
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fa fce2 	bl	80028a2 <HAL_PCD_EP_Close>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 f8fd 	bl	80080e4 <USBD_Get_USB_Status>
 8007eea:	4603      	mov	r3, r0
 8007eec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eee:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3710      	adds	r7, #16
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f12:	78fa      	ldrb	r2, [r7, #3]
 8007f14:	4611      	mov	r1, r2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7fa fdba 	bl	8002a90 <HAL_PCD_EP_SetStall>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 f8de 	bl	80080e4 <USBD_Get_USB_Status>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b084      	sub	sp, #16
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	6078      	str	r0, [r7, #4]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f50:	78fa      	ldrb	r2, [r7, #3]
 8007f52:	4611      	mov	r1, r2
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fa fdff 	bl	8002b58 <HAL_PCD_EP_ClrStall>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 f8bf 	bl	80080e4 <USBD_Get_USB_Status>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f86:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	da0b      	bge.n	8007fa8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f90:	78fb      	ldrb	r3, [r7, #3]
 8007f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f96:	68f9      	ldr	r1, [r7, #12]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	4413      	add	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	440b      	add	r3, r1
 8007fa2:	333e      	adds	r3, #62	; 0x3e
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	e00b      	b.n	8007fc0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fae:	68f9      	ldr	r1, [r7, #12]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007fbe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fe6:	78fa      	ldrb	r2, [r7, #3]
 8007fe8:	4611      	mov	r1, r2
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fa fbcc 	bl	8002788 <HAL_PCD_SetAddress>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	f000 f874 	bl	80080e4 <USBD_Get_USB_Status>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008000:	7bbb      	ldrb	r3, [r7, #14]
}
 8008002:	4618      	mov	r0, r3
 8008004:	3710      	adds	r7, #16
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}

0800800a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800800a:	b580      	push	{r7, lr}
 800800c:	b086      	sub	sp, #24
 800800e:	af00      	add	r7, sp, #0
 8008010:	60f8      	str	r0, [r7, #12]
 8008012:	607a      	str	r2, [r7, #4]
 8008014:	603b      	str	r3, [r7, #0]
 8008016:	460b      	mov	r3, r1
 8008018:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800801a:	2300      	movs	r3, #0
 800801c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008028:	7af9      	ldrb	r1, [r7, #11]
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	f7fa fce5 	bl	80029fc <HAL_PCD_EP_Transmit>
 8008032:	4603      	mov	r3, r0
 8008034:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	4618      	mov	r0, r3
 800803a:	f000 f853 	bl	80080e4 <USBD_Get_USB_Status>
 800803e:	4603      	mov	r3, r0
 8008040:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008042:	7dbb      	ldrb	r3, [r7, #22]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	607a      	str	r2, [r7, #4]
 8008056:	603b      	str	r3, [r7, #0]
 8008058:	460b      	mov	r3, r1
 800805a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800805c:	2300      	movs	r3, #0
 800805e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800806a:	7af9      	ldrb	r1, [r7, #11]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	f7fa fc61 	bl	8002936 <HAL_PCD_EP_Receive>
 8008074:	4603      	mov	r3, r0
 8008076:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	4618      	mov	r0, r3
 800807c:	f000 f832 	bl	80080e4 <USBD_Get_USB_Status>
 8008080:	4603      	mov	r3, r0
 8008082:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008084:	7dbb      	ldrb	r3, [r7, #22]
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b082      	sub	sp, #8
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]
 8008096:	460b      	mov	r3, r1
 8008098:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080a0:	78fa      	ldrb	r2, [r7, #3]
 80080a2:	4611      	mov	r1, r2
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7fa fc91 	bl	80029cc <HAL_PCD_EP_GetRxCount>
 80080aa:	4603      	mov	r3, r0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080bc:	4b03      	ldr	r3, [pc, #12]	; (80080cc <USBD_static_malloc+0x18>)
}
 80080be:	4618      	mov	r0, r3
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20001ce0 	.word	0x20001ce0

080080d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]

}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	2b03      	cmp	r3, #3
 80080f6:	d817      	bhi.n	8008128 <USBD_Get_USB_Status+0x44>
 80080f8:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <USBD_Get_USB_Status+0x1c>)
 80080fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fe:	bf00      	nop
 8008100:	08008111 	.word	0x08008111
 8008104:	08008117 	.word	0x08008117
 8008108:	0800811d 	.word	0x0800811d
 800810c:	08008123 	.word	0x08008123
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	73fb      	strb	r3, [r7, #15]
    break;
 8008114:	e00b      	b.n	800812e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008116:	2303      	movs	r3, #3
 8008118:	73fb      	strb	r3, [r7, #15]
    break;
 800811a:	e008      	b.n	800812e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800811c:	2301      	movs	r3, #1
 800811e:	73fb      	strb	r3, [r7, #15]
    break;
 8008120:	e005      	b.n	800812e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008122:	2303      	movs	r3, #3
 8008124:	73fb      	strb	r3, [r7, #15]
    break;
 8008126:	e002      	b.n	800812e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008128:	2303      	movs	r3, #3
 800812a:	73fb      	strb	r3, [r7, #15]
    break;
 800812c:	bf00      	nop
  }
  return usb_status;
 800812e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr

0800813c <__errno>:
 800813c:	4b01      	ldr	r3, [pc, #4]	; (8008144 <__errno+0x8>)
 800813e:	6818      	ldr	r0, [r3, #0]
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	200000fc 	.word	0x200000fc

08008148 <__libc_init_array>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	4d0d      	ldr	r5, [pc, #52]	; (8008180 <__libc_init_array+0x38>)
 800814c:	4c0d      	ldr	r4, [pc, #52]	; (8008184 <__libc_init_array+0x3c>)
 800814e:	1b64      	subs	r4, r4, r5
 8008150:	10a4      	asrs	r4, r4, #2
 8008152:	2600      	movs	r6, #0
 8008154:	42a6      	cmp	r6, r4
 8008156:	d109      	bne.n	800816c <__libc_init_array+0x24>
 8008158:	4d0b      	ldr	r5, [pc, #44]	; (8008188 <__libc_init_array+0x40>)
 800815a:	4c0c      	ldr	r4, [pc, #48]	; (800818c <__libc_init_array+0x44>)
 800815c:	f000 ffae 	bl	80090bc <_init>
 8008160:	1b64      	subs	r4, r4, r5
 8008162:	10a4      	asrs	r4, r4, #2
 8008164:	2600      	movs	r6, #0
 8008166:	42a6      	cmp	r6, r4
 8008168:	d105      	bne.n	8008176 <__libc_init_array+0x2e>
 800816a:	bd70      	pop	{r4, r5, r6, pc}
 800816c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008170:	4798      	blx	r3
 8008172:	3601      	adds	r6, #1
 8008174:	e7ee      	b.n	8008154 <__libc_init_array+0xc>
 8008176:	f855 3b04 	ldr.w	r3, [r5], #4
 800817a:	4798      	blx	r3
 800817c:	3601      	adds	r6, #1
 800817e:	e7f2      	b.n	8008166 <__libc_init_array+0x1e>
 8008180:	08009228 	.word	0x08009228
 8008184:	08009228 	.word	0x08009228
 8008188:	08009228 	.word	0x08009228
 800818c:	0800922c 	.word	0x0800922c

08008190 <memset>:
 8008190:	4402      	add	r2, r0
 8008192:	4603      	mov	r3, r0
 8008194:	4293      	cmp	r3, r2
 8008196:	d100      	bne.n	800819a <memset+0xa>
 8008198:	4770      	bx	lr
 800819a:	f803 1b01 	strb.w	r1, [r3], #1
 800819e:	e7f9      	b.n	8008194 <memset+0x4>

080081a0 <iprintf>:
 80081a0:	b40f      	push	{r0, r1, r2, r3}
 80081a2:	4b0a      	ldr	r3, [pc, #40]	; (80081cc <iprintf+0x2c>)
 80081a4:	b513      	push	{r0, r1, r4, lr}
 80081a6:	681c      	ldr	r4, [r3, #0]
 80081a8:	b124      	cbz	r4, 80081b4 <iprintf+0x14>
 80081aa:	69a3      	ldr	r3, [r4, #24]
 80081ac:	b913      	cbnz	r3, 80081b4 <iprintf+0x14>
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 f866 	bl	8008280 <__sinit>
 80081b4:	ab05      	add	r3, sp, #20
 80081b6:	9a04      	ldr	r2, [sp, #16]
 80081b8:	68a1      	ldr	r1, [r4, #8]
 80081ba:	9301      	str	r3, [sp, #4]
 80081bc:	4620      	mov	r0, r4
 80081be:	f000 f9bd 	bl	800853c <_vfiprintf_r>
 80081c2:	b002      	add	sp, #8
 80081c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c8:	b004      	add	sp, #16
 80081ca:	4770      	bx	lr
 80081cc:	200000fc 	.word	0x200000fc

080081d0 <std>:
 80081d0:	2300      	movs	r3, #0
 80081d2:	b510      	push	{r4, lr}
 80081d4:	4604      	mov	r4, r0
 80081d6:	e9c0 3300 	strd	r3, r3, [r0]
 80081da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081de:	6083      	str	r3, [r0, #8]
 80081e0:	8181      	strh	r1, [r0, #12]
 80081e2:	6643      	str	r3, [r0, #100]	; 0x64
 80081e4:	81c2      	strh	r2, [r0, #14]
 80081e6:	6183      	str	r3, [r0, #24]
 80081e8:	4619      	mov	r1, r3
 80081ea:	2208      	movs	r2, #8
 80081ec:	305c      	adds	r0, #92	; 0x5c
 80081ee:	f7ff ffcf 	bl	8008190 <memset>
 80081f2:	4b05      	ldr	r3, [pc, #20]	; (8008208 <std+0x38>)
 80081f4:	6263      	str	r3, [r4, #36]	; 0x24
 80081f6:	4b05      	ldr	r3, [pc, #20]	; (800820c <std+0x3c>)
 80081f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80081fa:	4b05      	ldr	r3, [pc, #20]	; (8008210 <std+0x40>)
 80081fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081fe:	4b05      	ldr	r3, [pc, #20]	; (8008214 <std+0x44>)
 8008200:	6224      	str	r4, [r4, #32]
 8008202:	6323      	str	r3, [r4, #48]	; 0x30
 8008204:	bd10      	pop	{r4, pc}
 8008206:	bf00      	nop
 8008208:	08008ae5 	.word	0x08008ae5
 800820c:	08008b07 	.word	0x08008b07
 8008210:	08008b3f 	.word	0x08008b3f
 8008214:	08008b63 	.word	0x08008b63

08008218 <_cleanup_r>:
 8008218:	4901      	ldr	r1, [pc, #4]	; (8008220 <_cleanup_r+0x8>)
 800821a:	f000 b8af 	b.w	800837c <_fwalk_reent>
 800821e:	bf00      	nop
 8008220:	08008e3d 	.word	0x08008e3d

08008224 <__sfmoreglue>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	2268      	movs	r2, #104	; 0x68
 8008228:	1e4d      	subs	r5, r1, #1
 800822a:	4355      	muls	r5, r2
 800822c:	460e      	mov	r6, r1
 800822e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008232:	f000 f8e5 	bl	8008400 <_malloc_r>
 8008236:	4604      	mov	r4, r0
 8008238:	b140      	cbz	r0, 800824c <__sfmoreglue+0x28>
 800823a:	2100      	movs	r1, #0
 800823c:	e9c0 1600 	strd	r1, r6, [r0]
 8008240:	300c      	adds	r0, #12
 8008242:	60a0      	str	r0, [r4, #8]
 8008244:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008248:	f7ff ffa2 	bl	8008190 <memset>
 800824c:	4620      	mov	r0, r4
 800824e:	bd70      	pop	{r4, r5, r6, pc}

08008250 <__sfp_lock_acquire>:
 8008250:	4801      	ldr	r0, [pc, #4]	; (8008258 <__sfp_lock_acquire+0x8>)
 8008252:	f000 b8b3 	b.w	80083bc <__retarget_lock_acquire_recursive>
 8008256:	bf00      	nop
 8008258:	20001f01 	.word	0x20001f01

0800825c <__sfp_lock_release>:
 800825c:	4801      	ldr	r0, [pc, #4]	; (8008264 <__sfp_lock_release+0x8>)
 800825e:	f000 b8ae 	b.w	80083be <__retarget_lock_release_recursive>
 8008262:	bf00      	nop
 8008264:	20001f01 	.word	0x20001f01

08008268 <__sinit_lock_acquire>:
 8008268:	4801      	ldr	r0, [pc, #4]	; (8008270 <__sinit_lock_acquire+0x8>)
 800826a:	f000 b8a7 	b.w	80083bc <__retarget_lock_acquire_recursive>
 800826e:	bf00      	nop
 8008270:	20001f02 	.word	0x20001f02

08008274 <__sinit_lock_release>:
 8008274:	4801      	ldr	r0, [pc, #4]	; (800827c <__sinit_lock_release+0x8>)
 8008276:	f000 b8a2 	b.w	80083be <__retarget_lock_release_recursive>
 800827a:	bf00      	nop
 800827c:	20001f02 	.word	0x20001f02

08008280 <__sinit>:
 8008280:	b510      	push	{r4, lr}
 8008282:	4604      	mov	r4, r0
 8008284:	f7ff fff0 	bl	8008268 <__sinit_lock_acquire>
 8008288:	69a3      	ldr	r3, [r4, #24]
 800828a:	b11b      	cbz	r3, 8008294 <__sinit+0x14>
 800828c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008290:	f7ff bff0 	b.w	8008274 <__sinit_lock_release>
 8008294:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008298:	6523      	str	r3, [r4, #80]	; 0x50
 800829a:	4b13      	ldr	r3, [pc, #76]	; (80082e8 <__sinit+0x68>)
 800829c:	4a13      	ldr	r2, [pc, #76]	; (80082ec <__sinit+0x6c>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80082a2:	42a3      	cmp	r3, r4
 80082a4:	bf04      	itt	eq
 80082a6:	2301      	moveq	r3, #1
 80082a8:	61a3      	streq	r3, [r4, #24]
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 f820 	bl	80082f0 <__sfp>
 80082b0:	6060      	str	r0, [r4, #4]
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 f81c 	bl	80082f0 <__sfp>
 80082b8:	60a0      	str	r0, [r4, #8]
 80082ba:	4620      	mov	r0, r4
 80082bc:	f000 f818 	bl	80082f0 <__sfp>
 80082c0:	2200      	movs	r2, #0
 80082c2:	60e0      	str	r0, [r4, #12]
 80082c4:	2104      	movs	r1, #4
 80082c6:	6860      	ldr	r0, [r4, #4]
 80082c8:	f7ff ff82 	bl	80081d0 <std>
 80082cc:	68a0      	ldr	r0, [r4, #8]
 80082ce:	2201      	movs	r2, #1
 80082d0:	2109      	movs	r1, #9
 80082d2:	f7ff ff7d 	bl	80081d0 <std>
 80082d6:	68e0      	ldr	r0, [r4, #12]
 80082d8:	2202      	movs	r2, #2
 80082da:	2112      	movs	r1, #18
 80082dc:	f7ff ff78 	bl	80081d0 <std>
 80082e0:	2301      	movs	r3, #1
 80082e2:	61a3      	str	r3, [r4, #24]
 80082e4:	e7d2      	b.n	800828c <__sinit+0xc>
 80082e6:	bf00      	nop
 80082e8:	08009188 	.word	0x08009188
 80082ec:	08008219 	.word	0x08008219

080082f0 <__sfp>:
 80082f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f2:	4607      	mov	r7, r0
 80082f4:	f7ff ffac 	bl	8008250 <__sfp_lock_acquire>
 80082f8:	4b1e      	ldr	r3, [pc, #120]	; (8008374 <__sfp+0x84>)
 80082fa:	681e      	ldr	r6, [r3, #0]
 80082fc:	69b3      	ldr	r3, [r6, #24]
 80082fe:	b913      	cbnz	r3, 8008306 <__sfp+0x16>
 8008300:	4630      	mov	r0, r6
 8008302:	f7ff ffbd 	bl	8008280 <__sinit>
 8008306:	3648      	adds	r6, #72	; 0x48
 8008308:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800830c:	3b01      	subs	r3, #1
 800830e:	d503      	bpl.n	8008318 <__sfp+0x28>
 8008310:	6833      	ldr	r3, [r6, #0]
 8008312:	b30b      	cbz	r3, 8008358 <__sfp+0x68>
 8008314:	6836      	ldr	r6, [r6, #0]
 8008316:	e7f7      	b.n	8008308 <__sfp+0x18>
 8008318:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800831c:	b9d5      	cbnz	r5, 8008354 <__sfp+0x64>
 800831e:	4b16      	ldr	r3, [pc, #88]	; (8008378 <__sfp+0x88>)
 8008320:	60e3      	str	r3, [r4, #12]
 8008322:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008326:	6665      	str	r5, [r4, #100]	; 0x64
 8008328:	f000 f847 	bl	80083ba <__retarget_lock_init_recursive>
 800832c:	f7ff ff96 	bl	800825c <__sfp_lock_release>
 8008330:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008334:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008338:	6025      	str	r5, [r4, #0]
 800833a:	61a5      	str	r5, [r4, #24]
 800833c:	2208      	movs	r2, #8
 800833e:	4629      	mov	r1, r5
 8008340:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008344:	f7ff ff24 	bl	8008190 <memset>
 8008348:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800834c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008350:	4620      	mov	r0, r4
 8008352:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008354:	3468      	adds	r4, #104	; 0x68
 8008356:	e7d9      	b.n	800830c <__sfp+0x1c>
 8008358:	2104      	movs	r1, #4
 800835a:	4638      	mov	r0, r7
 800835c:	f7ff ff62 	bl	8008224 <__sfmoreglue>
 8008360:	4604      	mov	r4, r0
 8008362:	6030      	str	r0, [r6, #0]
 8008364:	2800      	cmp	r0, #0
 8008366:	d1d5      	bne.n	8008314 <__sfp+0x24>
 8008368:	f7ff ff78 	bl	800825c <__sfp_lock_release>
 800836c:	230c      	movs	r3, #12
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	e7ee      	b.n	8008350 <__sfp+0x60>
 8008372:	bf00      	nop
 8008374:	08009188 	.word	0x08009188
 8008378:	ffff0001 	.word	0xffff0001

0800837c <_fwalk_reent>:
 800837c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008380:	4606      	mov	r6, r0
 8008382:	4688      	mov	r8, r1
 8008384:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008388:	2700      	movs	r7, #0
 800838a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800838e:	f1b9 0901 	subs.w	r9, r9, #1
 8008392:	d505      	bpl.n	80083a0 <_fwalk_reent+0x24>
 8008394:	6824      	ldr	r4, [r4, #0]
 8008396:	2c00      	cmp	r4, #0
 8008398:	d1f7      	bne.n	800838a <_fwalk_reent+0xe>
 800839a:	4638      	mov	r0, r7
 800839c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083a0:	89ab      	ldrh	r3, [r5, #12]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d907      	bls.n	80083b6 <_fwalk_reent+0x3a>
 80083a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80083aa:	3301      	adds	r3, #1
 80083ac:	d003      	beq.n	80083b6 <_fwalk_reent+0x3a>
 80083ae:	4629      	mov	r1, r5
 80083b0:	4630      	mov	r0, r6
 80083b2:	47c0      	blx	r8
 80083b4:	4307      	orrs	r7, r0
 80083b6:	3568      	adds	r5, #104	; 0x68
 80083b8:	e7e9      	b.n	800838e <_fwalk_reent+0x12>

080083ba <__retarget_lock_init_recursive>:
 80083ba:	4770      	bx	lr

080083bc <__retarget_lock_acquire_recursive>:
 80083bc:	4770      	bx	lr

080083be <__retarget_lock_release_recursive>:
 80083be:	4770      	bx	lr

080083c0 <sbrk_aligned>:
 80083c0:	b570      	push	{r4, r5, r6, lr}
 80083c2:	4e0e      	ldr	r6, [pc, #56]	; (80083fc <sbrk_aligned+0x3c>)
 80083c4:	460c      	mov	r4, r1
 80083c6:	6831      	ldr	r1, [r6, #0]
 80083c8:	4605      	mov	r5, r0
 80083ca:	b911      	cbnz	r1, 80083d2 <sbrk_aligned+0x12>
 80083cc:	f000 fb7a 	bl	8008ac4 <_sbrk_r>
 80083d0:	6030      	str	r0, [r6, #0]
 80083d2:	4621      	mov	r1, r4
 80083d4:	4628      	mov	r0, r5
 80083d6:	f000 fb75 	bl	8008ac4 <_sbrk_r>
 80083da:	1c43      	adds	r3, r0, #1
 80083dc:	d00a      	beq.n	80083f4 <sbrk_aligned+0x34>
 80083de:	1cc4      	adds	r4, r0, #3
 80083e0:	f024 0403 	bic.w	r4, r4, #3
 80083e4:	42a0      	cmp	r0, r4
 80083e6:	d007      	beq.n	80083f8 <sbrk_aligned+0x38>
 80083e8:	1a21      	subs	r1, r4, r0
 80083ea:	4628      	mov	r0, r5
 80083ec:	f000 fb6a 	bl	8008ac4 <_sbrk_r>
 80083f0:	3001      	adds	r0, #1
 80083f2:	d101      	bne.n	80083f8 <sbrk_aligned+0x38>
 80083f4:	f04f 34ff 	mov.w	r4, #4294967295
 80083f8:	4620      	mov	r0, r4
 80083fa:	bd70      	pop	{r4, r5, r6, pc}
 80083fc:	20001f08 	.word	0x20001f08

08008400 <_malloc_r>:
 8008400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008404:	1ccd      	adds	r5, r1, #3
 8008406:	f025 0503 	bic.w	r5, r5, #3
 800840a:	3508      	adds	r5, #8
 800840c:	2d0c      	cmp	r5, #12
 800840e:	bf38      	it	cc
 8008410:	250c      	movcc	r5, #12
 8008412:	2d00      	cmp	r5, #0
 8008414:	4607      	mov	r7, r0
 8008416:	db01      	blt.n	800841c <_malloc_r+0x1c>
 8008418:	42a9      	cmp	r1, r5
 800841a:	d905      	bls.n	8008428 <_malloc_r+0x28>
 800841c:	230c      	movs	r3, #12
 800841e:	603b      	str	r3, [r7, #0]
 8008420:	2600      	movs	r6, #0
 8008422:	4630      	mov	r0, r6
 8008424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008428:	4e2e      	ldr	r6, [pc, #184]	; (80084e4 <_malloc_r+0xe4>)
 800842a:	f000 fdbb 	bl	8008fa4 <__malloc_lock>
 800842e:	6833      	ldr	r3, [r6, #0]
 8008430:	461c      	mov	r4, r3
 8008432:	bb34      	cbnz	r4, 8008482 <_malloc_r+0x82>
 8008434:	4629      	mov	r1, r5
 8008436:	4638      	mov	r0, r7
 8008438:	f7ff ffc2 	bl	80083c0 <sbrk_aligned>
 800843c:	1c43      	adds	r3, r0, #1
 800843e:	4604      	mov	r4, r0
 8008440:	d14d      	bne.n	80084de <_malloc_r+0xde>
 8008442:	6834      	ldr	r4, [r6, #0]
 8008444:	4626      	mov	r6, r4
 8008446:	2e00      	cmp	r6, #0
 8008448:	d140      	bne.n	80084cc <_malloc_r+0xcc>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	4631      	mov	r1, r6
 800844e:	4638      	mov	r0, r7
 8008450:	eb04 0803 	add.w	r8, r4, r3
 8008454:	f000 fb36 	bl	8008ac4 <_sbrk_r>
 8008458:	4580      	cmp	r8, r0
 800845a:	d13a      	bne.n	80084d2 <_malloc_r+0xd2>
 800845c:	6821      	ldr	r1, [r4, #0]
 800845e:	3503      	adds	r5, #3
 8008460:	1a6d      	subs	r5, r5, r1
 8008462:	f025 0503 	bic.w	r5, r5, #3
 8008466:	3508      	adds	r5, #8
 8008468:	2d0c      	cmp	r5, #12
 800846a:	bf38      	it	cc
 800846c:	250c      	movcc	r5, #12
 800846e:	4629      	mov	r1, r5
 8008470:	4638      	mov	r0, r7
 8008472:	f7ff ffa5 	bl	80083c0 <sbrk_aligned>
 8008476:	3001      	adds	r0, #1
 8008478:	d02b      	beq.n	80084d2 <_malloc_r+0xd2>
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	442b      	add	r3, r5
 800847e:	6023      	str	r3, [r4, #0]
 8008480:	e00e      	b.n	80084a0 <_malloc_r+0xa0>
 8008482:	6822      	ldr	r2, [r4, #0]
 8008484:	1b52      	subs	r2, r2, r5
 8008486:	d41e      	bmi.n	80084c6 <_malloc_r+0xc6>
 8008488:	2a0b      	cmp	r2, #11
 800848a:	d916      	bls.n	80084ba <_malloc_r+0xba>
 800848c:	1961      	adds	r1, r4, r5
 800848e:	42a3      	cmp	r3, r4
 8008490:	6025      	str	r5, [r4, #0]
 8008492:	bf18      	it	ne
 8008494:	6059      	strne	r1, [r3, #4]
 8008496:	6863      	ldr	r3, [r4, #4]
 8008498:	bf08      	it	eq
 800849a:	6031      	streq	r1, [r6, #0]
 800849c:	5162      	str	r2, [r4, r5]
 800849e:	604b      	str	r3, [r1, #4]
 80084a0:	4638      	mov	r0, r7
 80084a2:	f104 060b 	add.w	r6, r4, #11
 80084a6:	f000 fd83 	bl	8008fb0 <__malloc_unlock>
 80084aa:	f026 0607 	bic.w	r6, r6, #7
 80084ae:	1d23      	adds	r3, r4, #4
 80084b0:	1af2      	subs	r2, r6, r3
 80084b2:	d0b6      	beq.n	8008422 <_malloc_r+0x22>
 80084b4:	1b9b      	subs	r3, r3, r6
 80084b6:	50a3      	str	r3, [r4, r2]
 80084b8:	e7b3      	b.n	8008422 <_malloc_r+0x22>
 80084ba:	6862      	ldr	r2, [r4, #4]
 80084bc:	42a3      	cmp	r3, r4
 80084be:	bf0c      	ite	eq
 80084c0:	6032      	streq	r2, [r6, #0]
 80084c2:	605a      	strne	r2, [r3, #4]
 80084c4:	e7ec      	b.n	80084a0 <_malloc_r+0xa0>
 80084c6:	4623      	mov	r3, r4
 80084c8:	6864      	ldr	r4, [r4, #4]
 80084ca:	e7b2      	b.n	8008432 <_malloc_r+0x32>
 80084cc:	4634      	mov	r4, r6
 80084ce:	6876      	ldr	r6, [r6, #4]
 80084d0:	e7b9      	b.n	8008446 <_malloc_r+0x46>
 80084d2:	230c      	movs	r3, #12
 80084d4:	603b      	str	r3, [r7, #0]
 80084d6:	4638      	mov	r0, r7
 80084d8:	f000 fd6a 	bl	8008fb0 <__malloc_unlock>
 80084dc:	e7a1      	b.n	8008422 <_malloc_r+0x22>
 80084de:	6025      	str	r5, [r4, #0]
 80084e0:	e7de      	b.n	80084a0 <_malloc_r+0xa0>
 80084e2:	bf00      	nop
 80084e4:	20001f04 	.word	0x20001f04

080084e8 <__sfputc_r>:
 80084e8:	6893      	ldr	r3, [r2, #8]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	b410      	push	{r4}
 80084f0:	6093      	str	r3, [r2, #8]
 80084f2:	da08      	bge.n	8008506 <__sfputc_r+0x1e>
 80084f4:	6994      	ldr	r4, [r2, #24]
 80084f6:	42a3      	cmp	r3, r4
 80084f8:	db01      	blt.n	80084fe <__sfputc_r+0x16>
 80084fa:	290a      	cmp	r1, #10
 80084fc:	d103      	bne.n	8008506 <__sfputc_r+0x1e>
 80084fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008502:	f000 bb33 	b.w	8008b6c <__swbuf_r>
 8008506:	6813      	ldr	r3, [r2, #0]
 8008508:	1c58      	adds	r0, r3, #1
 800850a:	6010      	str	r0, [r2, #0]
 800850c:	7019      	strb	r1, [r3, #0]
 800850e:	4608      	mov	r0, r1
 8008510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008514:	4770      	bx	lr

08008516 <__sfputs_r>:
 8008516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008518:	4606      	mov	r6, r0
 800851a:	460f      	mov	r7, r1
 800851c:	4614      	mov	r4, r2
 800851e:	18d5      	adds	r5, r2, r3
 8008520:	42ac      	cmp	r4, r5
 8008522:	d101      	bne.n	8008528 <__sfputs_r+0x12>
 8008524:	2000      	movs	r0, #0
 8008526:	e007      	b.n	8008538 <__sfputs_r+0x22>
 8008528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800852c:	463a      	mov	r2, r7
 800852e:	4630      	mov	r0, r6
 8008530:	f7ff ffda 	bl	80084e8 <__sfputc_r>
 8008534:	1c43      	adds	r3, r0, #1
 8008536:	d1f3      	bne.n	8008520 <__sfputs_r+0xa>
 8008538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800853c <_vfiprintf_r>:
 800853c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008540:	460d      	mov	r5, r1
 8008542:	b09d      	sub	sp, #116	; 0x74
 8008544:	4614      	mov	r4, r2
 8008546:	4698      	mov	r8, r3
 8008548:	4606      	mov	r6, r0
 800854a:	b118      	cbz	r0, 8008554 <_vfiprintf_r+0x18>
 800854c:	6983      	ldr	r3, [r0, #24]
 800854e:	b90b      	cbnz	r3, 8008554 <_vfiprintf_r+0x18>
 8008550:	f7ff fe96 	bl	8008280 <__sinit>
 8008554:	4b89      	ldr	r3, [pc, #548]	; (800877c <_vfiprintf_r+0x240>)
 8008556:	429d      	cmp	r5, r3
 8008558:	d11b      	bne.n	8008592 <_vfiprintf_r+0x56>
 800855a:	6875      	ldr	r5, [r6, #4]
 800855c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800855e:	07d9      	lsls	r1, r3, #31
 8008560:	d405      	bmi.n	800856e <_vfiprintf_r+0x32>
 8008562:	89ab      	ldrh	r3, [r5, #12]
 8008564:	059a      	lsls	r2, r3, #22
 8008566:	d402      	bmi.n	800856e <_vfiprintf_r+0x32>
 8008568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800856a:	f7ff ff27 	bl	80083bc <__retarget_lock_acquire_recursive>
 800856e:	89ab      	ldrh	r3, [r5, #12]
 8008570:	071b      	lsls	r3, r3, #28
 8008572:	d501      	bpl.n	8008578 <_vfiprintf_r+0x3c>
 8008574:	692b      	ldr	r3, [r5, #16]
 8008576:	b9eb      	cbnz	r3, 80085b4 <_vfiprintf_r+0x78>
 8008578:	4629      	mov	r1, r5
 800857a:	4630      	mov	r0, r6
 800857c:	f000 fb5a 	bl	8008c34 <__swsetup_r>
 8008580:	b1c0      	cbz	r0, 80085b4 <_vfiprintf_r+0x78>
 8008582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008584:	07dc      	lsls	r4, r3, #31
 8008586:	d50e      	bpl.n	80085a6 <_vfiprintf_r+0x6a>
 8008588:	f04f 30ff 	mov.w	r0, #4294967295
 800858c:	b01d      	add	sp, #116	; 0x74
 800858e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008592:	4b7b      	ldr	r3, [pc, #492]	; (8008780 <_vfiprintf_r+0x244>)
 8008594:	429d      	cmp	r5, r3
 8008596:	d101      	bne.n	800859c <_vfiprintf_r+0x60>
 8008598:	68b5      	ldr	r5, [r6, #8]
 800859a:	e7df      	b.n	800855c <_vfiprintf_r+0x20>
 800859c:	4b79      	ldr	r3, [pc, #484]	; (8008784 <_vfiprintf_r+0x248>)
 800859e:	429d      	cmp	r5, r3
 80085a0:	bf08      	it	eq
 80085a2:	68f5      	ldreq	r5, [r6, #12]
 80085a4:	e7da      	b.n	800855c <_vfiprintf_r+0x20>
 80085a6:	89ab      	ldrh	r3, [r5, #12]
 80085a8:	0598      	lsls	r0, r3, #22
 80085aa:	d4ed      	bmi.n	8008588 <_vfiprintf_r+0x4c>
 80085ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ae:	f7ff ff06 	bl	80083be <__retarget_lock_release_recursive>
 80085b2:	e7e9      	b.n	8008588 <_vfiprintf_r+0x4c>
 80085b4:	2300      	movs	r3, #0
 80085b6:	9309      	str	r3, [sp, #36]	; 0x24
 80085b8:	2320      	movs	r3, #32
 80085ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085be:	f8cd 800c 	str.w	r8, [sp, #12]
 80085c2:	2330      	movs	r3, #48	; 0x30
 80085c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008788 <_vfiprintf_r+0x24c>
 80085c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085cc:	f04f 0901 	mov.w	r9, #1
 80085d0:	4623      	mov	r3, r4
 80085d2:	469a      	mov	sl, r3
 80085d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085d8:	b10a      	cbz	r2, 80085de <_vfiprintf_r+0xa2>
 80085da:	2a25      	cmp	r2, #37	; 0x25
 80085dc:	d1f9      	bne.n	80085d2 <_vfiprintf_r+0x96>
 80085de:	ebba 0b04 	subs.w	fp, sl, r4
 80085e2:	d00b      	beq.n	80085fc <_vfiprintf_r+0xc0>
 80085e4:	465b      	mov	r3, fp
 80085e6:	4622      	mov	r2, r4
 80085e8:	4629      	mov	r1, r5
 80085ea:	4630      	mov	r0, r6
 80085ec:	f7ff ff93 	bl	8008516 <__sfputs_r>
 80085f0:	3001      	adds	r0, #1
 80085f2:	f000 80aa 	beq.w	800874a <_vfiprintf_r+0x20e>
 80085f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085f8:	445a      	add	r2, fp
 80085fa:	9209      	str	r2, [sp, #36]	; 0x24
 80085fc:	f89a 3000 	ldrb.w	r3, [sl]
 8008600:	2b00      	cmp	r3, #0
 8008602:	f000 80a2 	beq.w	800874a <_vfiprintf_r+0x20e>
 8008606:	2300      	movs	r3, #0
 8008608:	f04f 32ff 	mov.w	r2, #4294967295
 800860c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008610:	f10a 0a01 	add.w	sl, sl, #1
 8008614:	9304      	str	r3, [sp, #16]
 8008616:	9307      	str	r3, [sp, #28]
 8008618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800861c:	931a      	str	r3, [sp, #104]	; 0x68
 800861e:	4654      	mov	r4, sl
 8008620:	2205      	movs	r2, #5
 8008622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008626:	4858      	ldr	r0, [pc, #352]	; (8008788 <_vfiprintf_r+0x24c>)
 8008628:	f7f7 fdda 	bl	80001e0 <memchr>
 800862c:	9a04      	ldr	r2, [sp, #16]
 800862e:	b9d8      	cbnz	r0, 8008668 <_vfiprintf_r+0x12c>
 8008630:	06d1      	lsls	r1, r2, #27
 8008632:	bf44      	itt	mi
 8008634:	2320      	movmi	r3, #32
 8008636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800863a:	0713      	lsls	r3, r2, #28
 800863c:	bf44      	itt	mi
 800863e:	232b      	movmi	r3, #43	; 0x2b
 8008640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008644:	f89a 3000 	ldrb.w	r3, [sl]
 8008648:	2b2a      	cmp	r3, #42	; 0x2a
 800864a:	d015      	beq.n	8008678 <_vfiprintf_r+0x13c>
 800864c:	9a07      	ldr	r2, [sp, #28]
 800864e:	4654      	mov	r4, sl
 8008650:	2000      	movs	r0, #0
 8008652:	f04f 0c0a 	mov.w	ip, #10
 8008656:	4621      	mov	r1, r4
 8008658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800865c:	3b30      	subs	r3, #48	; 0x30
 800865e:	2b09      	cmp	r3, #9
 8008660:	d94e      	bls.n	8008700 <_vfiprintf_r+0x1c4>
 8008662:	b1b0      	cbz	r0, 8008692 <_vfiprintf_r+0x156>
 8008664:	9207      	str	r2, [sp, #28]
 8008666:	e014      	b.n	8008692 <_vfiprintf_r+0x156>
 8008668:	eba0 0308 	sub.w	r3, r0, r8
 800866c:	fa09 f303 	lsl.w	r3, r9, r3
 8008670:	4313      	orrs	r3, r2
 8008672:	9304      	str	r3, [sp, #16]
 8008674:	46a2      	mov	sl, r4
 8008676:	e7d2      	b.n	800861e <_vfiprintf_r+0xe2>
 8008678:	9b03      	ldr	r3, [sp, #12]
 800867a:	1d19      	adds	r1, r3, #4
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	9103      	str	r1, [sp, #12]
 8008680:	2b00      	cmp	r3, #0
 8008682:	bfbb      	ittet	lt
 8008684:	425b      	neglt	r3, r3
 8008686:	f042 0202 	orrlt.w	r2, r2, #2
 800868a:	9307      	strge	r3, [sp, #28]
 800868c:	9307      	strlt	r3, [sp, #28]
 800868e:	bfb8      	it	lt
 8008690:	9204      	strlt	r2, [sp, #16]
 8008692:	7823      	ldrb	r3, [r4, #0]
 8008694:	2b2e      	cmp	r3, #46	; 0x2e
 8008696:	d10c      	bne.n	80086b2 <_vfiprintf_r+0x176>
 8008698:	7863      	ldrb	r3, [r4, #1]
 800869a:	2b2a      	cmp	r3, #42	; 0x2a
 800869c:	d135      	bne.n	800870a <_vfiprintf_r+0x1ce>
 800869e:	9b03      	ldr	r3, [sp, #12]
 80086a0:	1d1a      	adds	r2, r3, #4
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	9203      	str	r2, [sp, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	bfb8      	it	lt
 80086aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80086ae:	3402      	adds	r4, #2
 80086b0:	9305      	str	r3, [sp, #20]
 80086b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008798 <_vfiprintf_r+0x25c>
 80086b6:	7821      	ldrb	r1, [r4, #0]
 80086b8:	2203      	movs	r2, #3
 80086ba:	4650      	mov	r0, sl
 80086bc:	f7f7 fd90 	bl	80001e0 <memchr>
 80086c0:	b140      	cbz	r0, 80086d4 <_vfiprintf_r+0x198>
 80086c2:	2340      	movs	r3, #64	; 0x40
 80086c4:	eba0 000a 	sub.w	r0, r0, sl
 80086c8:	fa03 f000 	lsl.w	r0, r3, r0
 80086cc:	9b04      	ldr	r3, [sp, #16]
 80086ce:	4303      	orrs	r3, r0
 80086d0:	3401      	adds	r4, #1
 80086d2:	9304      	str	r3, [sp, #16]
 80086d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086d8:	482c      	ldr	r0, [pc, #176]	; (800878c <_vfiprintf_r+0x250>)
 80086da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086de:	2206      	movs	r2, #6
 80086e0:	f7f7 fd7e 	bl	80001e0 <memchr>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d03f      	beq.n	8008768 <_vfiprintf_r+0x22c>
 80086e8:	4b29      	ldr	r3, [pc, #164]	; (8008790 <_vfiprintf_r+0x254>)
 80086ea:	bb1b      	cbnz	r3, 8008734 <_vfiprintf_r+0x1f8>
 80086ec:	9b03      	ldr	r3, [sp, #12]
 80086ee:	3307      	adds	r3, #7
 80086f0:	f023 0307 	bic.w	r3, r3, #7
 80086f4:	3308      	adds	r3, #8
 80086f6:	9303      	str	r3, [sp, #12]
 80086f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fa:	443b      	add	r3, r7
 80086fc:	9309      	str	r3, [sp, #36]	; 0x24
 80086fe:	e767      	b.n	80085d0 <_vfiprintf_r+0x94>
 8008700:	fb0c 3202 	mla	r2, ip, r2, r3
 8008704:	460c      	mov	r4, r1
 8008706:	2001      	movs	r0, #1
 8008708:	e7a5      	b.n	8008656 <_vfiprintf_r+0x11a>
 800870a:	2300      	movs	r3, #0
 800870c:	3401      	adds	r4, #1
 800870e:	9305      	str	r3, [sp, #20]
 8008710:	4619      	mov	r1, r3
 8008712:	f04f 0c0a 	mov.w	ip, #10
 8008716:	4620      	mov	r0, r4
 8008718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800871c:	3a30      	subs	r2, #48	; 0x30
 800871e:	2a09      	cmp	r2, #9
 8008720:	d903      	bls.n	800872a <_vfiprintf_r+0x1ee>
 8008722:	2b00      	cmp	r3, #0
 8008724:	d0c5      	beq.n	80086b2 <_vfiprintf_r+0x176>
 8008726:	9105      	str	r1, [sp, #20]
 8008728:	e7c3      	b.n	80086b2 <_vfiprintf_r+0x176>
 800872a:	fb0c 2101 	mla	r1, ip, r1, r2
 800872e:	4604      	mov	r4, r0
 8008730:	2301      	movs	r3, #1
 8008732:	e7f0      	b.n	8008716 <_vfiprintf_r+0x1da>
 8008734:	ab03      	add	r3, sp, #12
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	462a      	mov	r2, r5
 800873a:	4b16      	ldr	r3, [pc, #88]	; (8008794 <_vfiprintf_r+0x258>)
 800873c:	a904      	add	r1, sp, #16
 800873e:	4630      	mov	r0, r6
 8008740:	f3af 8000 	nop.w
 8008744:	4607      	mov	r7, r0
 8008746:	1c78      	adds	r0, r7, #1
 8008748:	d1d6      	bne.n	80086f8 <_vfiprintf_r+0x1bc>
 800874a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800874c:	07d9      	lsls	r1, r3, #31
 800874e:	d405      	bmi.n	800875c <_vfiprintf_r+0x220>
 8008750:	89ab      	ldrh	r3, [r5, #12]
 8008752:	059a      	lsls	r2, r3, #22
 8008754:	d402      	bmi.n	800875c <_vfiprintf_r+0x220>
 8008756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008758:	f7ff fe31 	bl	80083be <__retarget_lock_release_recursive>
 800875c:	89ab      	ldrh	r3, [r5, #12]
 800875e:	065b      	lsls	r3, r3, #25
 8008760:	f53f af12 	bmi.w	8008588 <_vfiprintf_r+0x4c>
 8008764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008766:	e711      	b.n	800858c <_vfiprintf_r+0x50>
 8008768:	ab03      	add	r3, sp, #12
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	462a      	mov	r2, r5
 800876e:	4b09      	ldr	r3, [pc, #36]	; (8008794 <_vfiprintf_r+0x258>)
 8008770:	a904      	add	r1, sp, #16
 8008772:	4630      	mov	r0, r6
 8008774:	f000 f880 	bl	8008878 <_printf_i>
 8008778:	e7e4      	b.n	8008744 <_vfiprintf_r+0x208>
 800877a:	bf00      	nop
 800877c:	080091ac 	.word	0x080091ac
 8008780:	080091cc 	.word	0x080091cc
 8008784:	0800918c 	.word	0x0800918c
 8008788:	080091ec 	.word	0x080091ec
 800878c:	080091f6 	.word	0x080091f6
 8008790:	00000000 	.word	0x00000000
 8008794:	08008517 	.word	0x08008517
 8008798:	080091f2 	.word	0x080091f2

0800879c <_printf_common>:
 800879c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087a0:	4616      	mov	r6, r2
 80087a2:	4699      	mov	r9, r3
 80087a4:	688a      	ldr	r2, [r1, #8]
 80087a6:	690b      	ldr	r3, [r1, #16]
 80087a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087ac:	4293      	cmp	r3, r2
 80087ae:	bfb8      	it	lt
 80087b0:	4613      	movlt	r3, r2
 80087b2:	6033      	str	r3, [r6, #0]
 80087b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087b8:	4607      	mov	r7, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	b10a      	cbz	r2, 80087c2 <_printf_common+0x26>
 80087be:	3301      	adds	r3, #1
 80087c0:	6033      	str	r3, [r6, #0]
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	0699      	lsls	r1, r3, #26
 80087c6:	bf42      	ittt	mi
 80087c8:	6833      	ldrmi	r3, [r6, #0]
 80087ca:	3302      	addmi	r3, #2
 80087cc:	6033      	strmi	r3, [r6, #0]
 80087ce:	6825      	ldr	r5, [r4, #0]
 80087d0:	f015 0506 	ands.w	r5, r5, #6
 80087d4:	d106      	bne.n	80087e4 <_printf_common+0x48>
 80087d6:	f104 0a19 	add.w	sl, r4, #25
 80087da:	68e3      	ldr	r3, [r4, #12]
 80087dc:	6832      	ldr	r2, [r6, #0]
 80087de:	1a9b      	subs	r3, r3, r2
 80087e0:	42ab      	cmp	r3, r5
 80087e2:	dc26      	bgt.n	8008832 <_printf_common+0x96>
 80087e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087e8:	1e13      	subs	r3, r2, #0
 80087ea:	6822      	ldr	r2, [r4, #0]
 80087ec:	bf18      	it	ne
 80087ee:	2301      	movne	r3, #1
 80087f0:	0692      	lsls	r2, r2, #26
 80087f2:	d42b      	bmi.n	800884c <_printf_common+0xb0>
 80087f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087f8:	4649      	mov	r1, r9
 80087fa:	4638      	mov	r0, r7
 80087fc:	47c0      	blx	r8
 80087fe:	3001      	adds	r0, #1
 8008800:	d01e      	beq.n	8008840 <_printf_common+0xa4>
 8008802:	6823      	ldr	r3, [r4, #0]
 8008804:	68e5      	ldr	r5, [r4, #12]
 8008806:	6832      	ldr	r2, [r6, #0]
 8008808:	f003 0306 	and.w	r3, r3, #6
 800880c:	2b04      	cmp	r3, #4
 800880e:	bf08      	it	eq
 8008810:	1aad      	subeq	r5, r5, r2
 8008812:	68a3      	ldr	r3, [r4, #8]
 8008814:	6922      	ldr	r2, [r4, #16]
 8008816:	bf0c      	ite	eq
 8008818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800881c:	2500      	movne	r5, #0
 800881e:	4293      	cmp	r3, r2
 8008820:	bfc4      	itt	gt
 8008822:	1a9b      	subgt	r3, r3, r2
 8008824:	18ed      	addgt	r5, r5, r3
 8008826:	2600      	movs	r6, #0
 8008828:	341a      	adds	r4, #26
 800882a:	42b5      	cmp	r5, r6
 800882c:	d11a      	bne.n	8008864 <_printf_common+0xc8>
 800882e:	2000      	movs	r0, #0
 8008830:	e008      	b.n	8008844 <_printf_common+0xa8>
 8008832:	2301      	movs	r3, #1
 8008834:	4652      	mov	r2, sl
 8008836:	4649      	mov	r1, r9
 8008838:	4638      	mov	r0, r7
 800883a:	47c0      	blx	r8
 800883c:	3001      	adds	r0, #1
 800883e:	d103      	bne.n	8008848 <_printf_common+0xac>
 8008840:	f04f 30ff 	mov.w	r0, #4294967295
 8008844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008848:	3501      	adds	r5, #1
 800884a:	e7c6      	b.n	80087da <_printf_common+0x3e>
 800884c:	18e1      	adds	r1, r4, r3
 800884e:	1c5a      	adds	r2, r3, #1
 8008850:	2030      	movs	r0, #48	; 0x30
 8008852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008856:	4422      	add	r2, r4
 8008858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800885c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008860:	3302      	adds	r3, #2
 8008862:	e7c7      	b.n	80087f4 <_printf_common+0x58>
 8008864:	2301      	movs	r3, #1
 8008866:	4622      	mov	r2, r4
 8008868:	4649      	mov	r1, r9
 800886a:	4638      	mov	r0, r7
 800886c:	47c0      	blx	r8
 800886e:	3001      	adds	r0, #1
 8008870:	d0e6      	beq.n	8008840 <_printf_common+0xa4>
 8008872:	3601      	adds	r6, #1
 8008874:	e7d9      	b.n	800882a <_printf_common+0x8e>
	...

08008878 <_printf_i>:
 8008878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800887c:	7e0f      	ldrb	r7, [r1, #24]
 800887e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008880:	2f78      	cmp	r7, #120	; 0x78
 8008882:	4691      	mov	r9, r2
 8008884:	4680      	mov	r8, r0
 8008886:	460c      	mov	r4, r1
 8008888:	469a      	mov	sl, r3
 800888a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800888e:	d807      	bhi.n	80088a0 <_printf_i+0x28>
 8008890:	2f62      	cmp	r7, #98	; 0x62
 8008892:	d80a      	bhi.n	80088aa <_printf_i+0x32>
 8008894:	2f00      	cmp	r7, #0
 8008896:	f000 80d8 	beq.w	8008a4a <_printf_i+0x1d2>
 800889a:	2f58      	cmp	r7, #88	; 0x58
 800889c:	f000 80a3 	beq.w	80089e6 <_printf_i+0x16e>
 80088a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088a8:	e03a      	b.n	8008920 <_printf_i+0xa8>
 80088aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088ae:	2b15      	cmp	r3, #21
 80088b0:	d8f6      	bhi.n	80088a0 <_printf_i+0x28>
 80088b2:	a101      	add	r1, pc, #4	; (adr r1, 80088b8 <_printf_i+0x40>)
 80088b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088b8:	08008911 	.word	0x08008911
 80088bc:	08008925 	.word	0x08008925
 80088c0:	080088a1 	.word	0x080088a1
 80088c4:	080088a1 	.word	0x080088a1
 80088c8:	080088a1 	.word	0x080088a1
 80088cc:	080088a1 	.word	0x080088a1
 80088d0:	08008925 	.word	0x08008925
 80088d4:	080088a1 	.word	0x080088a1
 80088d8:	080088a1 	.word	0x080088a1
 80088dc:	080088a1 	.word	0x080088a1
 80088e0:	080088a1 	.word	0x080088a1
 80088e4:	08008a31 	.word	0x08008a31
 80088e8:	08008955 	.word	0x08008955
 80088ec:	08008a13 	.word	0x08008a13
 80088f0:	080088a1 	.word	0x080088a1
 80088f4:	080088a1 	.word	0x080088a1
 80088f8:	08008a53 	.word	0x08008a53
 80088fc:	080088a1 	.word	0x080088a1
 8008900:	08008955 	.word	0x08008955
 8008904:	080088a1 	.word	0x080088a1
 8008908:	080088a1 	.word	0x080088a1
 800890c:	08008a1b 	.word	0x08008a1b
 8008910:	682b      	ldr	r3, [r5, #0]
 8008912:	1d1a      	adds	r2, r3, #4
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	602a      	str	r2, [r5, #0]
 8008918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800891c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008920:	2301      	movs	r3, #1
 8008922:	e0a3      	b.n	8008a6c <_printf_i+0x1f4>
 8008924:	6820      	ldr	r0, [r4, #0]
 8008926:	6829      	ldr	r1, [r5, #0]
 8008928:	0606      	lsls	r6, r0, #24
 800892a:	f101 0304 	add.w	r3, r1, #4
 800892e:	d50a      	bpl.n	8008946 <_printf_i+0xce>
 8008930:	680e      	ldr	r6, [r1, #0]
 8008932:	602b      	str	r3, [r5, #0]
 8008934:	2e00      	cmp	r6, #0
 8008936:	da03      	bge.n	8008940 <_printf_i+0xc8>
 8008938:	232d      	movs	r3, #45	; 0x2d
 800893a:	4276      	negs	r6, r6
 800893c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008940:	485e      	ldr	r0, [pc, #376]	; (8008abc <_printf_i+0x244>)
 8008942:	230a      	movs	r3, #10
 8008944:	e019      	b.n	800897a <_printf_i+0x102>
 8008946:	680e      	ldr	r6, [r1, #0]
 8008948:	602b      	str	r3, [r5, #0]
 800894a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800894e:	bf18      	it	ne
 8008950:	b236      	sxthne	r6, r6
 8008952:	e7ef      	b.n	8008934 <_printf_i+0xbc>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	6820      	ldr	r0, [r4, #0]
 8008958:	1d19      	adds	r1, r3, #4
 800895a:	6029      	str	r1, [r5, #0]
 800895c:	0601      	lsls	r1, r0, #24
 800895e:	d501      	bpl.n	8008964 <_printf_i+0xec>
 8008960:	681e      	ldr	r6, [r3, #0]
 8008962:	e002      	b.n	800896a <_printf_i+0xf2>
 8008964:	0646      	lsls	r6, r0, #25
 8008966:	d5fb      	bpl.n	8008960 <_printf_i+0xe8>
 8008968:	881e      	ldrh	r6, [r3, #0]
 800896a:	4854      	ldr	r0, [pc, #336]	; (8008abc <_printf_i+0x244>)
 800896c:	2f6f      	cmp	r7, #111	; 0x6f
 800896e:	bf0c      	ite	eq
 8008970:	2308      	moveq	r3, #8
 8008972:	230a      	movne	r3, #10
 8008974:	2100      	movs	r1, #0
 8008976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800897a:	6865      	ldr	r5, [r4, #4]
 800897c:	60a5      	str	r5, [r4, #8]
 800897e:	2d00      	cmp	r5, #0
 8008980:	bfa2      	ittt	ge
 8008982:	6821      	ldrge	r1, [r4, #0]
 8008984:	f021 0104 	bicge.w	r1, r1, #4
 8008988:	6021      	strge	r1, [r4, #0]
 800898a:	b90e      	cbnz	r6, 8008990 <_printf_i+0x118>
 800898c:	2d00      	cmp	r5, #0
 800898e:	d04d      	beq.n	8008a2c <_printf_i+0x1b4>
 8008990:	4615      	mov	r5, r2
 8008992:	fbb6 f1f3 	udiv	r1, r6, r3
 8008996:	fb03 6711 	mls	r7, r3, r1, r6
 800899a:	5dc7      	ldrb	r7, [r0, r7]
 800899c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089a0:	4637      	mov	r7, r6
 80089a2:	42bb      	cmp	r3, r7
 80089a4:	460e      	mov	r6, r1
 80089a6:	d9f4      	bls.n	8008992 <_printf_i+0x11a>
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d10b      	bne.n	80089c4 <_printf_i+0x14c>
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	07de      	lsls	r6, r3, #31
 80089b0:	d508      	bpl.n	80089c4 <_printf_i+0x14c>
 80089b2:	6923      	ldr	r3, [r4, #16]
 80089b4:	6861      	ldr	r1, [r4, #4]
 80089b6:	4299      	cmp	r1, r3
 80089b8:	bfde      	ittt	le
 80089ba:	2330      	movle	r3, #48	; 0x30
 80089bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089c4:	1b52      	subs	r2, r2, r5
 80089c6:	6122      	str	r2, [r4, #16]
 80089c8:	f8cd a000 	str.w	sl, [sp]
 80089cc:	464b      	mov	r3, r9
 80089ce:	aa03      	add	r2, sp, #12
 80089d0:	4621      	mov	r1, r4
 80089d2:	4640      	mov	r0, r8
 80089d4:	f7ff fee2 	bl	800879c <_printf_common>
 80089d8:	3001      	adds	r0, #1
 80089da:	d14c      	bne.n	8008a76 <_printf_i+0x1fe>
 80089dc:	f04f 30ff 	mov.w	r0, #4294967295
 80089e0:	b004      	add	sp, #16
 80089e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089e6:	4835      	ldr	r0, [pc, #212]	; (8008abc <_printf_i+0x244>)
 80089e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089ec:	6829      	ldr	r1, [r5, #0]
 80089ee:	6823      	ldr	r3, [r4, #0]
 80089f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80089f4:	6029      	str	r1, [r5, #0]
 80089f6:	061d      	lsls	r5, r3, #24
 80089f8:	d514      	bpl.n	8008a24 <_printf_i+0x1ac>
 80089fa:	07df      	lsls	r7, r3, #31
 80089fc:	bf44      	itt	mi
 80089fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008a02:	6023      	strmi	r3, [r4, #0]
 8008a04:	b91e      	cbnz	r6, 8008a0e <_printf_i+0x196>
 8008a06:	6823      	ldr	r3, [r4, #0]
 8008a08:	f023 0320 	bic.w	r3, r3, #32
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	2310      	movs	r3, #16
 8008a10:	e7b0      	b.n	8008974 <_printf_i+0xfc>
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	f043 0320 	orr.w	r3, r3, #32
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	2378      	movs	r3, #120	; 0x78
 8008a1c:	4828      	ldr	r0, [pc, #160]	; (8008ac0 <_printf_i+0x248>)
 8008a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a22:	e7e3      	b.n	80089ec <_printf_i+0x174>
 8008a24:	0659      	lsls	r1, r3, #25
 8008a26:	bf48      	it	mi
 8008a28:	b2b6      	uxthmi	r6, r6
 8008a2a:	e7e6      	b.n	80089fa <_printf_i+0x182>
 8008a2c:	4615      	mov	r5, r2
 8008a2e:	e7bb      	b.n	80089a8 <_printf_i+0x130>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	6826      	ldr	r6, [r4, #0]
 8008a34:	6961      	ldr	r1, [r4, #20]
 8008a36:	1d18      	adds	r0, r3, #4
 8008a38:	6028      	str	r0, [r5, #0]
 8008a3a:	0635      	lsls	r5, r6, #24
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	d501      	bpl.n	8008a44 <_printf_i+0x1cc>
 8008a40:	6019      	str	r1, [r3, #0]
 8008a42:	e002      	b.n	8008a4a <_printf_i+0x1d2>
 8008a44:	0670      	lsls	r0, r6, #25
 8008a46:	d5fb      	bpl.n	8008a40 <_printf_i+0x1c8>
 8008a48:	8019      	strh	r1, [r3, #0]
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	6123      	str	r3, [r4, #16]
 8008a4e:	4615      	mov	r5, r2
 8008a50:	e7ba      	b.n	80089c8 <_printf_i+0x150>
 8008a52:	682b      	ldr	r3, [r5, #0]
 8008a54:	1d1a      	adds	r2, r3, #4
 8008a56:	602a      	str	r2, [r5, #0]
 8008a58:	681d      	ldr	r5, [r3, #0]
 8008a5a:	6862      	ldr	r2, [r4, #4]
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f7f7 fbbe 	bl	80001e0 <memchr>
 8008a64:	b108      	cbz	r0, 8008a6a <_printf_i+0x1f2>
 8008a66:	1b40      	subs	r0, r0, r5
 8008a68:	6060      	str	r0, [r4, #4]
 8008a6a:	6863      	ldr	r3, [r4, #4]
 8008a6c:	6123      	str	r3, [r4, #16]
 8008a6e:	2300      	movs	r3, #0
 8008a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a74:	e7a8      	b.n	80089c8 <_printf_i+0x150>
 8008a76:	6923      	ldr	r3, [r4, #16]
 8008a78:	462a      	mov	r2, r5
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	47d0      	blx	sl
 8008a80:	3001      	adds	r0, #1
 8008a82:	d0ab      	beq.n	80089dc <_printf_i+0x164>
 8008a84:	6823      	ldr	r3, [r4, #0]
 8008a86:	079b      	lsls	r3, r3, #30
 8008a88:	d413      	bmi.n	8008ab2 <_printf_i+0x23a>
 8008a8a:	68e0      	ldr	r0, [r4, #12]
 8008a8c:	9b03      	ldr	r3, [sp, #12]
 8008a8e:	4298      	cmp	r0, r3
 8008a90:	bfb8      	it	lt
 8008a92:	4618      	movlt	r0, r3
 8008a94:	e7a4      	b.n	80089e0 <_printf_i+0x168>
 8008a96:	2301      	movs	r3, #1
 8008a98:	4632      	mov	r2, r6
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	4640      	mov	r0, r8
 8008a9e:	47d0      	blx	sl
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d09b      	beq.n	80089dc <_printf_i+0x164>
 8008aa4:	3501      	adds	r5, #1
 8008aa6:	68e3      	ldr	r3, [r4, #12]
 8008aa8:	9903      	ldr	r1, [sp, #12]
 8008aaa:	1a5b      	subs	r3, r3, r1
 8008aac:	42ab      	cmp	r3, r5
 8008aae:	dcf2      	bgt.n	8008a96 <_printf_i+0x21e>
 8008ab0:	e7eb      	b.n	8008a8a <_printf_i+0x212>
 8008ab2:	2500      	movs	r5, #0
 8008ab4:	f104 0619 	add.w	r6, r4, #25
 8008ab8:	e7f5      	b.n	8008aa6 <_printf_i+0x22e>
 8008aba:	bf00      	nop
 8008abc:	080091fd 	.word	0x080091fd
 8008ac0:	0800920e 	.word	0x0800920e

08008ac4 <_sbrk_r>:
 8008ac4:	b538      	push	{r3, r4, r5, lr}
 8008ac6:	4d06      	ldr	r5, [pc, #24]	; (8008ae0 <_sbrk_r+0x1c>)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	4604      	mov	r4, r0
 8008acc:	4608      	mov	r0, r1
 8008ace:	602b      	str	r3, [r5, #0]
 8008ad0:	f7f8 f98c 	bl	8000dec <_sbrk>
 8008ad4:	1c43      	adds	r3, r0, #1
 8008ad6:	d102      	bne.n	8008ade <_sbrk_r+0x1a>
 8008ad8:	682b      	ldr	r3, [r5, #0]
 8008ada:	b103      	cbz	r3, 8008ade <_sbrk_r+0x1a>
 8008adc:	6023      	str	r3, [r4, #0]
 8008ade:	bd38      	pop	{r3, r4, r5, pc}
 8008ae0:	20001f0c 	.word	0x20001f0c

08008ae4 <__sread>:
 8008ae4:	b510      	push	{r4, lr}
 8008ae6:	460c      	mov	r4, r1
 8008ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aec:	f000 fab2 	bl	8009054 <_read_r>
 8008af0:	2800      	cmp	r0, #0
 8008af2:	bfab      	itete	ge
 8008af4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008af6:	89a3      	ldrhlt	r3, [r4, #12]
 8008af8:	181b      	addge	r3, r3, r0
 8008afa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008afe:	bfac      	ite	ge
 8008b00:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b02:	81a3      	strhlt	r3, [r4, #12]
 8008b04:	bd10      	pop	{r4, pc}

08008b06 <__swrite>:
 8008b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0a:	461f      	mov	r7, r3
 8008b0c:	898b      	ldrh	r3, [r1, #12]
 8008b0e:	05db      	lsls	r3, r3, #23
 8008b10:	4605      	mov	r5, r0
 8008b12:	460c      	mov	r4, r1
 8008b14:	4616      	mov	r6, r2
 8008b16:	d505      	bpl.n	8008b24 <__swrite+0x1e>
 8008b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b1c:	2302      	movs	r3, #2
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f000 f9c8 	bl	8008eb4 <_lseek_r>
 8008b24:	89a3      	ldrh	r3, [r4, #12]
 8008b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b2e:	81a3      	strh	r3, [r4, #12]
 8008b30:	4632      	mov	r2, r6
 8008b32:	463b      	mov	r3, r7
 8008b34:	4628      	mov	r0, r5
 8008b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3a:	f000 b869 	b.w	8008c10 <_write_r>

08008b3e <__sseek>:
 8008b3e:	b510      	push	{r4, lr}
 8008b40:	460c      	mov	r4, r1
 8008b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b46:	f000 f9b5 	bl	8008eb4 <_lseek_r>
 8008b4a:	1c43      	adds	r3, r0, #1
 8008b4c:	89a3      	ldrh	r3, [r4, #12]
 8008b4e:	bf15      	itete	ne
 8008b50:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b5a:	81a3      	strheq	r3, [r4, #12]
 8008b5c:	bf18      	it	ne
 8008b5e:	81a3      	strhne	r3, [r4, #12]
 8008b60:	bd10      	pop	{r4, pc}

08008b62 <__sclose>:
 8008b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b66:	f000 b8d3 	b.w	8008d10 <_close_r>
	...

08008b6c <__swbuf_r>:
 8008b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6e:	460e      	mov	r6, r1
 8008b70:	4614      	mov	r4, r2
 8008b72:	4605      	mov	r5, r0
 8008b74:	b118      	cbz	r0, 8008b7e <__swbuf_r+0x12>
 8008b76:	6983      	ldr	r3, [r0, #24]
 8008b78:	b90b      	cbnz	r3, 8008b7e <__swbuf_r+0x12>
 8008b7a:	f7ff fb81 	bl	8008280 <__sinit>
 8008b7e:	4b21      	ldr	r3, [pc, #132]	; (8008c04 <__swbuf_r+0x98>)
 8008b80:	429c      	cmp	r4, r3
 8008b82:	d12b      	bne.n	8008bdc <__swbuf_r+0x70>
 8008b84:	686c      	ldr	r4, [r5, #4]
 8008b86:	69a3      	ldr	r3, [r4, #24]
 8008b88:	60a3      	str	r3, [r4, #8]
 8008b8a:	89a3      	ldrh	r3, [r4, #12]
 8008b8c:	071a      	lsls	r2, r3, #28
 8008b8e:	d52f      	bpl.n	8008bf0 <__swbuf_r+0x84>
 8008b90:	6923      	ldr	r3, [r4, #16]
 8008b92:	b36b      	cbz	r3, 8008bf0 <__swbuf_r+0x84>
 8008b94:	6923      	ldr	r3, [r4, #16]
 8008b96:	6820      	ldr	r0, [r4, #0]
 8008b98:	1ac0      	subs	r0, r0, r3
 8008b9a:	6963      	ldr	r3, [r4, #20]
 8008b9c:	b2f6      	uxtb	r6, r6
 8008b9e:	4283      	cmp	r3, r0
 8008ba0:	4637      	mov	r7, r6
 8008ba2:	dc04      	bgt.n	8008bae <__swbuf_r+0x42>
 8008ba4:	4621      	mov	r1, r4
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	f000 f948 	bl	8008e3c <_fflush_r>
 8008bac:	bb30      	cbnz	r0, 8008bfc <__swbuf_r+0x90>
 8008bae:	68a3      	ldr	r3, [r4, #8]
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	60a3      	str	r3, [r4, #8]
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	6022      	str	r2, [r4, #0]
 8008bba:	701e      	strb	r6, [r3, #0]
 8008bbc:	6963      	ldr	r3, [r4, #20]
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	4283      	cmp	r3, r0
 8008bc2:	d004      	beq.n	8008bce <__swbuf_r+0x62>
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	07db      	lsls	r3, r3, #31
 8008bc8:	d506      	bpl.n	8008bd8 <__swbuf_r+0x6c>
 8008bca:	2e0a      	cmp	r6, #10
 8008bcc:	d104      	bne.n	8008bd8 <__swbuf_r+0x6c>
 8008bce:	4621      	mov	r1, r4
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	f000 f933 	bl	8008e3c <_fflush_r>
 8008bd6:	b988      	cbnz	r0, 8008bfc <__swbuf_r+0x90>
 8008bd8:	4638      	mov	r0, r7
 8008bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bdc:	4b0a      	ldr	r3, [pc, #40]	; (8008c08 <__swbuf_r+0x9c>)
 8008bde:	429c      	cmp	r4, r3
 8008be0:	d101      	bne.n	8008be6 <__swbuf_r+0x7a>
 8008be2:	68ac      	ldr	r4, [r5, #8]
 8008be4:	e7cf      	b.n	8008b86 <__swbuf_r+0x1a>
 8008be6:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <__swbuf_r+0xa0>)
 8008be8:	429c      	cmp	r4, r3
 8008bea:	bf08      	it	eq
 8008bec:	68ec      	ldreq	r4, [r5, #12]
 8008bee:	e7ca      	b.n	8008b86 <__swbuf_r+0x1a>
 8008bf0:	4621      	mov	r1, r4
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	f000 f81e 	bl	8008c34 <__swsetup_r>
 8008bf8:	2800      	cmp	r0, #0
 8008bfa:	d0cb      	beq.n	8008b94 <__swbuf_r+0x28>
 8008bfc:	f04f 37ff 	mov.w	r7, #4294967295
 8008c00:	e7ea      	b.n	8008bd8 <__swbuf_r+0x6c>
 8008c02:	bf00      	nop
 8008c04:	080091ac 	.word	0x080091ac
 8008c08:	080091cc 	.word	0x080091cc
 8008c0c:	0800918c 	.word	0x0800918c

08008c10 <_write_r>:
 8008c10:	b538      	push	{r3, r4, r5, lr}
 8008c12:	4d07      	ldr	r5, [pc, #28]	; (8008c30 <_write_r+0x20>)
 8008c14:	4604      	mov	r4, r0
 8008c16:	4608      	mov	r0, r1
 8008c18:	4611      	mov	r1, r2
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	602a      	str	r2, [r5, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f7f7 fef2 	bl	8000a08 <_write>
 8008c24:	1c43      	adds	r3, r0, #1
 8008c26:	d102      	bne.n	8008c2e <_write_r+0x1e>
 8008c28:	682b      	ldr	r3, [r5, #0]
 8008c2a:	b103      	cbz	r3, 8008c2e <_write_r+0x1e>
 8008c2c:	6023      	str	r3, [r4, #0]
 8008c2e:	bd38      	pop	{r3, r4, r5, pc}
 8008c30:	20001f0c 	.word	0x20001f0c

08008c34 <__swsetup_r>:
 8008c34:	4b32      	ldr	r3, [pc, #200]	; (8008d00 <__swsetup_r+0xcc>)
 8008c36:	b570      	push	{r4, r5, r6, lr}
 8008c38:	681d      	ldr	r5, [r3, #0]
 8008c3a:	4606      	mov	r6, r0
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	b125      	cbz	r5, 8008c4a <__swsetup_r+0x16>
 8008c40:	69ab      	ldr	r3, [r5, #24]
 8008c42:	b913      	cbnz	r3, 8008c4a <__swsetup_r+0x16>
 8008c44:	4628      	mov	r0, r5
 8008c46:	f7ff fb1b 	bl	8008280 <__sinit>
 8008c4a:	4b2e      	ldr	r3, [pc, #184]	; (8008d04 <__swsetup_r+0xd0>)
 8008c4c:	429c      	cmp	r4, r3
 8008c4e:	d10f      	bne.n	8008c70 <__swsetup_r+0x3c>
 8008c50:	686c      	ldr	r4, [r5, #4]
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c58:	0719      	lsls	r1, r3, #28
 8008c5a:	d42c      	bmi.n	8008cb6 <__swsetup_r+0x82>
 8008c5c:	06dd      	lsls	r5, r3, #27
 8008c5e:	d411      	bmi.n	8008c84 <__swsetup_r+0x50>
 8008c60:	2309      	movs	r3, #9
 8008c62:	6033      	str	r3, [r6, #0]
 8008c64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c68:	81a3      	strh	r3, [r4, #12]
 8008c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c6e:	e03e      	b.n	8008cee <__swsetup_r+0xba>
 8008c70:	4b25      	ldr	r3, [pc, #148]	; (8008d08 <__swsetup_r+0xd4>)
 8008c72:	429c      	cmp	r4, r3
 8008c74:	d101      	bne.n	8008c7a <__swsetup_r+0x46>
 8008c76:	68ac      	ldr	r4, [r5, #8]
 8008c78:	e7eb      	b.n	8008c52 <__swsetup_r+0x1e>
 8008c7a:	4b24      	ldr	r3, [pc, #144]	; (8008d0c <__swsetup_r+0xd8>)
 8008c7c:	429c      	cmp	r4, r3
 8008c7e:	bf08      	it	eq
 8008c80:	68ec      	ldreq	r4, [r5, #12]
 8008c82:	e7e6      	b.n	8008c52 <__swsetup_r+0x1e>
 8008c84:	0758      	lsls	r0, r3, #29
 8008c86:	d512      	bpl.n	8008cae <__swsetup_r+0x7a>
 8008c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c8a:	b141      	cbz	r1, 8008c9e <__swsetup_r+0x6a>
 8008c8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c90:	4299      	cmp	r1, r3
 8008c92:	d002      	beq.n	8008c9a <__swsetup_r+0x66>
 8008c94:	4630      	mov	r0, r6
 8008c96:	f000 f991 	bl	8008fbc <_free_r>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	6363      	str	r3, [r4, #52]	; 0x34
 8008c9e:	89a3      	ldrh	r3, [r4, #12]
 8008ca0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ca4:	81a3      	strh	r3, [r4, #12]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	6063      	str	r3, [r4, #4]
 8008caa:	6923      	ldr	r3, [r4, #16]
 8008cac:	6023      	str	r3, [r4, #0]
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	f043 0308 	orr.w	r3, r3, #8
 8008cb4:	81a3      	strh	r3, [r4, #12]
 8008cb6:	6923      	ldr	r3, [r4, #16]
 8008cb8:	b94b      	cbnz	r3, 8008cce <__swsetup_r+0x9a>
 8008cba:	89a3      	ldrh	r3, [r4, #12]
 8008cbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cc4:	d003      	beq.n	8008cce <__swsetup_r+0x9a>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4630      	mov	r0, r6
 8008cca:	f000 f92b 	bl	8008f24 <__smakebuf_r>
 8008cce:	89a0      	ldrh	r0, [r4, #12]
 8008cd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cd4:	f010 0301 	ands.w	r3, r0, #1
 8008cd8:	d00a      	beq.n	8008cf0 <__swsetup_r+0xbc>
 8008cda:	2300      	movs	r3, #0
 8008cdc:	60a3      	str	r3, [r4, #8]
 8008cde:	6963      	ldr	r3, [r4, #20]
 8008ce0:	425b      	negs	r3, r3
 8008ce2:	61a3      	str	r3, [r4, #24]
 8008ce4:	6923      	ldr	r3, [r4, #16]
 8008ce6:	b943      	cbnz	r3, 8008cfa <__swsetup_r+0xc6>
 8008ce8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cec:	d1ba      	bne.n	8008c64 <__swsetup_r+0x30>
 8008cee:	bd70      	pop	{r4, r5, r6, pc}
 8008cf0:	0781      	lsls	r1, r0, #30
 8008cf2:	bf58      	it	pl
 8008cf4:	6963      	ldrpl	r3, [r4, #20]
 8008cf6:	60a3      	str	r3, [r4, #8]
 8008cf8:	e7f4      	b.n	8008ce4 <__swsetup_r+0xb0>
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	e7f7      	b.n	8008cee <__swsetup_r+0xba>
 8008cfe:	bf00      	nop
 8008d00:	200000fc 	.word	0x200000fc
 8008d04:	080091ac 	.word	0x080091ac
 8008d08:	080091cc 	.word	0x080091cc
 8008d0c:	0800918c 	.word	0x0800918c

08008d10 <_close_r>:
 8008d10:	b538      	push	{r3, r4, r5, lr}
 8008d12:	4d06      	ldr	r5, [pc, #24]	; (8008d2c <_close_r+0x1c>)
 8008d14:	2300      	movs	r3, #0
 8008d16:	4604      	mov	r4, r0
 8008d18:	4608      	mov	r0, r1
 8008d1a:	602b      	str	r3, [r5, #0]
 8008d1c:	f7f8 f831 	bl	8000d82 <_close>
 8008d20:	1c43      	adds	r3, r0, #1
 8008d22:	d102      	bne.n	8008d2a <_close_r+0x1a>
 8008d24:	682b      	ldr	r3, [r5, #0]
 8008d26:	b103      	cbz	r3, 8008d2a <_close_r+0x1a>
 8008d28:	6023      	str	r3, [r4, #0]
 8008d2a:	bd38      	pop	{r3, r4, r5, pc}
 8008d2c:	20001f0c 	.word	0x20001f0c

08008d30 <__sflush_r>:
 8008d30:	898a      	ldrh	r2, [r1, #12]
 8008d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d36:	4605      	mov	r5, r0
 8008d38:	0710      	lsls	r0, r2, #28
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	d458      	bmi.n	8008df0 <__sflush_r+0xc0>
 8008d3e:	684b      	ldr	r3, [r1, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	dc05      	bgt.n	8008d50 <__sflush_r+0x20>
 8008d44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	dc02      	bgt.n	8008d50 <__sflush_r+0x20>
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d52:	2e00      	cmp	r6, #0
 8008d54:	d0f9      	beq.n	8008d4a <__sflush_r+0x1a>
 8008d56:	2300      	movs	r3, #0
 8008d58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d5c:	682f      	ldr	r7, [r5, #0]
 8008d5e:	602b      	str	r3, [r5, #0]
 8008d60:	d032      	beq.n	8008dc8 <__sflush_r+0x98>
 8008d62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d64:	89a3      	ldrh	r3, [r4, #12]
 8008d66:	075a      	lsls	r2, r3, #29
 8008d68:	d505      	bpl.n	8008d76 <__sflush_r+0x46>
 8008d6a:	6863      	ldr	r3, [r4, #4]
 8008d6c:	1ac0      	subs	r0, r0, r3
 8008d6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d70:	b10b      	cbz	r3, 8008d76 <__sflush_r+0x46>
 8008d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d74:	1ac0      	subs	r0, r0, r3
 8008d76:	2300      	movs	r3, #0
 8008d78:	4602      	mov	r2, r0
 8008d7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d7c:	6a21      	ldr	r1, [r4, #32]
 8008d7e:	4628      	mov	r0, r5
 8008d80:	47b0      	blx	r6
 8008d82:	1c43      	adds	r3, r0, #1
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	d106      	bne.n	8008d96 <__sflush_r+0x66>
 8008d88:	6829      	ldr	r1, [r5, #0]
 8008d8a:	291d      	cmp	r1, #29
 8008d8c:	d82c      	bhi.n	8008de8 <__sflush_r+0xb8>
 8008d8e:	4a2a      	ldr	r2, [pc, #168]	; (8008e38 <__sflush_r+0x108>)
 8008d90:	40ca      	lsrs	r2, r1
 8008d92:	07d6      	lsls	r6, r2, #31
 8008d94:	d528      	bpl.n	8008de8 <__sflush_r+0xb8>
 8008d96:	2200      	movs	r2, #0
 8008d98:	6062      	str	r2, [r4, #4]
 8008d9a:	04d9      	lsls	r1, r3, #19
 8008d9c:	6922      	ldr	r2, [r4, #16]
 8008d9e:	6022      	str	r2, [r4, #0]
 8008da0:	d504      	bpl.n	8008dac <__sflush_r+0x7c>
 8008da2:	1c42      	adds	r2, r0, #1
 8008da4:	d101      	bne.n	8008daa <__sflush_r+0x7a>
 8008da6:	682b      	ldr	r3, [r5, #0]
 8008da8:	b903      	cbnz	r3, 8008dac <__sflush_r+0x7c>
 8008daa:	6560      	str	r0, [r4, #84]	; 0x54
 8008dac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dae:	602f      	str	r7, [r5, #0]
 8008db0:	2900      	cmp	r1, #0
 8008db2:	d0ca      	beq.n	8008d4a <__sflush_r+0x1a>
 8008db4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008db8:	4299      	cmp	r1, r3
 8008dba:	d002      	beq.n	8008dc2 <__sflush_r+0x92>
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	f000 f8fd 	bl	8008fbc <_free_r>
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	6360      	str	r0, [r4, #52]	; 0x34
 8008dc6:	e7c1      	b.n	8008d4c <__sflush_r+0x1c>
 8008dc8:	6a21      	ldr	r1, [r4, #32]
 8008dca:	2301      	movs	r3, #1
 8008dcc:	4628      	mov	r0, r5
 8008dce:	47b0      	blx	r6
 8008dd0:	1c41      	adds	r1, r0, #1
 8008dd2:	d1c7      	bne.n	8008d64 <__sflush_r+0x34>
 8008dd4:	682b      	ldr	r3, [r5, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d0c4      	beq.n	8008d64 <__sflush_r+0x34>
 8008dda:	2b1d      	cmp	r3, #29
 8008ddc:	d001      	beq.n	8008de2 <__sflush_r+0xb2>
 8008dde:	2b16      	cmp	r3, #22
 8008de0:	d101      	bne.n	8008de6 <__sflush_r+0xb6>
 8008de2:	602f      	str	r7, [r5, #0]
 8008de4:	e7b1      	b.n	8008d4a <__sflush_r+0x1a>
 8008de6:	89a3      	ldrh	r3, [r4, #12]
 8008de8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dec:	81a3      	strh	r3, [r4, #12]
 8008dee:	e7ad      	b.n	8008d4c <__sflush_r+0x1c>
 8008df0:	690f      	ldr	r7, [r1, #16]
 8008df2:	2f00      	cmp	r7, #0
 8008df4:	d0a9      	beq.n	8008d4a <__sflush_r+0x1a>
 8008df6:	0793      	lsls	r3, r2, #30
 8008df8:	680e      	ldr	r6, [r1, #0]
 8008dfa:	bf08      	it	eq
 8008dfc:	694b      	ldreq	r3, [r1, #20]
 8008dfe:	600f      	str	r7, [r1, #0]
 8008e00:	bf18      	it	ne
 8008e02:	2300      	movne	r3, #0
 8008e04:	eba6 0807 	sub.w	r8, r6, r7
 8008e08:	608b      	str	r3, [r1, #8]
 8008e0a:	f1b8 0f00 	cmp.w	r8, #0
 8008e0e:	dd9c      	ble.n	8008d4a <__sflush_r+0x1a>
 8008e10:	6a21      	ldr	r1, [r4, #32]
 8008e12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e14:	4643      	mov	r3, r8
 8008e16:	463a      	mov	r2, r7
 8008e18:	4628      	mov	r0, r5
 8008e1a:	47b0      	blx	r6
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	dc06      	bgt.n	8008e2e <__sflush_r+0xfe>
 8008e20:	89a3      	ldrh	r3, [r4, #12]
 8008e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e26:	81a3      	strh	r3, [r4, #12]
 8008e28:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2c:	e78e      	b.n	8008d4c <__sflush_r+0x1c>
 8008e2e:	4407      	add	r7, r0
 8008e30:	eba8 0800 	sub.w	r8, r8, r0
 8008e34:	e7e9      	b.n	8008e0a <__sflush_r+0xda>
 8008e36:	bf00      	nop
 8008e38:	20400001 	.word	0x20400001

08008e3c <_fflush_r>:
 8008e3c:	b538      	push	{r3, r4, r5, lr}
 8008e3e:	690b      	ldr	r3, [r1, #16]
 8008e40:	4605      	mov	r5, r0
 8008e42:	460c      	mov	r4, r1
 8008e44:	b913      	cbnz	r3, 8008e4c <_fflush_r+0x10>
 8008e46:	2500      	movs	r5, #0
 8008e48:	4628      	mov	r0, r5
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	b118      	cbz	r0, 8008e56 <_fflush_r+0x1a>
 8008e4e:	6983      	ldr	r3, [r0, #24]
 8008e50:	b90b      	cbnz	r3, 8008e56 <_fflush_r+0x1a>
 8008e52:	f7ff fa15 	bl	8008280 <__sinit>
 8008e56:	4b14      	ldr	r3, [pc, #80]	; (8008ea8 <_fflush_r+0x6c>)
 8008e58:	429c      	cmp	r4, r3
 8008e5a:	d11b      	bne.n	8008e94 <_fflush_r+0x58>
 8008e5c:	686c      	ldr	r4, [r5, #4]
 8008e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d0ef      	beq.n	8008e46 <_fflush_r+0xa>
 8008e66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e68:	07d0      	lsls	r0, r2, #31
 8008e6a:	d404      	bmi.n	8008e76 <_fflush_r+0x3a>
 8008e6c:	0599      	lsls	r1, r3, #22
 8008e6e:	d402      	bmi.n	8008e76 <_fflush_r+0x3a>
 8008e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e72:	f7ff faa3 	bl	80083bc <__retarget_lock_acquire_recursive>
 8008e76:	4628      	mov	r0, r5
 8008e78:	4621      	mov	r1, r4
 8008e7a:	f7ff ff59 	bl	8008d30 <__sflush_r>
 8008e7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e80:	07da      	lsls	r2, r3, #31
 8008e82:	4605      	mov	r5, r0
 8008e84:	d4e0      	bmi.n	8008e48 <_fflush_r+0xc>
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	059b      	lsls	r3, r3, #22
 8008e8a:	d4dd      	bmi.n	8008e48 <_fflush_r+0xc>
 8008e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e8e:	f7ff fa96 	bl	80083be <__retarget_lock_release_recursive>
 8008e92:	e7d9      	b.n	8008e48 <_fflush_r+0xc>
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <_fflush_r+0x70>)
 8008e96:	429c      	cmp	r4, r3
 8008e98:	d101      	bne.n	8008e9e <_fflush_r+0x62>
 8008e9a:	68ac      	ldr	r4, [r5, #8]
 8008e9c:	e7df      	b.n	8008e5e <_fflush_r+0x22>
 8008e9e:	4b04      	ldr	r3, [pc, #16]	; (8008eb0 <_fflush_r+0x74>)
 8008ea0:	429c      	cmp	r4, r3
 8008ea2:	bf08      	it	eq
 8008ea4:	68ec      	ldreq	r4, [r5, #12]
 8008ea6:	e7da      	b.n	8008e5e <_fflush_r+0x22>
 8008ea8:	080091ac 	.word	0x080091ac
 8008eac:	080091cc 	.word	0x080091cc
 8008eb0:	0800918c 	.word	0x0800918c

08008eb4 <_lseek_r>:
 8008eb4:	b538      	push	{r3, r4, r5, lr}
 8008eb6:	4d07      	ldr	r5, [pc, #28]	; (8008ed4 <_lseek_r+0x20>)
 8008eb8:	4604      	mov	r4, r0
 8008eba:	4608      	mov	r0, r1
 8008ebc:	4611      	mov	r1, r2
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	602a      	str	r2, [r5, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f7f7 ff84 	bl	8000dd0 <_lseek>
 8008ec8:	1c43      	adds	r3, r0, #1
 8008eca:	d102      	bne.n	8008ed2 <_lseek_r+0x1e>
 8008ecc:	682b      	ldr	r3, [r5, #0]
 8008ece:	b103      	cbz	r3, 8008ed2 <_lseek_r+0x1e>
 8008ed0:	6023      	str	r3, [r4, #0]
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	20001f0c 	.word	0x20001f0c

08008ed8 <__swhatbuf_r>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	460e      	mov	r6, r1
 8008edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee0:	2900      	cmp	r1, #0
 8008ee2:	b096      	sub	sp, #88	; 0x58
 8008ee4:	4614      	mov	r4, r2
 8008ee6:	461d      	mov	r5, r3
 8008ee8:	da08      	bge.n	8008efc <__swhatbuf_r+0x24>
 8008eea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	602a      	str	r2, [r5, #0]
 8008ef2:	061a      	lsls	r2, r3, #24
 8008ef4:	d410      	bmi.n	8008f18 <__swhatbuf_r+0x40>
 8008ef6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008efa:	e00e      	b.n	8008f1a <__swhatbuf_r+0x42>
 8008efc:	466a      	mov	r2, sp
 8008efe:	f000 f8bb 	bl	8009078 <_fstat_r>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	dbf1      	blt.n	8008eea <__swhatbuf_r+0x12>
 8008f06:	9a01      	ldr	r2, [sp, #4]
 8008f08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f10:	425a      	negs	r2, r3
 8008f12:	415a      	adcs	r2, r3
 8008f14:	602a      	str	r2, [r5, #0]
 8008f16:	e7ee      	b.n	8008ef6 <__swhatbuf_r+0x1e>
 8008f18:	2340      	movs	r3, #64	; 0x40
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	b016      	add	sp, #88	; 0x58
 8008f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f24 <__smakebuf_r>:
 8008f24:	898b      	ldrh	r3, [r1, #12]
 8008f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f28:	079d      	lsls	r5, r3, #30
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	d507      	bpl.n	8008f40 <__smakebuf_r+0x1c>
 8008f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	6123      	str	r3, [r4, #16]
 8008f38:	2301      	movs	r3, #1
 8008f3a:	6163      	str	r3, [r4, #20]
 8008f3c:	b002      	add	sp, #8
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	ab01      	add	r3, sp, #4
 8008f42:	466a      	mov	r2, sp
 8008f44:	f7ff ffc8 	bl	8008ed8 <__swhatbuf_r>
 8008f48:	9900      	ldr	r1, [sp, #0]
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f7ff fa57 	bl	8008400 <_malloc_r>
 8008f52:	b948      	cbnz	r0, 8008f68 <__smakebuf_r+0x44>
 8008f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f58:	059a      	lsls	r2, r3, #22
 8008f5a:	d4ef      	bmi.n	8008f3c <__smakebuf_r+0x18>
 8008f5c:	f023 0303 	bic.w	r3, r3, #3
 8008f60:	f043 0302 	orr.w	r3, r3, #2
 8008f64:	81a3      	strh	r3, [r4, #12]
 8008f66:	e7e3      	b.n	8008f30 <__smakebuf_r+0xc>
 8008f68:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <__smakebuf_r+0x7c>)
 8008f6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f6c:	89a3      	ldrh	r3, [r4, #12]
 8008f6e:	6020      	str	r0, [r4, #0]
 8008f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f74:	81a3      	strh	r3, [r4, #12]
 8008f76:	9b00      	ldr	r3, [sp, #0]
 8008f78:	6163      	str	r3, [r4, #20]
 8008f7a:	9b01      	ldr	r3, [sp, #4]
 8008f7c:	6120      	str	r0, [r4, #16]
 8008f7e:	b15b      	cbz	r3, 8008f98 <__smakebuf_r+0x74>
 8008f80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f84:	4630      	mov	r0, r6
 8008f86:	f000 f889 	bl	800909c <_isatty_r>
 8008f8a:	b128      	cbz	r0, 8008f98 <__smakebuf_r+0x74>
 8008f8c:	89a3      	ldrh	r3, [r4, #12]
 8008f8e:	f023 0303 	bic.w	r3, r3, #3
 8008f92:	f043 0301 	orr.w	r3, r3, #1
 8008f96:	81a3      	strh	r3, [r4, #12]
 8008f98:	89a0      	ldrh	r0, [r4, #12]
 8008f9a:	4305      	orrs	r5, r0
 8008f9c:	81a5      	strh	r5, [r4, #12]
 8008f9e:	e7cd      	b.n	8008f3c <__smakebuf_r+0x18>
 8008fa0:	08008219 	.word	0x08008219

08008fa4 <__malloc_lock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__malloc_lock+0x8>)
 8008fa6:	f7ff ba09 	b.w	80083bc <__retarget_lock_acquire_recursive>
 8008faa:	bf00      	nop
 8008fac:	20001f00 	.word	0x20001f00

08008fb0 <__malloc_unlock>:
 8008fb0:	4801      	ldr	r0, [pc, #4]	; (8008fb8 <__malloc_unlock+0x8>)
 8008fb2:	f7ff ba04 	b.w	80083be <__retarget_lock_release_recursive>
 8008fb6:	bf00      	nop
 8008fb8:	20001f00 	.word	0x20001f00

08008fbc <_free_r>:
 8008fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008fbe:	2900      	cmp	r1, #0
 8008fc0:	d044      	beq.n	800904c <_free_r+0x90>
 8008fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fc6:	9001      	str	r0, [sp, #4]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	f1a1 0404 	sub.w	r4, r1, #4
 8008fce:	bfb8      	it	lt
 8008fd0:	18e4      	addlt	r4, r4, r3
 8008fd2:	f7ff ffe7 	bl	8008fa4 <__malloc_lock>
 8008fd6:	4a1e      	ldr	r2, [pc, #120]	; (8009050 <_free_r+0x94>)
 8008fd8:	9801      	ldr	r0, [sp, #4]
 8008fda:	6813      	ldr	r3, [r2, #0]
 8008fdc:	b933      	cbnz	r3, 8008fec <_free_r+0x30>
 8008fde:	6063      	str	r3, [r4, #4]
 8008fe0:	6014      	str	r4, [r2, #0]
 8008fe2:	b003      	add	sp, #12
 8008fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fe8:	f7ff bfe2 	b.w	8008fb0 <__malloc_unlock>
 8008fec:	42a3      	cmp	r3, r4
 8008fee:	d908      	bls.n	8009002 <_free_r+0x46>
 8008ff0:	6825      	ldr	r5, [r4, #0]
 8008ff2:	1961      	adds	r1, r4, r5
 8008ff4:	428b      	cmp	r3, r1
 8008ff6:	bf01      	itttt	eq
 8008ff8:	6819      	ldreq	r1, [r3, #0]
 8008ffa:	685b      	ldreq	r3, [r3, #4]
 8008ffc:	1949      	addeq	r1, r1, r5
 8008ffe:	6021      	streq	r1, [r4, #0]
 8009000:	e7ed      	b.n	8008fde <_free_r+0x22>
 8009002:	461a      	mov	r2, r3
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	b10b      	cbz	r3, 800900c <_free_r+0x50>
 8009008:	42a3      	cmp	r3, r4
 800900a:	d9fa      	bls.n	8009002 <_free_r+0x46>
 800900c:	6811      	ldr	r1, [r2, #0]
 800900e:	1855      	adds	r5, r2, r1
 8009010:	42a5      	cmp	r5, r4
 8009012:	d10b      	bne.n	800902c <_free_r+0x70>
 8009014:	6824      	ldr	r4, [r4, #0]
 8009016:	4421      	add	r1, r4
 8009018:	1854      	adds	r4, r2, r1
 800901a:	42a3      	cmp	r3, r4
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	d1e0      	bne.n	8008fe2 <_free_r+0x26>
 8009020:	681c      	ldr	r4, [r3, #0]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	6053      	str	r3, [r2, #4]
 8009026:	4421      	add	r1, r4
 8009028:	6011      	str	r1, [r2, #0]
 800902a:	e7da      	b.n	8008fe2 <_free_r+0x26>
 800902c:	d902      	bls.n	8009034 <_free_r+0x78>
 800902e:	230c      	movs	r3, #12
 8009030:	6003      	str	r3, [r0, #0]
 8009032:	e7d6      	b.n	8008fe2 <_free_r+0x26>
 8009034:	6825      	ldr	r5, [r4, #0]
 8009036:	1961      	adds	r1, r4, r5
 8009038:	428b      	cmp	r3, r1
 800903a:	bf04      	itt	eq
 800903c:	6819      	ldreq	r1, [r3, #0]
 800903e:	685b      	ldreq	r3, [r3, #4]
 8009040:	6063      	str	r3, [r4, #4]
 8009042:	bf04      	itt	eq
 8009044:	1949      	addeq	r1, r1, r5
 8009046:	6021      	streq	r1, [r4, #0]
 8009048:	6054      	str	r4, [r2, #4]
 800904a:	e7ca      	b.n	8008fe2 <_free_r+0x26>
 800904c:	b003      	add	sp, #12
 800904e:	bd30      	pop	{r4, r5, pc}
 8009050:	20001f04 	.word	0x20001f04

08009054 <_read_r>:
 8009054:	b538      	push	{r3, r4, r5, lr}
 8009056:	4d07      	ldr	r5, [pc, #28]	; (8009074 <_read_r+0x20>)
 8009058:	4604      	mov	r4, r0
 800905a:	4608      	mov	r0, r1
 800905c:	4611      	mov	r1, r2
 800905e:	2200      	movs	r2, #0
 8009060:	602a      	str	r2, [r5, #0]
 8009062:	461a      	mov	r2, r3
 8009064:	f7f7 fe70 	bl	8000d48 <_read>
 8009068:	1c43      	adds	r3, r0, #1
 800906a:	d102      	bne.n	8009072 <_read_r+0x1e>
 800906c:	682b      	ldr	r3, [r5, #0]
 800906e:	b103      	cbz	r3, 8009072 <_read_r+0x1e>
 8009070:	6023      	str	r3, [r4, #0]
 8009072:	bd38      	pop	{r3, r4, r5, pc}
 8009074:	20001f0c 	.word	0x20001f0c

08009078 <_fstat_r>:
 8009078:	b538      	push	{r3, r4, r5, lr}
 800907a:	4d07      	ldr	r5, [pc, #28]	; (8009098 <_fstat_r+0x20>)
 800907c:	2300      	movs	r3, #0
 800907e:	4604      	mov	r4, r0
 8009080:	4608      	mov	r0, r1
 8009082:	4611      	mov	r1, r2
 8009084:	602b      	str	r3, [r5, #0]
 8009086:	f7f7 fe88 	bl	8000d9a <_fstat>
 800908a:	1c43      	adds	r3, r0, #1
 800908c:	d102      	bne.n	8009094 <_fstat_r+0x1c>
 800908e:	682b      	ldr	r3, [r5, #0]
 8009090:	b103      	cbz	r3, 8009094 <_fstat_r+0x1c>
 8009092:	6023      	str	r3, [r4, #0]
 8009094:	bd38      	pop	{r3, r4, r5, pc}
 8009096:	bf00      	nop
 8009098:	20001f0c 	.word	0x20001f0c

0800909c <_isatty_r>:
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	4d06      	ldr	r5, [pc, #24]	; (80090b8 <_isatty_r+0x1c>)
 80090a0:	2300      	movs	r3, #0
 80090a2:	4604      	mov	r4, r0
 80090a4:	4608      	mov	r0, r1
 80090a6:	602b      	str	r3, [r5, #0]
 80090a8:	f7f7 fe87 	bl	8000dba <_isatty>
 80090ac:	1c43      	adds	r3, r0, #1
 80090ae:	d102      	bne.n	80090b6 <_isatty_r+0x1a>
 80090b0:	682b      	ldr	r3, [r5, #0]
 80090b2:	b103      	cbz	r3, 80090b6 <_isatty_r+0x1a>
 80090b4:	6023      	str	r3, [r4, #0]
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	20001f0c 	.word	0x20001f0c

080090bc <_init>:
 80090bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090be:	bf00      	nop
 80090c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c2:	bc08      	pop	{r3}
 80090c4:	469e      	mov	lr, r3
 80090c6:	4770      	bx	lr

080090c8 <_fini>:
 80090c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ca:	bf00      	nop
 80090cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ce:	bc08      	pop	{r3}
 80090d0:	469e      	mov	lr, r3
 80090d2:	4770      	bx	lr
