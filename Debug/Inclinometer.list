
Inclinometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  080090c0  080090c0  000190c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009200  08009200  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08009200  08009200  00019200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009208  08009208  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009208  08009208  00019208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800920c  0800920c  0001920c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08009210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001db0  20000160  08009370  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f10  08009370  00021f10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001211a  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331f  00000000  00000000  000322aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  000355d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  000364a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001983b  00000000  00000000  000371e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012eae  00000000  00000000  00050a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac0b  00000000  00000000  000638d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee4dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  000ee52c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000160 	.word	0x20000160
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080090a8 	.word	0x080090a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000164 	.word	0x20000164
 80001dc:	080090a8 	.word	0x080090a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <ADXL355_init>:
#include "ADXL355_SPI.h"

#define SPI_TIMEOUT 1000

uint8_t ADXL355_init(ADXL355_type *device, SPI_HandleTypeDef *hspi)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
	device->hspi				= hspi;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	683a      	ldr	r2, [r7, #0]
 8000592:	601a      	str	r2, [r3, #0]

	device->acceleration_x_g 	= 0.0f;
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	605a      	str	r2, [r3, #4]
	device->acceleration_y_g 	= 0.0f;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f04f 0200 	mov.w	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
	device->acceleration_z_g 	= 0.0f;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f04f 0200 	mov.w	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]

	device->temperature_deg_c	= 0.0f;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	f04f 0200 	mov.w	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]

	uint8_t errNum = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	// check if the correct device is connected
	uint8_t rxdata;
	status = ADXL355_ReadRegister(device, ADXL355_DEVID_ID, &rxdata);
 80005b8:	f107 030d 	add.w	r3, r7, #13
 80005bc:	461a      	mov	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	6878      	ldr	r0, [r7, #4]
 80005c2:	f000 f816 	bl	80005f2 <ADXL355_ReadRegister>
 80005c6:	4603      	mov	r3, r0
 80005c8:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80005ca:	7bbb      	ldrb	r3, [r7, #14]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	7bfb      	ldrb	r3, [r7, #15]
 80005da:	4413      	add	r3, r2
 80005dc:	73fb      	strb	r3, [r7, #15]

	if (rxdata != ADXL355_DEVID_ID_VAL){
 80005de:	7b7b      	ldrb	r3, [r7, #13]
 80005e0:	2bad      	cmp	r3, #173	; 0xad
 80005e2:	d001      	beq.n	80005e8 <ADXL355_init+0x64>
		return rxdata;
 80005e4:	7b7b      	ldrb	r3, [r7, #13]
 80005e6:	e000      	b.n	80005ea <ADXL355_init+0x66>
	}
	else
	{
		return rxdata;
 80005e8:	7b7b      	ldrb	r3, [r7, #13]
	}
	//return 0;
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3710      	adds	r7, #16
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <ADXL355_ReadRegister>:
//}

// low level functions

HAL_StatusTypeDef ADXL355_ReadRegister(ADXL355_type *device, uint8_t txdata, uint8_t *rxdata)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b086      	sub	sp, #24
 80005f6:	af02      	add	r7, sp, #8
 80005f8:	60f8      	str	r0, [r7, #12]
 80005fa:	460b      	mov	r3, r1
 80005fc:	607a      	str	r2, [r7, #4]
 80005fe:	72fb      	strb	r3, [r7, #11]
	return HAL_SPI_TransmitReceive(device->hspi, &txdata, rxdata, 1, SPI_TIMEOUT); //(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	6818      	ldr	r0, [r3, #0]
 8000604:	f107 010b 	add.w	r1, r7, #11
 8000608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	2301      	movs	r3, #1
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	f003 f9f6 	bl	8003a02 <HAL_SPI_TransmitReceive>
 8000616:	4603      	mov	r3, r0
}
 8000618:	4618      	mov	r0, r3
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000626:	f000 fc49 	bl	8000ebc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062a:	f000 f84d 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062e:	f000 f947 	bl	80008c0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000632:	f000 f8b1 	bl	8000798 <MX_SPI2_Init>
  MX_DMA_Init();
 8000636:	f000 f91b 	bl	8000870 <MX_DMA_Init>
  MX_SPI5_Init();
 800063a:	f000 f8e3 	bl	8000804 <MX_SPI5_Init>
  MX_USB_DEVICE_Init();
 800063e:	f007 f863 	bl	8007708 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  ADXL355_type adxl355;
  for(int i = 0; i < 5; i++){
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
 8000646:	e00a      	b.n	800065e <main+0x3e>
	  printf("Starting in %i...\n\r", i);
 8000648:	69f9      	ldr	r1, [r7, #28]
 800064a:	481a      	ldr	r0, [pc, #104]	; (80006b4 <main+0x94>)
 800064c:	f007 fd9e 	bl	800818c <iprintf>
	  HAL_Delay(1000);
 8000650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000654:	f000 fca4 	bl	8000fa0 <HAL_Delay>
  for(int i = 0; i < 5; i++){
 8000658:	69fb      	ldr	r3, [r7, #28]
 800065a:	3301      	adds	r3, #1
 800065c:	61fb      	str	r3, [r7, #28]
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	2b04      	cmp	r3, #4
 8000662:	ddf1      	ble.n	8000648 <main+0x28>
  }
  printf("Requesting data from ADXL355... \n\r");
 8000664:	4814      	ldr	r0, [pc, #80]	; (80006b8 <main+0x98>)
 8000666:	f007 fd91 	bl	800818c <iprintf>
  uint8_t status;
  status = ADXL355_init(&adxl355, &hspi2);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4913      	ldr	r1, [pc, #76]	; (80006bc <main+0x9c>)
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ff88 	bl	8000584 <ADXL355_init>
 8000674:	4603      	mov	r3, r0
 8000676:	76fb      	strb	r3, [r7, #27]
  printf("Status: %i\n\r", status);
 8000678:	7efb      	ldrb	r3, [r7, #27]
 800067a:	4619      	mov	r1, r3
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <main+0xa0>)
 800067e:	f007 fd85 	bl	800818c <iprintf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(2000);
 8000682:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000686:	f000 fc8b 	bl	8000fa0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);  // PC13 = LED
 800068a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800068e:	480d      	ldr	r0, [pc, #52]	; (80006c4 <main+0xa4>)
 8000690:	f001 fa43 	bl	8001b1a <HAL_GPIO_TogglePin>
	printf("Requesting data from ADXL355... \n\r");
 8000694:	4808      	ldr	r0, [pc, #32]	; (80006b8 <main+0x98>)
 8000696:	f007 fd79 	bl	800818c <iprintf>
	status = ADXL355_init(&adxl355, &hspi2);
 800069a:	1d3b      	adds	r3, r7, #4
 800069c:	4907      	ldr	r1, [pc, #28]	; (80006bc <main+0x9c>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f7ff ff70 	bl	8000584 <ADXL355_init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	76fb      	strb	r3, [r7, #27]
	printf("Status: %i\n\r", status);
 80006a8:	7efb      	ldrb	r3, [r7, #27]
 80006aa:	4619      	mov	r1, r3
 80006ac:	4804      	ldr	r0, [pc, #16]	; (80006c0 <main+0xa0>)
 80006ae:	f007 fd6d 	bl	800818c <iprintf>
	HAL_Delay(2000);
 80006b2:	e7e6      	b.n	8000682 <main+0x62>
 80006b4:	080090c0 	.word	0x080090c0
 80006b8:	080090d4 	.word	0x080090d4
 80006bc:	2000017c 	.word	0x2000017c
 80006c0:	080090f8 	.word	0x080090f8
 80006c4:	40020800 	.word	0x40020800

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	; 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	; 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f007 fd50 	bl	800817c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <SystemClock_Config+0xc8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f4:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemClock_Config+0xc8>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	; 0x40
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <SystemClock_Config+0xc8>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b21      	ldr	r3, [pc, #132]	; (8000794 <SystemClock_Config+0xcc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a20      	ldr	r2, [pc, #128]	; (8000794 <SystemClock_Config+0xcc>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1e      	ldr	r3, [pc, #120]	; (8000794 <SystemClock_Config+0xcc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000738:	2319      	movs	r3, #25
 800073a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800073c:	23c0      	movs	r3, #192	; 0xc0
 800073e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000744:	2304      	movs	r3, #4
 8000746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f002 fc9f 	bl	8003090 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f95d 	bl	8000a16 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2103      	movs	r1, #3
 8000778:	4618      	mov	r0, r3
 800077a:	f002 ff01 	bl	8003580 <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000784:	f000 f947 	bl	8000a16 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	; 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MX_SPI2_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	; (8000800 <MX_SPI2_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	; (80007fc <MX_SPI2_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_SPI2_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	; (80007fc <MX_SPI2_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_SPI2_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_SPI2_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_SPI2_Init+0x64>)
 80007c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_SPI2_Init+0x64>)
 80007cc:	2238      	movs	r2, #56	; 0x38
 80007ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <MX_SPI2_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_SPI2_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	; (80007fc <MX_SPI2_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_SPI2_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_SPI2_Init+0x64>)
 80007ea:	f003 f881 	bl	80038f0 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 f90f 	bl	8000a16 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000017c 	.word	0x2000017c
 8000800:	40003800 	.word	0x40003800

08000804 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_SPI5_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	; (800086c <MX_SPI5_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_SPI5_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_SPI5_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_SPI5_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_SPI5_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI5_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_SPI5_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_SPI5_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_SPI5_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_SPI5_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_SPI5_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_SPI5_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_SPI5_Init+0x64>)
 8000856:	f003 f84b 	bl	80038f0 <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 f8d9 	bl	8000a16 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200001d4 	.word	0x200001d4
 800086c:	40015000 	.word	0x40015000

08000870 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <MX_DMA_Init+0x4c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <MX_DMA_Init+0x4c>)
 8000880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <MX_DMA_Init+0x4c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	200e      	movs	r0, #14
 8000898:	f000 fc81 	bl	800119e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800089c:	200e      	movs	r0, #14
 800089e:	f000 fc9a 	bl	80011d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2100      	movs	r1, #0
 80008a6:	200f      	movs	r0, #15
 80008a8:	f000 fc79 	bl	800119e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80008ac:	200f      	movs	r0, #15
 80008ae:	f000 fc92 	bl	80011d6 <HAL_NVIC_EnableIRQ>

}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b42      	ldr	r3, [pc, #264]	; (80009e4 <MX_GPIO_Init+0x124>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a41      	ldr	r2, [pc, #260]	; (80009e4 <MX_GPIO_Init+0x124>)
 80008e0:	f043 0304 	orr.w	r3, r3, #4
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <MX_GPIO_Init+0x124>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0304 	and.w	r3, r3, #4
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b3b      	ldr	r3, [pc, #236]	; (80009e4 <MX_GPIO_Init+0x124>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a3a      	ldr	r2, [pc, #232]	; (80009e4 <MX_GPIO_Init+0x124>)
 80008fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <MX_GPIO_Init+0x124>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b34      	ldr	r3, [pc, #208]	; (80009e4 <MX_GPIO_Init+0x124>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a33      	ldr	r2, [pc, #204]	; (80009e4 <MX_GPIO_Init+0x124>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <MX_GPIO_Init+0x124>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b2d      	ldr	r3, [pc, #180]	; (80009e4 <MX_GPIO_Init+0x124>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a2c      	ldr	r2, [pc, #176]	; (80009e4 <MX_GPIO_Init+0x124>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <MX_GPIO_Init+0x124>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094c:	4826      	ldr	r0, [pc, #152]	; (80009e8 <MX_GPIO_Init+0x128>)
 800094e:	f001 f8cb 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2113      	movs	r1, #19
 8000956:	4825      	ldr	r0, [pc, #148]	; (80009ec <MX_GPIO_Init+0x12c>)
 8000958:	f001 f8c6 	bl	8001ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800095c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4619      	mov	r1, r3
 8000974:	481c      	ldr	r0, [pc, #112]	; (80009e8 <MX_GPIO_Init+0x128>)
 8000976:	f000 ff33 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800097a:	2313      	movs	r3, #19
 800097c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097e:	2301      	movs	r3, #1
 8000980:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	4816      	ldr	r0, [pc, #88]	; (80009ec <MX_GPIO_Init+0x12c>)
 8000992:	f000 ff25 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4811      	ldr	r0, [pc, #68]	; (80009f0 <MX_GPIO_Init+0x130>)
 80009aa:	f000 ff19 	bl	80017e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	480a      	ldr	r0, [pc, #40]	; (80009f0 <MX_GPIO_Init+0x130>)
 80009c6:	f000 ff0b 	bl	80017e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2017      	movs	r0, #23
 80009d0:	f000 fbe5 	bl	800119e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009d4:	2017      	movs	r0, #23
 80009d6:	f000 fbfe 	bl	80011d6 <HAL_NVIC_EnableIRQ>

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020800 	.word	0x40020800
 80009ec:	40020000 	.word	0x40020000
 80009f0:	40020400 	.word	0x40020400

080009f4 <_write>:

/* USER CODE BEGIN 4 */
// redirect printf to USB
int _write(int file, char *ptr, int len) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
	CDC_Transmit_FS((uint8_t*) ptr, len); return len;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4619      	mov	r1, r3
 8000a06:	68b8      	ldr	r0, [r7, #8]
 8000a08:	f006 ff3c 	bl	8007884 <CDC_Transmit_FS>
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1a:	b672      	cpsid	i
}
 8000a1c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <Error_Handler+0x8>

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08c      	sub	sp, #48	; 0x30
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a78      	ldr	r2, [pc, #480]	; (8000c70 <HAL_SPI_MspInit+0x200>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	f040 809a 	bne.w	8000bc8 <HAL_SPI_MspInit+0x158>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	61bb      	str	r3, [r7, #24]
 8000a98:	4b76      	ldr	r3, [pc, #472]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9c:	4a75      	ldr	r2, [pc, #468]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa2:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa4:	4b73      	ldr	r3, [pc, #460]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aac:	61bb      	str	r3, [r7, #24]
 8000aae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	4b6f      	ldr	r3, [pc, #444]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab8:	4a6e      	ldr	r2, [pc, #440]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000aba:	f043 0302 	orr.w	r3, r3, #2
 8000abe:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac0:	4b6c      	ldr	r3, [pc, #432]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	617b      	str	r3, [r7, #20]
 8000aca:	697b      	ldr	r3, [r7, #20]
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15;
 8000acc:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8000ad0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ade:	2305      	movs	r3, #5
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 031c 	add.w	r3, r7, #28
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4863      	ldr	r0, [pc, #396]	; (8000c78 <HAL_SPI_MspInit+0x208>)
 8000aea:	f000 fe79 	bl	80017e0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000aee:	4b63      	ldr	r3, [pc, #396]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000af0:	4a63      	ldr	r2, [pc, #396]	; (8000c80 <HAL_SPI_MspInit+0x210>)
 8000af2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000af4:	4b61      	ldr	r3, [pc, #388]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000afa:	4b60      	ldr	r3, [pc, #384]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000afc:	2240      	movs	r2, #64	; 0x40
 8000afe:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b00:	4b5e      	ldr	r3, [pc, #376]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b06:	4b5d      	ldr	r3, [pc, #372]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0c:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b0e:	4b5b      	ldr	r3, [pc, #364]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b14:	4b59      	ldr	r3, [pc, #356]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000b1a:	4b58      	ldr	r3, [pc, #352]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b20:	4b56      	ldr	r3, [pc, #344]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b26:	4b55      	ldr	r3, [pc, #340]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b28:	2204      	movs	r2, #4
 8000b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b2c:	4b53      	ldr	r3, [pc, #332]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b2e:	2203      	movs	r2, #3
 8000b30:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b32:	4b52      	ldr	r3, [pc, #328]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b38:	4b50      	ldr	r3, [pc, #320]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000b3e:	484f      	ldr	r0, [pc, #316]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b40:	f000 fb64 	bl	800120c <HAL_DMA_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_SPI_MspInit+0xde>
    {
      Error_Handler();
 8000b4a:	f7ff ff64 	bl	8000a16 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a4a      	ldr	r2, [pc, #296]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b52:	649a      	str	r2, [r3, #72]	; 0x48
 8000b54:	4a49      	ldr	r2, [pc, #292]	; (8000c7c <HAL_SPI_MspInit+0x20c>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8000b5a:	4b4a      	ldr	r3, [pc, #296]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000b5c:	4a4a      	ldr	r2, [pc, #296]	; (8000c88 <HAL_SPI_MspInit+0x218>)
 8000b5e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8000b60:	4b48      	ldr	r3, [pc, #288]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b66:	4b47      	ldr	r3, [pc, #284]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b6c:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b72:	4b44      	ldr	r3, [pc, #272]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000b74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b78:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b7a:	4b42      	ldr	r3, [pc, #264]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b80:	4b40      	ldr	r3, [pc, #256]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000b86:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b8c:	4b3d      	ldr	r3, [pc, #244]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b92:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000b94:	2204      	movs	r2, #4
 8000b96:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b98:	4b3a      	ldr	r3, [pc, #232]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000b9a:	2203      	movs	r2, #3
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b9e:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ba4:	4b37      	ldr	r3, [pc, #220]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000baa:	4836      	ldr	r0, [pc, #216]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000bac:	f000 fb2e 	bl	800120c <HAL_DMA_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <HAL_SPI_MspInit+0x14a>
    {
      Error_Handler();
 8000bb6:	f7ff ff2e 	bl	8000a16 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4a31      	ldr	r2, [pc, #196]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000bbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bc0:	4a30      	ldr	r2, [pc, #192]	; (8000c84 <HAL_SPI_MspInit+0x214>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000bc6:	e04f      	b.n	8000c68 <HAL_SPI_MspInit+0x1f8>
  else if(hspi->Instance==SPI5)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <HAL_SPI_MspInit+0x21c>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d14a      	bne.n	8000c68 <HAL_SPI_MspInit+0x1f8>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bda:	4a26      	ldr	r2, [pc, #152]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000be0:	6453      	str	r3, [r2, #68]	; 0x44
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a18      	ldr	r2, [pc, #96]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b16      	ldr	r3, [pc, #88]	; (8000c74 <HAL_SPI_MspInit+0x204>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c32:	2303      	movs	r3, #3
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000c36:	2306      	movs	r3, #6
 8000c38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	480d      	ldr	r0, [pc, #52]	; (8000c78 <HAL_SPI_MspInit+0x208>)
 8000c42:	f000 fdcd 	bl	80017e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI5;
 8000c58:	2306      	movs	r3, #6
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	480b      	ldr	r0, [pc, #44]	; (8000c90 <HAL_SPI_MspInit+0x220>)
 8000c64:	f000 fdbc 	bl	80017e0 <HAL_GPIO_Init>
}
 8000c68:	bf00      	nop
 8000c6a:	3730      	adds	r7, #48	; 0x30
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40003800 	.word	0x40003800
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020400 	.word	0x40020400
 8000c7c:	2000022c 	.word	0x2000022c
 8000c80:	40026070 	.word	0x40026070
 8000c84:	2000028c 	.word	0x2000028c
 8000c88:	40026058 	.word	0x40026058
 8000c8c:	40015000 	.word	0x40015000
 8000c90:	40020000 	.word	0x40020000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ce0:	f000 f93e 	bl	8000f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000cec:	4802      	ldr	r0, [pc, #8]	; (8000cf8 <DMA1_Stream3_IRQHandler+0x10>)
 8000cee:	f000 fb3b 	bl	8001368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000028c 	.word	0x2000028c

08000cfc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000d00:	4802      	ldr	r0, [pc, #8]	; (8000d0c <DMA1_Stream4_IRQHandler+0x10>)
 8000d02:	f000 fb31 	bl	8001368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000022c 	.word	0x2000022c

08000d10 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000d14:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d18:	f000 ff1a 	bl	8001b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <OTG_FS_IRQHandler+0x10>)
 8000d26:	f001 f886 	bl	8001e36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200017d4 	.word	0x200017d4

08000d34 <_read>:
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b086      	sub	sp, #24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	e00a      	b.n	8000d5c <_read+0x28>
 8000d46:	f3af 8000 	nop.w
 8000d4a:	4601      	mov	r1, r0
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	1c5a      	adds	r2, r3, #1
 8000d50:	60ba      	str	r2, [r7, #8]
 8000d52:	b2ca      	uxtb	r2, r1
 8000d54:	701a      	strb	r2, [r3, #0]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	dbf0      	blt.n	8000d46 <_read+0x12>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4618      	mov	r0, r3
 8000d68:	3718      	adds	r7, #24
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <_close>:
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr

08000d86 <_fstat>:
 8000d86:	b480      	push	{r7}
 8000d88:	b083      	sub	sp, #12
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
 8000d8e:	6039      	str	r1, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <_isatty>:
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	2301      	movs	r3, #1
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <_lseek>:
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	60f8      	str	r0, [r7, #12]
 8000dc4:	60b9      	str	r1, [r7, #8]
 8000dc6:	607a      	str	r2, [r7, #4]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <_sbrk>:
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	4a14      	ldr	r2, [pc, #80]	; (8000e34 <_sbrk+0x5c>)
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <_sbrk+0x60>)
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	617b      	str	r3, [r7, #20]
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	613b      	str	r3, [r7, #16]
 8000dec:	4b13      	ldr	r3, [pc, #76]	; (8000e3c <_sbrk+0x64>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d102      	bne.n	8000dfa <_sbrk+0x22>
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <_sbrk+0x64>)
 8000df6:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <_sbrk+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d207      	bcs.n	8000e18 <_sbrk+0x40>
 8000e08:	f007 f98e 	bl	8008128 <__errno>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	220c      	movs	r2, #12
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	f04f 33ff 	mov.w	r3, #4294967295
 8000e16:	e009      	b.n	8000e2c <_sbrk+0x54>
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <_sbrk+0x64>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <_sbrk+0x64>)
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20020000 	.word	0x20020000
 8000e38:	00000400 	.word	0x00000400
 8000e3c:	200002ec 	.word	0x200002ec
 8000e40:	20001f10 	.word	0x20001f10

08000e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <SystemInit+0x20>)
 8000e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <SystemInit+0x20>)
 8000e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <Reset_Handler>:
 8000e68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea0 <LoopFillZerobss+0x12>
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <LoopFillZerobss+0x16>)
 8000e6e:	490e      	ldr	r1, [pc, #56]	; (8000ea8 <LoopFillZerobss+0x1a>)
 8000e70:	4a0e      	ldr	r2, [pc, #56]	; (8000eac <LoopFillZerobss+0x1e>)
 8000e72:	2300      	movs	r3, #0
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:
 8000e76:	58d4      	ldr	r4, [r2, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:
 8000e7c:	18c4      	adds	r4, r0, r3
 8000e7e:	428c      	cmp	r4, r1
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoopFillZerobss+0x22>)
 8000e84:	4c0b      	ldr	r4, [pc, #44]	; (8000eb4 <LoopFillZerobss+0x26>)
 8000e86:	2300      	movs	r3, #0
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:
 8000e8e:	42a2      	cmp	r2, r4
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>
 8000e92:	f7ff ffd7 	bl	8000e44 <SystemInit>
 8000e96:	f007 f94d 	bl	8008134 <__libc_init_array>
 8000e9a:	f7ff fbc1 	bl	8000620 <main>
 8000e9e:	4770      	bx	lr
 8000ea0:	20020000 	.word	0x20020000
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000160 	.word	0x20000160
 8000eac:	08009210 	.word	0x08009210
 8000eb0:	20000160 	.word	0x20000160
 8000eb4:	20001f10 	.word	0x20001f10

08000eb8 <ADC_IRQHandler>:
 8000eb8:	e7fe      	b.n	8000eb8 <ADC_IRQHandler>
	...

08000ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec0:	4b0e      	ldr	r3, [pc, #56]	; (8000efc <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <HAL_Init+0x40>)
 8000ec6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ecc:	4b0b      	ldr	r3, [pc, #44]	; (8000efc <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_Init+0x40>)
 8000ed2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ed8:	4b08      	ldr	r3, [pc, #32]	; (8000efc <HAL_Init+0x40>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a07      	ldr	r2, [pc, #28]	; (8000efc <HAL_Init+0x40>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	f000 f94f 	bl	8001188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eea:	200f      	movs	r0, #15
 8000eec:	f000 f808 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef0:	f7ff fd96 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023c00 	.word	0x40023c00

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x54>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x58>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4619      	mov	r1, r3
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f967 	bl	80011f2 <HAL_SYSTICK_Config>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00e      	b.n	8000f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	d80a      	bhi.n	8000f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f34:	2200      	movs	r2, #0
 8000f36:	6879      	ldr	r1, [r7, #4]
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f000 f92f 	bl	800119e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f40:	4a06      	ldr	r2, [pc, #24]	; (8000f5c <HAL_InitTick+0x5c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	e000      	b.n	8000f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000000 	.word	0x20000000
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000004 	.word	0x20000004

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	200002f0 	.word	0x200002f0

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	200002f0 	.word	0x200002f0

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	; (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
	...

08001144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001154:	d301      	bcc.n	800115a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001156:	2301      	movs	r3, #1
 8001158:	e00f      	b.n	800117a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <SysTick_Config+0x40>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3b01      	subs	r3, #1
 8001160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001162:	210f      	movs	r1, #15
 8001164:	f04f 30ff 	mov.w	r0, #4294967295
 8001168:	f7ff ff8e 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <SysTick_Config+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <SysTick_Config+0x40>)
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	e000e010 	.word	0xe000e010

08001188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f7ff ff29 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001196:	bf00      	nop
 8001198:	3708      	adds	r7, #8
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119e:	b580      	push	{r7, lr}
 80011a0:	b086      	sub	sp, #24
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b0:	f7ff ff3e 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68b9      	ldr	r1, [r7, #8]
 80011ba:	6978      	ldr	r0, [r7, #20]
 80011bc:	f7ff ff8e 	bl	80010dc <NVIC_EncodePriority>
 80011c0:	4602      	mov	r2, r0
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c6:	4611      	mov	r1, r2
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff5d 	bl	8001088 <__NVIC_SetPriority>
}
 80011ce:	bf00      	nop
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff ff31 	bl	800104c <__NVIC_EnableIRQ>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b082      	sub	sp, #8
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff ffa2 	bl	8001144 <SysTick_Config>
 8001200:	4603      	mov	r3, r0
}
 8001202:	4618      	mov	r0, r3
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
	...

0800120c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff feb6 	bl	8000f88 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e099      	b.n	800135c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2202      	movs	r2, #2
 800122c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0201 	bic.w	r2, r2, #1
 8001246:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001248:	e00f      	b.n	800126a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800124a:	f7ff fe9d 	bl	8000f88 <HAL_GetTick>
 800124e:	4602      	mov	r2, r0
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	2b05      	cmp	r3, #5
 8001256:	d908      	bls.n	800126a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2220      	movs	r2, #32
 800125c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2203      	movs	r2, #3
 8001262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e078      	b.n	800135c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	f003 0301 	and.w	r3, r3, #1
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1e8      	bne.n	800124a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	4b38      	ldr	r3, [pc, #224]	; (8001364 <HAL_DMA_Init+0x158>)
 8001284:	4013      	ands	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001296:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	2b04      	cmp	r3, #4
 80012c2:	d107      	bne.n	80012d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4313      	orrs	r3, r2
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	697a      	ldr	r2, [r7, #20]
 80012da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f023 0307 	bic.w	r3, r3, #7
 80012ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f0:	697a      	ldr	r2, [r7, #20]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fa:	2b04      	cmp	r3, #4
 80012fc:	d117      	bne.n	800132e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	4313      	orrs	r3, r2
 8001306:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00e      	beq.n	800132e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f000 f9e9 	bl	80016e8 <DMA_CheckFifoParam>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2240      	movs	r2, #64	; 0x40
 8001320:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2201      	movs	r2, #1
 8001326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800132a:	2301      	movs	r3, #1
 800132c:	e016      	b.n	800135c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f000 f9a0 	bl	800167c <DMA_CalcBaseAndBitshift>
 800133c:	4603      	mov	r3, r0
 800133e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001344:	223f      	movs	r2, #63	; 0x3f
 8001346:	409a      	lsls	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2201      	movs	r2, #1
 8001356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	f010803f 	.word	0xf010803f

08001368 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001370:	2300      	movs	r3, #0
 8001372:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001374:	4b8e      	ldr	r3, [pc, #568]	; (80015b0 <HAL_DMA_IRQHandler+0x248>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a8e      	ldr	r2, [pc, #568]	; (80015b4 <HAL_DMA_IRQHandler+0x24c>)
 800137a:	fba2 2303 	umull	r2, r3, r2, r3
 800137e:	0a9b      	lsrs	r3, r3, #10
 8001380:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001386:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001392:	2208      	movs	r2, #8
 8001394:	409a      	lsls	r2, r3
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d01a      	beq.n	80013d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0204 	bic.w	r2, r2, #4
 80013ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c0:	2208      	movs	r2, #8
 80013c2:	409a      	lsls	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013cc:	f043 0201 	orr.w	r2, r3, #1
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d8:	2201      	movs	r2, #1
 80013da:	409a      	lsls	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d012      	beq.n	800140a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d00b      	beq.n	800140a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f6:	2201      	movs	r2, #1
 80013f8:	409a      	lsls	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001402:	f043 0202 	orr.w	r2, r3, #2
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140e:	2204      	movs	r2, #4
 8001410:	409a      	lsls	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4013      	ands	r3, r2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d012      	beq.n	8001440 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00b      	beq.n	8001440 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142c:	2204      	movs	r2, #4
 800142e:	409a      	lsls	r2, r3
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001438:	f043 0204 	orr.w	r2, r3, #4
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001444:	2210      	movs	r2, #16
 8001446:	409a      	lsls	r2, r3
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4013      	ands	r3, r2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d043      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0308 	and.w	r3, r3, #8
 800145a:	2b00      	cmp	r3, #0
 800145c:	d03c      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001462:	2210      	movs	r2, #16
 8001464:	409a      	lsls	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d018      	beq.n	80014aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d108      	bne.n	8001498 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	2b00      	cmp	r3, #0
 800148c:	d024      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	4798      	blx	r3
 8001496:	e01f      	b.n	80014d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149c:	2b00      	cmp	r3, #0
 800149e:	d01b      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	4798      	blx	r3
 80014a8:	e016      	b.n	80014d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d107      	bne.n	80014c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 0208 	bic.w	r2, r2, #8
 80014c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d003      	beq.n	80014d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014dc:	2220      	movs	r2, #32
 80014de:	409a      	lsls	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4013      	ands	r3, r2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 808f 	beq.w	8001608 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0310 	and.w	r3, r3, #16
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 8087 	beq.w	8001608 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fe:	2220      	movs	r2, #32
 8001500:	409a      	lsls	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b05      	cmp	r3, #5
 8001510:	d136      	bne.n	8001580 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0216 	bic.w	r2, r2, #22
 8001520:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	695a      	ldr	r2, [r3, #20]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001530:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	2b00      	cmp	r3, #0
 8001538:	d103      	bne.n	8001542 <HAL_DMA_IRQHandler+0x1da>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800153e:	2b00      	cmp	r3, #0
 8001540:	d007      	beq.n	8001552 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0208 	bic.w	r2, r2, #8
 8001550:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001556:	223f      	movs	r2, #63	; 0x3f
 8001558:	409a      	lsls	r2, r3
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001572:	2b00      	cmp	r3, #0
 8001574:	d07e      	beq.n	8001674 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	4798      	blx	r3
        }
        return;
 800157e:	e079      	b.n	8001674 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d01d      	beq.n	80015ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d10d      	bne.n	80015b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d031      	beq.n	8001608 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	4798      	blx	r3
 80015ac:	e02c      	b.n	8001608 <HAL_DMA_IRQHandler+0x2a0>
 80015ae:	bf00      	nop
 80015b0:	20000000 	.word	0x20000000
 80015b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d023      	beq.n	8001608 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	4798      	blx	r3
 80015c8:	e01e      	b.n	8001608 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d10f      	bne.n	80015f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0210 	bic.w	r2, r2, #16
 80015e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160c:	2b00      	cmp	r3, #0
 800160e:	d032      	beq.n	8001676 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	2b00      	cmp	r3, #0
 800161a:	d022      	beq.n	8001662 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2205      	movs	r2, #5
 8001620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f022 0201 	bic.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	3301      	adds	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	429a      	cmp	r2, r3
 800163e:	d307      	bcc.n	8001650 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	2b00      	cmp	r3, #0
 800164c:	d1f2      	bne.n	8001634 <HAL_DMA_IRQHandler+0x2cc>
 800164e:	e000      	b.n	8001652 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001650:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2201      	movs	r2, #1
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2200      	movs	r2, #0
 800165e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
 8001672:	e000      	b.n	8001676 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001674:	bf00      	nop
    }
  }
}
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	3b10      	subs	r3, #16
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <DMA_CalcBaseAndBitshift+0x64>)
 800168e:	fba2 2303 	umull	r2, r3, r2, r3
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001696:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <DMA_CalcBaseAndBitshift+0x68>)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	461a      	mov	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d909      	bls.n	80016be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016b2:	f023 0303 	bic.w	r3, r3, #3
 80016b6:	1d1a      	adds	r2, r3, #4
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	659a      	str	r2, [r3, #88]	; 0x58
 80016bc:	e007      	b.n	80016ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	aaaaaaab 	.word	0xaaaaaaab
 80016e4:	08009160 	.word	0x08009160

080016e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f0:	2300      	movs	r3, #0
 80016f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d11f      	bne.n	8001742 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	2b03      	cmp	r3, #3
 8001706:	d856      	bhi.n	80017b6 <DMA_CheckFifoParam+0xce>
 8001708:	a201      	add	r2, pc, #4	; (adr r2, 8001710 <DMA_CheckFifoParam+0x28>)
 800170a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170e:	bf00      	nop
 8001710:	08001721 	.word	0x08001721
 8001714:	08001733 	.word	0x08001733
 8001718:	08001721 	.word	0x08001721
 800171c:	080017b7 	.word	0x080017b7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d046      	beq.n	80017ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001730:	e043      	b.n	80017ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001736:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800173a:	d140      	bne.n	80017be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001740:	e03d      	b.n	80017be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800174a:	d121      	bne.n	8001790 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d837      	bhi.n	80017c2 <DMA_CheckFifoParam+0xda>
 8001752:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <DMA_CheckFifoParam+0x70>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	08001769 	.word	0x08001769
 800175c:	0800176f 	.word	0x0800176f
 8001760:	08001769 	.word	0x08001769
 8001764:	08001781 	.word	0x08001781
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
      break;
 800176c:	e030      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001776:	2b00      	cmp	r3, #0
 8001778:	d025      	beq.n	80017c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800177e:	e022      	b.n	80017c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001784:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001788:	d11f      	bne.n	80017ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800178e:	e01c      	b.n	80017ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d903      	bls.n	800179e <DMA_CheckFifoParam+0xb6>
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2b03      	cmp	r3, #3
 800179a:	d003      	beq.n	80017a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800179c:	e018      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
      break;
 80017a2:	e015      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d00e      	beq.n	80017ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	73fb      	strb	r3, [r7, #15]
      break;
 80017b4:	e00b      	b.n	80017ce <DMA_CheckFifoParam+0xe6>
      break;
 80017b6:	bf00      	nop
 80017b8:	e00a      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      break;
 80017ba:	bf00      	nop
 80017bc:	e008      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      break;
 80017be:	bf00      	nop
 80017c0:	e006      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      break;
 80017c2:	bf00      	nop
 80017c4:	e004      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      break;
 80017c6:	bf00      	nop
 80017c8:	e002      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80017ca:	bf00      	nop
 80017cc:	e000      	b.n	80017d0 <DMA_CheckFifoParam+0xe8>
      break;
 80017ce:	bf00      	nop
    }
  } 
  
  return status; 
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop

080017e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
 80017fa:	e159      	b.n	8001ab0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	429a      	cmp	r2, r3
 8001816:	f040 8148 	bne.w	8001aaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b01      	cmp	r3, #1
 8001824:	d005      	beq.n	8001832 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182e:	2b02      	cmp	r3, #2
 8001830:	d130      	bne.n	8001894 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	2203      	movs	r2, #3
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001868:	2201      	movs	r2, #1
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	4013      	ands	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 0201 	and.w	r2, r3, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 0303 	and.w	r3, r3, #3
 800189c:	2b03      	cmp	r3, #3
 800189e:	d017      	beq.n	80018d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	2203      	movs	r2, #3
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d123      	bne.n	8001924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	08da      	lsrs	r2, r3, #3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3208      	adds	r2, #8
 80018e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	220f      	movs	r2, #15
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	691a      	ldr	r2, [r3, #16]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	08da      	lsrs	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3208      	adds	r2, #8
 800191e:	69b9      	ldr	r1, [r7, #24]
 8001920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0203 	and.w	r2, r3, #3
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001960:	2b00      	cmp	r3, #0
 8001962:	f000 80a2 	beq.w	8001aaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b57      	ldr	r3, [pc, #348]	; (8001ac8 <HAL_GPIO_Init+0x2e8>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	4a56      	ldr	r2, [pc, #344]	; (8001ac8 <HAL_GPIO_Init+0x2e8>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6453      	str	r3, [r2, #68]	; 0x44
 8001976:	4b54      	ldr	r3, [pc, #336]	; (8001ac8 <HAL_GPIO_Init+0x2e8>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001982:	4a52      	ldr	r2, [pc, #328]	; (8001acc <HAL_GPIO_Init+0x2ec>)
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	089b      	lsrs	r3, r3, #2
 8001988:	3302      	adds	r3, #2
 800198a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a49      	ldr	r2, [pc, #292]	; (8001ad0 <HAL_GPIO_Init+0x2f0>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d019      	beq.n	80019e2 <HAL_GPIO_Init+0x202>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a48      	ldr	r2, [pc, #288]	; (8001ad4 <HAL_GPIO_Init+0x2f4>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d013      	beq.n	80019de <HAL_GPIO_Init+0x1fe>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a47      	ldr	r2, [pc, #284]	; (8001ad8 <HAL_GPIO_Init+0x2f8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d00d      	beq.n	80019da <HAL_GPIO_Init+0x1fa>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a46      	ldr	r2, [pc, #280]	; (8001adc <HAL_GPIO_Init+0x2fc>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d007      	beq.n	80019d6 <HAL_GPIO_Init+0x1f6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a45      	ldr	r2, [pc, #276]	; (8001ae0 <HAL_GPIO_Init+0x300>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_GPIO_Init+0x1f2>
 80019ce:	2304      	movs	r3, #4
 80019d0:	e008      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019d2:	2307      	movs	r3, #7
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019d6:	2303      	movs	r3, #3
 80019d8:	e004      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019da:	2302      	movs	r3, #2
 80019dc:	e002      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019de:	2301      	movs	r3, #1
 80019e0:	e000      	b.n	80019e4 <HAL_GPIO_Init+0x204>
 80019e2:	2300      	movs	r3, #0
 80019e4:	69fa      	ldr	r2, [r7, #28]
 80019e6:	f002 0203 	and.w	r2, r2, #3
 80019ea:	0092      	lsls	r2, r2, #2
 80019ec:	4093      	lsls	r3, r2
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019f4:	4935      	ldr	r1, [pc, #212]	; (8001acc <HAL_GPIO_Init+0x2ec>)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	089b      	lsrs	r3, r3, #2
 80019fa:	3302      	adds	r3, #2
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a26:	4a2f      	ldr	r2, [pc, #188]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a50:	4a24      	ldr	r2, [pc, #144]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a56:	4b23      	ldr	r3, [pc, #140]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4013      	ands	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a7a:	4a1a      	ldr	r2, [pc, #104]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aa4:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <HAL_GPIO_Init+0x304>)
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3301      	adds	r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	2b0f      	cmp	r3, #15
 8001ab4:	f67f aea2 	bls.w	80017fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ab8:	bf00      	nop
 8001aba:	bf00      	nop
 8001abc:	3724      	adds	r7, #36	; 0x24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40013800 	.word	0x40013800
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	40020400 	.word	0x40020400
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	40020c00 	.word	0x40020c00
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	807b      	strh	r3, [r7, #2]
 8001af4:	4613      	mov	r3, r2
 8001af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af8:	787b      	ldrb	r3, [r7, #1]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b04:	e003      	b.n	8001b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b06:	887b      	ldrh	r3, [r7, #2]
 8001b08:	041a      	lsls	r2, r3, #16
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	619a      	str	r2, [r3, #24]
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b085      	sub	sp, #20
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b2c:	887a      	ldrh	r2, [r7, #2]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	041a      	lsls	r2, r3, #16
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	400b      	ands	r3, r1
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	619a      	str	r2, [r3, #24]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b5c:	695a      	ldr	r2, [r3, #20]
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	4013      	ands	r3, r2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d006      	beq.n	8001b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b66:	4a05      	ldr	r2, [pc, #20]	; (8001b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f000 f806 	bl	8001b80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40013c00 	.word	0x40013c00

08001b80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr

08001b96 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b98:	b08f      	sub	sp, #60	; 0x3c
 8001b9a:	af0a      	add	r7, sp, #40	; 0x28
 8001b9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e10f      	b.n	8001dc8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d106      	bne.n	8001bc8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f005 ffa6 	bl	8007b14 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2203      	movs	r2, #3
 8001bcc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f002 fa8d 	bl	8004106 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	687e      	ldr	r6, [r7, #4]
 8001bf4:	466d      	mov	r5, sp
 8001bf6:	f106 0410 	add.w	r4, r6, #16
 8001bfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c06:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c0a:	1d33      	adds	r3, r6, #4
 8001c0c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c0e:	6838      	ldr	r0, [r7, #0]
 8001c10:	f002 f964 	bl	8003edc <USB_CoreInit>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d005      	beq.n	8001c26 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e0d0      	b.n	8001dc8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f002 fa7b 	bl	8004128 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c32:	2300      	movs	r3, #0
 8001c34:	73fb      	strb	r3, [r7, #15]
 8001c36:	e04a      	b.n	8001cce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c38:	7bfa      	ldrb	r2, [r7, #15]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	4413      	add	r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	333d      	adds	r3, #61	; 0x3d
 8001c48:	2201      	movs	r2, #1
 8001c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c4c:	7bfa      	ldrb	r2, [r7, #15]
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	4613      	mov	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	4413      	add	r3, r2
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	440b      	add	r3, r1
 8001c5a:	333c      	adds	r3, #60	; 0x3c
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c60:	7bfa      	ldrb	r2, [r7, #15]
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	b298      	uxth	r0, r3
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	3344      	adds	r3, #68	; 0x44
 8001c74:	4602      	mov	r2, r0
 8001c76:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c78:	7bfa      	ldrb	r2, [r7, #15]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	440b      	add	r3, r1
 8001c86:	3340      	adds	r3, #64	; 0x40
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c8c:	7bfa      	ldrb	r2, [r7, #15]
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	4613      	mov	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	440b      	add	r3, r1
 8001c9a:	3348      	adds	r3, #72	; 0x48
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4413      	add	r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	334c      	adds	r3, #76	; 0x4c
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	6879      	ldr	r1, [r7, #4]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	440b      	add	r3, r1
 8001cc2:	3354      	adds	r3, #84	; 0x54
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	3301      	adds	r3, #1
 8001ccc:	73fb      	strb	r3, [r7, #15]
 8001cce:	7bfa      	ldrb	r2, [r7, #15]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d3af      	bcc.n	8001c38 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
 8001cdc:	e044      	b.n	8001d68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cde:	7bfa      	ldrb	r2, [r7, #15]
 8001ce0:	6879      	ldr	r1, [r7, #4]
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001cf4:	7bfa      	ldrb	r2, [r7, #15]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d06:	7bfa      	ldrb	r2, [r7, #15]
 8001d08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d0a:	7bfa      	ldrb	r2, [r7, #15]
 8001d0c:	6879      	ldr	r1, [r7, #4]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	4413      	add	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d20:	7bfa      	ldrb	r2, [r7, #15]
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4413      	add	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d36:	7bfa      	ldrb	r2, [r7, #15]
 8001d38:	6879      	ldr	r1, [r7, #4]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	440b      	add	r3, r1
 8001d44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d4c:	7bfa      	ldrb	r2, [r7, #15]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4413      	add	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	3301      	adds	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d3b5      	bcc.n	8001cde <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	603b      	str	r3, [r7, #0]
 8001d78:	687e      	ldr	r6, [r7, #4]
 8001d7a:	466d      	mov	r5, sp
 8001d7c:	f106 0410 	add.w	r4, r6, #16
 8001d80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d90:	1d33      	adds	r3, r6, #4
 8001d92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d94:	6838      	ldr	r0, [r7, #0]
 8001d96:	f002 fa13 	bl	80041c0 <USB_DevInit>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d005      	beq.n	8001dac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2202      	movs	r2, #2
 8001da4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e00d      	b.n	8001dc8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 fb62 	bl	800548a <USB_DevDisconnect>

  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_PCD_Start+0x1c>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e020      	b.n	8001e2e <HAL_PCD_Start+0x5e>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d109      	bne.n	8001e10 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d005      	beq.n	8001e10 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f002 f965 	bl	80040e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f003 fb12 	bl	8005448 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e36:	b590      	push	{r4, r7, lr}
 8001e38:	b08d      	sub	sp, #52	; 0x34
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f003 fbd0 	bl	80055f2 <USB_GetMode>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f040 848a 	bne.w	800276e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 fb34 	bl	80054cc <USB_ReadInterrupts>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8480 	beq.w	800276c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	0a1b      	lsrs	r3, r3, #8
 8001e76:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 fb21 	bl	80054cc <USB_ReadInterrupts>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d107      	bne.n	8001ea4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f002 0202 	and.w	r2, r2, #2
 8001ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f003 fb0f 	bl	80054cc <USB_ReadInterrupts>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f003 0310 	and.w	r3, r3, #16
 8001eb4:	2b10      	cmp	r3, #16
 8001eb6:	d161      	bne.n	8001f7c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	699a      	ldr	r2, [r3, #24]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f022 0210 	bic.w	r2, r2, #16
 8001ec6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ec8:	6a3b      	ldr	r3, [r7, #32]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f003 020f 	and.w	r2, r3, #15
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	0c5b      	lsrs	r3, r3, #17
 8001eec:	f003 030f 	and.w	r3, r3, #15
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d124      	bne.n	8001f3e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d035      	beq.n	8001f6c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	091b      	lsrs	r3, r3, #4
 8001f08:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	6a38      	ldr	r0, [r7, #32]
 8001f14:	f003 f946 	bl	80051a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	691a      	ldr	r2, [r3, #16]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	091b      	lsrs	r3, r3, #4
 8001f20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f24:	441a      	add	r2, r3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	6a1a      	ldr	r2, [r3, #32]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f36:	441a      	add	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	621a      	str	r2, [r3, #32]
 8001f3c:	e016      	b.n	8001f6c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	0c5b      	lsrs	r3, r3, #17
 8001f42:	f003 030f 	and.w	r3, r3, #15
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d110      	bne.n	8001f6c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f50:	2208      	movs	r2, #8
 8001f52:	4619      	mov	r1, r3
 8001f54:	6a38      	ldr	r0, [r7, #32]
 8001f56:	f003 f925 	bl	80051a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	6a1a      	ldr	r2, [r3, #32]
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f66:	441a      	add	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	699a      	ldr	r2, [r3, #24]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 0210 	orr.w	r2, r2, #16
 8001f7a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 faa3 	bl	80054cc <USB_ReadInterrupts>
 8001f86:	4603      	mov	r3, r0
 8001f88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f8c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f90:	f040 80a7 	bne.w	80020e2 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f003 faa8 	bl	80054f2 <USB_ReadDevAllOutEpInterrupt>
 8001fa2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001fa4:	e099      	b.n	80020da <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f000 808e 	beq.w	80020ce <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	4611      	mov	r1, r2
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 facc 	bl	800555a <USB_ReadDevOutEPInterrupt>
 8001fc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	015a      	lsls	r2, r3, #5
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fda:	461a      	mov	r2, r3
 8001fdc:	2301      	movs	r3, #1
 8001fde:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001fe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fec2 	bl	8002d6c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00c      	beq.n	800200c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffe:	461a      	mov	r2, r3
 8002000:	2308      	movs	r3, #8
 8002002:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 ff98 	bl	8002f3c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b00      	cmp	r3, #0
 8002014:	d008      	beq.n	8002028 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002022:	461a      	mov	r2, r3
 8002024:	2310      	movs	r3, #16
 8002026:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d030      	beq.n	8002094 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002032:	6a3b      	ldr	r3, [r7, #32]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800203a:	2b80      	cmp	r3, #128	; 0x80
 800203c:	d109      	bne.n	8002052 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	69fa      	ldr	r2, [r7, #28]
 8002048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800204c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002050:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	3304      	adds	r3, #4
 8002066:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	78db      	ldrb	r3, [r3, #3]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d108      	bne.n	8002082 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	2200      	movs	r2, #0
 8002074:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002078:	b2db      	uxtb	r3, r3
 800207a:	4619      	mov	r1, r3
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f005 fe45 	bl	8007d0c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	4413      	add	r3, r2
 800208a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208e:	461a      	mov	r2, r3
 8002090:	2302      	movs	r3, #2
 8002092:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	d008      	beq.n	80020b0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020aa:	461a      	mov	r2, r3
 80020ac:	2320      	movs	r3, #32
 80020ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d009      	beq.n	80020ce <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c6:	461a      	mov	r2, r3
 80020c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020cc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	3301      	adds	r3, #1
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	085b      	lsrs	r3, r3, #1
 80020d8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f47f af62 	bne.w	8001fa6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 f9f0 	bl	80054cc <USB_ReadInterrupts>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020f6:	f040 80db 	bne.w	80022b0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f003 fa11 	bl	8005526 <USB_ReadDevAllInEpInterrupt>
 8002104:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800210a:	e0cd      	b.n	80022a8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800210c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80c2 	beq.w	800229c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f003 fa37 	bl	8005596 <USB_ReadDevInEPInterrupt>
 8002128:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d057      	beq.n	80021e4 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	f003 030f 	and.w	r3, r3, #15
 800213a:	2201      	movs	r2, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	43db      	mvns	r3, r3
 800214e:	69f9      	ldr	r1, [r7, #28]
 8002150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002154:	4013      	ands	r3, r2
 8002156:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215a:	015a      	lsls	r2, r3, #5
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	4413      	add	r3, r2
 8002160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002164:	461a      	mov	r2, r3
 8002166:	2301      	movs	r3, #1
 8002168:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d132      	bne.n	80021d8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	334c      	adds	r3, #76	; 0x4c
 8002182:	6819      	ldr	r1, [r3, #0]
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4403      	add	r3, r0
 8002192:	3348      	adds	r3, #72	; 0x48
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4419      	add	r1, r3
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4403      	add	r3, r0
 80021a6:	334c      	adds	r3, #76	; 0x4c
 80021a8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d113      	bne.n	80021d8 <HAL_PCD_IRQHandler+0x3a2>
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	3354      	adds	r3, #84	; 0x54
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d108      	bne.n	80021d8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6818      	ldr	r0, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021d0:	461a      	mov	r2, r3
 80021d2:	2101      	movs	r1, #1
 80021d4:	f003 fa3e 	bl	8005654 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	4619      	mov	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f005 fd19 	bl	8007c16 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d008      	beq.n	8002200 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	015a      	lsls	r2, r3, #5
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4413      	add	r3, r2
 80021f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021fa:	461a      	mov	r2, r3
 80021fc:	2308      	movs	r3, #8
 80021fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b00      	cmp	r3, #0
 8002208:	d008      	beq.n	800221c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	015a      	lsls	r2, r3, #5
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	4413      	add	r3, r2
 8002212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002216:	461a      	mov	r2, r3
 8002218:	2310      	movs	r3, #16
 800221a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	015a      	lsls	r2, r3, #5
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	4413      	add	r3, r2
 800222e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002232:	461a      	mov	r2, r3
 8002234:	2340      	movs	r3, #64	; 0x40
 8002236:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d023      	beq.n	800228a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002242:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002244:	6a38      	ldr	r0, [r7, #32]
 8002246:	f002 f91f 	bl	8004488 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800224a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800224c:	4613      	mov	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	4413      	add	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	3338      	adds	r3, #56	; 0x38
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	3304      	adds	r3, #4
 800225c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	78db      	ldrb	r3, [r3, #3]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d108      	bne.n	8002278 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2200      	movs	r2, #0
 800226a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800226c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226e:	b2db      	uxtb	r3, r3
 8002270:	4619      	mov	r1, r3
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f005 fd5c 	bl	8007d30 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	015a      	lsls	r2, r3, #5
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	4413      	add	r3, r2
 8002280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002284:	461a      	mov	r2, r3
 8002286:	2302      	movs	r3, #2
 8002288:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f000 fcdb 	bl	8002c52 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	3301      	adds	r3, #1
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a4:	085b      	lsrs	r3, r3, #1
 80022a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f47f af2e 	bne.w	800210c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f003 f909 	bl	80054cc <USB_ReadInterrupts>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022c4:	d122      	bne.n	800230c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d108      	bne.n	80022f6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80022ec:	2100      	movs	r1, #0
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fec2 	bl	8003078 <HAL_PCDEx_LPM_Callback>
 80022f4:	e002      	b.n	80022fc <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f005 fcfa 	bl	8007cf0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	695a      	ldr	r2, [r3, #20]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800230a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f003 f8db 	bl	80054cc <USB_ReadInterrupts>
 8002316:	4603      	mov	r3, r0
 8002318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002320:	d112      	bne.n	8002348 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	2b01      	cmp	r3, #1
 8002330:	d102      	bne.n	8002338 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f005 fcb6 	bl	8007ca4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002346:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f003 f8bd 	bl	80054cc <USB_ReadInterrupts>
 8002352:	4603      	mov	r3, r0
 8002354:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235c:	f040 80b7 	bne.w	80024ce <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	69fa      	ldr	r2, [r7, #28]
 800236a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800236e:	f023 0301 	bic.w	r3, r3, #1
 8002372:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2110      	movs	r1, #16
 800237a:	4618      	mov	r0, r3
 800237c:	f002 f884 	bl	8004488 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002380:	2300      	movs	r3, #0
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002384:	e046      	b.n	8002414 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002388:	015a      	lsls	r2, r3, #5
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	4413      	add	r3, r2
 800238e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002392:	461a      	mov	r2, r3
 8002394:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002398:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800239a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023aa:	0151      	lsls	r1, r2, #5
 80023ac:	69fa      	ldr	r2, [r7, #28]
 80023ae:	440a      	add	r2, r1
 80023b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c6:	461a      	mov	r2, r3
 80023c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023de:	0151      	lsls	r1, r2, #5
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	440a      	add	r2, r1
 80023e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fe:	0151      	lsls	r1, r2, #5
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	440a      	add	r2, r1
 8002404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002408:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800240c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	3301      	adds	r3, #1
 8002412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800241a:	429a      	cmp	r2, r3
 800241c:	d3b3      	bcc.n	8002386 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800242c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002430:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	2b00      	cmp	r3, #0
 8002438:	d016      	beq.n	8002468 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800244a:	f043 030b 	orr.w	r3, r3, #11
 800244e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002460:	f043 030b 	orr.w	r3, r3, #11
 8002464:	6453      	str	r3, [r2, #68]	; 0x44
 8002466:	e015      	b.n	8002494 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002476:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800247a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800247e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	69fa      	ldr	r2, [r7, #28]
 800248a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800248e:	f043 030b 	orr.w	r3, r3, #11
 8002492:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024a6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024b8:	461a      	mov	r2, r3
 80024ba:	f003 f8cb 	bl	8005654 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 fffa 	bl	80054cc <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024e2:	d124      	bne.n	800252e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f003 f890 	bl	800560e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f002 f845 	bl	8004582 <USB_GetDevSpeed>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681c      	ldr	r4, [r3, #0]
 8002504:	f001 f9e8 	bl	80038d8 <HAL_RCC_GetHCLKFreq>
 8002508:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800250e:	b2db      	uxtb	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	4620      	mov	r0, r4
 8002514:	f001 fd44 	bl	8003fa0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f005 fba4 	bl	8007c66 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	695a      	ldr	r2, [r3, #20]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800252c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f002 ffca 	bl	80054cc <USB_ReadInterrupts>
 8002538:	4603      	mov	r3, r0
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b08      	cmp	r3, #8
 8002540:	d10a      	bne.n	8002558 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f005 fb81 	bl	8007c4a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f002 0208 	and.w	r2, r2, #8
 8002556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f002 ffb5 	bl	80054cc <USB_ReadInterrupts>
 8002562:	4603      	mov	r3, r0
 8002564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002568:	2b80      	cmp	r3, #128	; 0x80
 800256a:	d122      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800256c:	6a3b      	ldr	r3, [r7, #32]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002578:	2301      	movs	r3, #1
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	e014      	b.n	80025a8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002582:	4613      	mov	r3, r2
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d105      	bne.n	80025a2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	b2db      	uxtb	r3, r3
 800259a:	4619      	mov	r1, r3
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fb27 	bl	8002bf0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a4:	3301      	adds	r3, #1
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d3e5      	bcc.n	800257e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 ff88 	bl	80054cc <USB_ReadInterrupts>
 80025bc:	4603      	mov	r3, r0
 80025be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025c6:	d13b      	bne.n	8002640 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025c8:	2301      	movs	r3, #1
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
 80025cc:	e02b      	b.n	8002626 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	015a      	lsls	r2, r3, #5
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	4413      	add	r3, r2
 80025d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3340      	adds	r3, #64	; 0x40
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d115      	bne.n	8002620 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80025f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	da12      	bge.n	8002620 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fe:	4613      	mov	r3, r2
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	333f      	adds	r3, #63	; 0x3f
 800260a:	2201      	movs	r2, #1
 800260c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	b2db      	uxtb	r3, r3
 8002612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002616:	b2db      	uxtb	r3, r3
 8002618:	4619      	mov	r1, r3
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 fae8 	bl	8002bf0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	3301      	adds	r3, #1
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262c:	429a      	cmp	r2, r3
 800262e:	d3ce      	bcc.n	80025ce <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	695a      	ldr	r2, [r3, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800263e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f002 ff41 	bl	80054cc <USB_ReadInterrupts>
 800264a:	4603      	mov	r3, r0
 800264c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002650:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002654:	d155      	bne.n	8002702 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002656:	2301      	movs	r3, #1
 8002658:	627b      	str	r3, [r7, #36]	; 0x24
 800265a:	e045      	b.n	80026e8 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002670:	4613      	mov	r3, r2
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d12e      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002684:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002686:	2b00      	cmp	r3, #0
 8002688:	da2b      	bge.n	80026e2 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002696:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800269a:	429a      	cmp	r2, r3
 800269c:	d121      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026b0:	2201      	movs	r2, #1
 80026b2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026de:	6053      	str	r3, [r2, #4]
            break;
 80026e0:	e007      	b.n	80026f2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	3301      	adds	r3, #1
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d3b4      	bcc.n	800265c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695a      	ldr	r2, [r3, #20]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f002 fee0 	bl	80054cc <USB_ReadInterrupts>
 800270c:	4603      	mov	r3, r0
 800270e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002712:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002716:	d10a      	bne.n	800272e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f005 fb1b 	bl	8007d54 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800272c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f002 feca 	bl	80054cc <USB_ReadInterrupts>
 8002738:	4603      	mov	r3, r0
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b04      	cmp	r3, #4
 8002740:	d115      	bne.n	800276e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f005 fb0b 	bl	8007d70 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	430a      	orrs	r2, r1
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	e000      	b.n	800276e <HAL_PCD_IRQHandler+0x938>
      return;
 800276c:	bf00      	nop
    }
  }
}
 800276e:	3734      	adds	r7, #52	; 0x34
 8002770:	46bd      	mov	sp, r7
 8002772:	bd90      	pop	{r4, r7, pc}

08002774 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_PCD_SetAddress+0x1a>
 800278a:	2302      	movs	r3, #2
 800278c:	e013      	b.n	80027b6 <HAL_PCD_SetAddress+0x42>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f002 fe28 	bl	80053fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	4608      	mov	r0, r1
 80027c8:	4611      	mov	r1, r2
 80027ca:	461a      	mov	r2, r3
 80027cc:	4603      	mov	r3, r0
 80027ce:	70fb      	strb	r3, [r7, #3]
 80027d0:	460b      	mov	r3, r1
 80027d2:	803b      	strh	r3, [r7, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	da0f      	bge.n	8002804 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	f003 020f 	and.w	r2, r3, #15
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	3338      	adds	r3, #56	; 0x38
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	4413      	add	r3, r2
 80027f8:	3304      	adds	r3, #4
 80027fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	705a      	strb	r2, [r3, #1]
 8002802:	e00f      	b.n	8002824 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	f003 020f 	and.w	r2, r3, #15
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	4413      	add	r3, r2
 800281a:	3304      	adds	r3, #4
 800281c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	b2da      	uxtb	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002830:	883a      	ldrh	r2, [r7, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	78ba      	ldrb	r2, [r7, #2]
 800283a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	785b      	ldrb	r3, [r3, #1]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d004      	beq.n	800284e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800284e:	78bb      	ldrb	r3, [r7, #2]
 8002850:	2b02      	cmp	r3, #2
 8002852:	d102      	bne.n	800285a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2200      	movs	r2, #0
 8002858:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_PCD_EP_Open+0xaa>
 8002864:	2302      	movs	r3, #2
 8002866:	e00e      	b.n	8002886 <HAL_PCD_EP_Open+0xc8>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68f9      	ldr	r1, [r7, #12]
 8002876:	4618      	mov	r0, r3
 8002878:	f001 fea8 	bl	80045cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002884:	7afb      	ldrb	r3, [r7, #11]
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800289a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	da0f      	bge.n	80028c2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 020f 	and.w	r2, r3, #15
 80028a8:	4613      	mov	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	4413      	add	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	3338      	adds	r3, #56	; 0x38
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	3304      	adds	r3, #4
 80028b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	705a      	strb	r2, [r3, #1]
 80028c0:	e00f      	b.n	80028e2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 020f 	and.w	r2, r3, #15
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	4413      	add	r3, r2
 80028d8:	3304      	adds	r3, #4
 80028da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <HAL_PCD_EP_Close+0x6e>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e00e      	b.n	800291a <HAL_PCD_EP_Close+0x8c>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68f9      	ldr	r1, [r7, #12]
 800290a:	4618      	mov	r0, r3
 800290c:	f001 fee6 	bl	80046dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
 800292e:	460b      	mov	r3, r1
 8002930:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002932:	7afb      	ldrb	r3, [r7, #11]
 8002934:	f003 020f 	and.w	r2, r3, #15
 8002938:	4613      	mov	r3, r2
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	4413      	add	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	4413      	add	r3, r2
 8002948:	3304      	adds	r3, #4
 800294a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2200      	movs	r2, #0
 800295c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2200      	movs	r2, #0
 8002962:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002964:	7afb      	ldrb	r3, [r7, #11]
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	b2da      	uxtb	r2, r3
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d102      	bne.n	800297e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	b2db      	uxtb	r3, r3
 8002992:	461a      	mov	r2, r3
 8002994:	6979      	ldr	r1, [r7, #20]
 8002996:	f002 f9c5 	bl	8004d24 <USB_EP0StartXfer>
 800299a:	e008      	b.n	80029ae <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	461a      	mov	r2, r3
 80029a8:	6979      	ldr	r1, [r7, #20]
 80029aa:	f001 ff73 	bl	8004894 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	460b      	mov	r3, r1
 80029c2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029c4:	78fb      	ldrb	r3, [r7, #3]
 80029c6:	f003 020f 	and.w	r2, r3, #15
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	460b      	mov	r3, r1
 80029f6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f8:	7afb      	ldrb	r3, [r7, #11]
 80029fa:	f003 020f 	and.w	r2, r3, #15
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	3338      	adds	r3, #56	; 0x38
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2201      	movs	r2, #1
 8002a26:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a28:	7afb      	ldrb	r3, [r7, #11]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d102      	bne.n	8002a42 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a42:	7afb      	ldrb	r3, [r7, #11]
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6818      	ldr	r0, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	461a      	mov	r2, r3
 8002a58:	6979      	ldr	r1, [r7, #20]
 8002a5a:	f002 f963 	bl	8004d24 <USB_EP0StartXfer>
 8002a5e:	e008      	b.n	8002a72 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	6979      	ldr	r1, [r7, #20]
 8002a6e:	f001 ff11 	bl	8004894 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	460b      	mov	r3, r1
 8002a86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	f003 020f 	and.w	r2, r3, #15
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d901      	bls.n	8002a9a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e050      	b.n	8002b3c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da0f      	bge.n	8002ac2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	f003 020f 	and.w	r2, r3, #15
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	3338      	adds	r3, #56	; 0x38
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	3304      	adds	r3, #4
 8002ab8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2201      	movs	r2, #1
 8002abe:	705a      	strb	r2, [r3, #1]
 8002ac0:	e00d      	b.n	8002ade <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	4413      	add	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d101      	bne.n	8002afe <HAL_PCD_EP_SetStall+0x82>
 8002afa:	2302      	movs	r3, #2
 8002afc:	e01e      	b.n	8002b3c <HAL_PCD_EP_SetStall+0xc0>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68f9      	ldr	r1, [r7, #12]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f002 fba1 	bl	8005254 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	b2d9      	uxtb	r1, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f002 fd91 	bl	8005654 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 020f 	and.w	r2, r3, #15
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d901      	bls.n	8002b62 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e042      	b.n	8002be8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	da0f      	bge.n	8002b8a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	f003 020f 	and.w	r2, r3, #15
 8002b70:	4613      	mov	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	3338      	adds	r3, #56	; 0x38
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3304      	adds	r3, #4
 8002b80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2201      	movs	r2, #1
 8002b86:	705a      	strb	r2, [r3, #1]
 8002b88:	e00f      	b.n	8002baa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	f003 020f 	and.w	r2, r3, #15
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb0:	78fb      	ldrb	r3, [r7, #3]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_PCD_EP_ClrStall+0x86>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e00e      	b.n	8002be8 <HAL_PCD_EP_ClrStall+0xa4>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68f9      	ldr	r1, [r7, #12]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f002 fba9 	bl	8005330 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	da0c      	bge.n	8002c1e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c04:	78fb      	ldrb	r3, [r7, #3]
 8002c06:	f003 020f 	and.w	r2, r3, #15
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	3338      	adds	r3, #56	; 0x38
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	4413      	add	r3, r2
 8002c18:	3304      	adds	r3, #4
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	e00c      	b.n	8002c38 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c1e:	78fb      	ldrb	r3, [r7, #3]
 8002c20:	f003 020f 	and.w	r2, r3, #15
 8002c24:	4613      	mov	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	4413      	add	r3, r2
 8002c34:	3304      	adds	r3, #4
 8002c36:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68f9      	ldr	r1, [r7, #12]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f002 f9c8 	bl	8004fd4 <USB_EPStopXfer>
 8002c44:	4603      	mov	r3, r0
 8002c46:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c48:	7afb      	ldrb	r3, [r7, #11]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b08a      	sub	sp, #40	; 0x28
 8002c56:	af02      	add	r7, sp, #8
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	3338      	adds	r3, #56	; 0x38
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	4413      	add	r3, r2
 8002c76:	3304      	adds	r3, #4
 8002c78:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1a      	ldr	r2, [r3, #32]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d901      	bls.n	8002c8a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e06c      	b.n	8002d64 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a1b      	ldr	r3, [r3, #32]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d902      	bls.n	8002ca6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3303      	adds	r3, #3
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cae:	e02b      	b.n	8002d08 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	699a      	ldr	r2, [r3, #24]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a1b      	ldr	r3, [r3, #32]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d902      	bls.n	8002ccc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	3303      	adds	r3, #3
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6919      	ldr	r1, [r3, #16]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	9300      	str	r3, [sp, #0]
 8002ce8:	4603      	mov	r3, r0
 8002cea:	6978      	ldr	r0, [r7, #20]
 8002cec:	f002 fa1c 	bl	8005128 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	441a      	add	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a1a      	ldr	r2, [r3, #32]
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	441a      	add	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d809      	bhi.n	8002d32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6a1a      	ldr	r2, [r3, #32]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d203      	bcs.n	8002d32 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1be      	bne.n	8002cb0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d811      	bhi.n	8002d62 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	f003 030f 	and.w	r3, r3, #15
 8002d44:	2201      	movs	r2, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	6939      	ldr	r1, [r7, #16]
 8002d5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d5e:	4013      	ands	r3, r2
 8002d60:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	333c      	adds	r3, #60	; 0x3c
 8002d84:	3304      	adds	r3, #4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d17b      	bne.n	8002e9a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d015      	beq.n	8002dd8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	4a61      	ldr	r2, [pc, #388]	; (8002f34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	f240 80b9 	bls.w	8002f28 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80b3 	beq.w	8002f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	015a      	lsls	r2, r3, #5
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dd4:	6093      	str	r3, [r2, #8]
 8002dd6:	e0a7      	b.n	8002f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0320 	and.w	r3, r3, #32
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d009      	beq.n	8002df6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dee:	461a      	mov	r2, r3
 8002df0:	2320      	movs	r3, #32
 8002df2:	6093      	str	r3, [r2, #8]
 8002df4:	e098      	b.n	8002f28 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 8093 	bne.w	8002f28 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	4a4b      	ldr	r2, [pc, #300]	; (8002f34 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d90f      	bls.n	8002e2a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00a      	beq.n	8002e2a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e20:	461a      	mov	r2, r3
 8002e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e26:	6093      	str	r3, [r2, #8]
 8002e28:	e07e      	b.n	8002f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	69da      	ldr	r2, [r3, #28]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	0159      	lsls	r1, r3, #5
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	440b      	add	r3, r1
 8002e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e56:	1ad2      	subs	r2, r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d114      	bne.n	8002e8c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e74:	461a      	mov	r2, r3
 8002e76:	2101      	movs	r1, #1
 8002e78:	f002 fbec 	bl	8005654 <USB_EP0_OutStart>
 8002e7c:	e006      	b.n	8002e8c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	441a      	add	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	4619      	mov	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f004 fea4 	bl	8007be0 <HAL_PCD_DataOutStageCallback>
 8002e98:	e046      	b.n	8002f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	4a26      	ldr	r2, [pc, #152]	; (8002f38 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d124      	bne.n	8002eec <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	015a      	lsls	r2, r3, #5
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eb8:	461a      	mov	r2, r3
 8002eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ebe:	6093      	str	r3, [r2, #8]
 8002ec0:	e032      	b.n	8002f28 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed8:	461a      	mov	r2, r3
 8002eda:	2320      	movs	r3, #32
 8002edc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f004 fe7b 	bl	8007be0 <HAL_PCD_DataOutStageCallback>
 8002eea:	e01d      	b.n	8002f28 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d114      	bne.n	8002f1c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4413      	add	r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d108      	bne.n	8002f1c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f14:	461a      	mov	r2, r3
 8002f16:	2100      	movs	r1, #0
 8002f18:	f002 fb9c 	bl	8005654 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4619      	mov	r1, r3
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f004 fe5c 	bl	8007be0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3720      	adds	r7, #32
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	4f54300a 	.word	0x4f54300a
 8002f38:	4f54310a 	.word	0x4f54310a

08002f3c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	333c      	adds	r3, #60	; 0x3c
 8002f54:	3304      	adds	r3, #4
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4a15      	ldr	r2, [pc, #84]	; (8002fc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d90e      	bls.n	8002f90 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d009      	beq.n	8002f90 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f8e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f004 fe13 	bl	8007bbc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d90c      	bls.n	8002fb8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d108      	bne.n	8002fb8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	f002 fb4e 	bl	8005654 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	4f54300a 	.word	0x4f54300a

08002fc8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d107      	bne.n	8002ff6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fe6:	883b      	ldrh	r3, [r7, #0]
 8002fe8:	0419      	lsls	r1, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff4:	e028      	b.n	8003048 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	4413      	add	r3, r2
 8003002:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003004:	2300      	movs	r3, #0
 8003006:	73fb      	strb	r3, [r7, #15]
 8003008:	e00d      	b.n	8003026 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	7bfb      	ldrb	r3, [r7, #15]
 8003010:	3340      	adds	r3, #64	; 0x40
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	0c1b      	lsrs	r3, r3, #16
 800301a:	68ba      	ldr	r2, [r7, #8]
 800301c:	4413      	add	r3, r2
 800301e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003020:	7bfb      	ldrb	r3, [r7, #15]
 8003022:	3301      	adds	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
 8003026:	7bfa      	ldrb	r2, [r7, #15]
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	3b01      	subs	r3, #1
 800302c:	429a      	cmp	r2, r3
 800302e:	d3ec      	bcc.n	800300a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003030:	883b      	ldrh	r3, [r7, #0]
 8003032:	0418      	lsls	r0, r3, #16
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6819      	ldr	r1, [r3, #0]
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	3b01      	subs	r3, #1
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	4302      	orrs	r2, r0
 8003040:	3340      	adds	r3, #64	; 0x40
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	460b      	mov	r3, r1
 8003060:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	887a      	ldrh	r2, [r7, #2]
 8003068:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e267      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d075      	beq.n	800319a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ae:	4b88      	ldr	r3, [pc, #544]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d00c      	beq.n	80030d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ba:	4b85      	ldr	r3, [pc, #532]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030c2:	2b08      	cmp	r3, #8
 80030c4:	d112      	bne.n	80030ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c6:	4b82      	ldr	r3, [pc, #520]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030d2:	d10b      	bne.n	80030ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d4:	4b7e      	ldr	r3, [pc, #504]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d05b      	beq.n	8003198 <HAL_RCC_OscConfig+0x108>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d157      	bne.n	8003198 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e242      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030f4:	d106      	bne.n	8003104 <HAL_RCC_OscConfig+0x74>
 80030f6:	4b76      	ldr	r3, [pc, #472]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a75      	ldr	r2, [pc, #468]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80030fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003100:	6013      	str	r3, [r2, #0]
 8003102:	e01d      	b.n	8003140 <HAL_RCC_OscConfig+0xb0>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x98>
 800310e:	4b70      	ldr	r3, [pc, #448]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a6f      	ldr	r2, [pc, #444]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003114:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003118:	6013      	str	r3, [r2, #0]
 800311a:	4b6d      	ldr	r3, [pc, #436]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a6c      	ldr	r2, [pc, #432]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0xb0>
 8003128:	4b69      	ldr	r3, [pc, #420]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a68      	ldr	r2, [pc, #416]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800312e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003132:	6013      	str	r3, [r2, #0]
 8003134:	4b66      	ldr	r3, [pc, #408]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a65      	ldr	r2, [pc, #404]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800313a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800313e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d013      	beq.n	8003170 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fd ff1e 	bl	8000f88 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003150:	f7fd ff1a 	bl	8000f88 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e207      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	4b5b      	ldr	r3, [pc, #364]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f0      	beq.n	8003150 <HAL_RCC_OscConfig+0xc0>
 800316e:	e014      	b.n	800319a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fd ff0a 	bl	8000f88 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003178:	f7fd ff06 	bl	8000f88 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	; 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e1f3      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	4b51      	ldr	r3, [pc, #324]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0xe8>
 8003196:	e000      	b.n	800319a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003198:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d063      	beq.n	800326e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031a6:	4b4a      	ldr	r3, [pc, #296]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031b2:	4b47      	ldr	r3, [pc, #284]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d11c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031be:	4b44      	ldr	r3, [pc, #272]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d116      	bne.n	80031f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	4b41      	ldr	r3, [pc, #260]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d005      	beq.n	80031e2 <HAL_RCC_OscConfig+0x152>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d001      	beq.n	80031e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e1c7      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	4937      	ldr	r1, [pc, #220]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031f6:	e03a      	b.n	800326e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d020      	beq.n	8003242 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003200:	4b34      	ldr	r3, [pc, #208]	; (80032d4 <HAL_RCC_OscConfig+0x244>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003206:	f7fd febf 	bl	8000f88 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320e:	f7fd febb 	bl	8000f88 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e1a8      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	4b2b      	ldr	r3, [pc, #172]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322c:	4b28      	ldr	r3, [pc, #160]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	4925      	ldr	r1, [pc, #148]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 800323c:	4313      	orrs	r3, r2
 800323e:	600b      	str	r3, [r1, #0]
 8003240:	e015      	b.n	800326e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_RCC_OscConfig+0x244>)
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003248:	f7fd fe9e 	bl	8000f88 <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003250:	f7fd fe9a 	bl	8000f88 <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e187      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d1f0      	bne.n	8003250 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0308 	and.w	r3, r3, #8
 8003276:	2b00      	cmp	r3, #0
 8003278:	d036      	beq.n	80032e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d016      	beq.n	80032b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003282:	4b15      	ldr	r3, [pc, #84]	; (80032d8 <HAL_RCC_OscConfig+0x248>)
 8003284:	2201      	movs	r2, #1
 8003286:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003288:	f7fd fe7e 	bl	8000f88 <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003290:	f7fd fe7a 	bl	8000f88 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b02      	cmp	r3, #2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e167      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x240>)
 80032a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0x200>
 80032ae:	e01b      	b.n	80032e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b0:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_OscConfig+0x248>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b6:	f7fd fe67 	bl	8000f88 <HAL_GetTick>
 80032ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032bc:	e00e      	b.n	80032dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032be:	f7fd fe63 	bl	8000f88 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d907      	bls.n	80032dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e150      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
 80032d0:	40023800 	.word	0x40023800
 80032d4:	42470000 	.word	0x42470000
 80032d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	4b88      	ldr	r3, [pc, #544]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80032de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1ea      	bne.n	80032be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8097 	beq.w	8003424 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fa:	4b81      	ldr	r3, [pc, #516]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10f      	bne.n	8003326 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	4b7d      	ldr	r3, [pc, #500]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	4a7c      	ldr	r2, [pc, #496]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003310:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003314:	6413      	str	r3, [r2, #64]	; 0x40
 8003316:	4b7a      	ldr	r3, [pc, #488]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331e:	60bb      	str	r3, [r7, #8]
 8003320:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003326:	4b77      	ldr	r3, [pc, #476]	; (8003504 <HAL_RCC_OscConfig+0x474>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d118      	bne.n	8003364 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003332:	4b74      	ldr	r3, [pc, #464]	; (8003504 <HAL_RCC_OscConfig+0x474>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a73      	ldr	r2, [pc, #460]	; (8003504 <HAL_RCC_OscConfig+0x474>)
 8003338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333e:	f7fd fe23 	bl	8000f88 <HAL_GetTick>
 8003342:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003344:	e008      	b.n	8003358 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003346:	f7fd fe1f 	bl	8000f88 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e10c      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	4b6a      	ldr	r3, [pc, #424]	; (8003504 <HAL_RCC_OscConfig+0x474>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003360:	2b00      	cmp	r3, #0
 8003362:	d0f0      	beq.n	8003346 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d106      	bne.n	800337a <HAL_RCC_OscConfig+0x2ea>
 800336c:	4b64      	ldr	r3, [pc, #400]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 800336e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003370:	4a63      	ldr	r2, [pc, #396]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6713      	str	r3, [r2, #112]	; 0x70
 8003378:	e01c      	b.n	80033b4 <HAL_RCC_OscConfig+0x324>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b05      	cmp	r3, #5
 8003380:	d10c      	bne.n	800339c <HAL_RCC_OscConfig+0x30c>
 8003382:	4b5f      	ldr	r3, [pc, #380]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003386:	4a5e      	ldr	r2, [pc, #376]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003388:	f043 0304 	orr.w	r3, r3, #4
 800338c:	6713      	str	r3, [r2, #112]	; 0x70
 800338e:	4b5c      	ldr	r3, [pc, #368]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a5b      	ldr	r2, [pc, #364]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
 800339a:	e00b      	b.n	80033b4 <HAL_RCC_OscConfig+0x324>
 800339c:	4b58      	ldr	r3, [pc, #352]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 800339e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a0:	4a57      	ldr	r2, [pc, #348]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80033a2:	f023 0301 	bic.w	r3, r3, #1
 80033a6:	6713      	str	r3, [r2, #112]	; 0x70
 80033a8:	4b55      	ldr	r3, [pc, #340]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	4a54      	ldr	r2, [pc, #336]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80033ae:	f023 0304 	bic.w	r3, r3, #4
 80033b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d015      	beq.n	80033e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fd fde4 	bl	8000f88 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c2:	e00a      	b.n	80033da <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c4:	f7fd fde0 	bl	8000f88 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e0cb      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033da:	4b49      	ldr	r3, [pc, #292]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0ee      	beq.n	80033c4 <HAL_RCC_OscConfig+0x334>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e8:	f7fd fdce 	bl	8000f88 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fd fdca 	bl	8000f88 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e0b5      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003406:	4b3e      	ldr	r3, [pc, #248]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1ee      	bne.n	80033f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d105      	bne.n	8003424 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003418:	4b39      	ldr	r3, [pc, #228]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	4a38      	ldr	r2, [pc, #224]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 800341e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003422:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80a1 	beq.w	8003570 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800342e:	4b34      	ldr	r3, [pc, #208]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
 8003436:	2b08      	cmp	r3, #8
 8003438:	d05c      	beq.n	80034f4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d141      	bne.n	80034c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003442:	4b31      	ldr	r3, [pc, #196]	; (8003508 <HAL_RCC_OscConfig+0x478>)
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fd fd9e 	bl	8000f88 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003450:	f7fd fd9a 	bl	8000f88 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e087      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	4b27      	ldr	r3, [pc, #156]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f0      	bne.n	8003450 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69da      	ldr	r2, [r3, #28]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	019b      	lsls	r3, r3, #6
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	085b      	lsrs	r3, r3, #1
 8003486:	3b01      	subs	r3, #1
 8003488:	041b      	lsls	r3, r3, #16
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	491b      	ldr	r1, [pc, #108]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003498:	4b1b      	ldr	r3, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x478>)
 800349a:	2201      	movs	r2, #1
 800349c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349e:	f7fd fd73 	bl	8000f88 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a4:	e008      	b.n	80034b8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fd fd6f 	bl	8000f88 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e05c      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d0f0      	beq.n	80034a6 <HAL_RCC_OscConfig+0x416>
 80034c4:	e054      	b.n	8003570 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034c6:	4b10      	ldr	r3, [pc, #64]	; (8003508 <HAL_RCC_OscConfig+0x478>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fd fd5c 	bl	8000f88 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034d4:	f7fd fd58 	bl	8000f88 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e045      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	4b06      	ldr	r3, [pc, #24]	; (8003500 <HAL_RCC_OscConfig+0x470>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x444>
 80034f2:	e03d      	b.n	8003570 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d107      	bne.n	800350c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e038      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
 8003500:	40023800 	.word	0x40023800
 8003504:	40007000 	.word	0x40007000
 8003508:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800350c:	4b1b      	ldr	r3, [pc, #108]	; (800357c <HAL_RCC_OscConfig+0x4ec>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d028      	beq.n	800356c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d121      	bne.n	800356c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d11a      	bne.n	800356c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800353c:	4013      	ands	r3, r2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003542:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003544:	4293      	cmp	r3, r2
 8003546:	d111      	bne.n	800356c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	3b01      	subs	r3, #1
 8003556:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d107      	bne.n	800356c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023800 	.word	0x40023800

08003580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0cc      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003594:	4b68      	ldr	r3, [pc, #416]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d90c      	bls.n	80035bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b65      	ldr	r3, [pc, #404]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b63      	ldr	r3, [pc, #396]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0b8      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d020      	beq.n	800360a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d4:	4b59      	ldr	r3, [pc, #356]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	4a58      	ldr	r2, [pc, #352]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d005      	beq.n	80035f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ec:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	4a52      	ldr	r2, [pc, #328]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f8:	4b50      	ldr	r3, [pc, #320]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	494d      	ldr	r1, [pc, #308]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d044      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b47      	ldr	r3, [pc, #284]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d119      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e07f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d003      	beq.n	800363e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363a:	2b03      	cmp	r3, #3
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	4b3f      	ldr	r3, [pc, #252]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d109      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e06f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800364e:	4b3b      	ldr	r3, [pc, #236]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e067      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800365e:	4b37      	ldr	r3, [pc, #220]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f023 0203 	bic.w	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4934      	ldr	r1, [pc, #208]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 800366c:	4313      	orrs	r3, r2
 800366e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003670:	f7fd fc8a 	bl	8000f88 <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003676:	e00a      	b.n	800368e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003678:	f7fd fc86 	bl	8000f88 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	f241 3288 	movw	r2, #5000	; 0x1388
 8003686:	4293      	cmp	r3, r2
 8003688:	d901      	bls.n	800368e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e04f      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368e:	4b2b      	ldr	r3, [pc, #172]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 020c 	and.w	r2, r3, #12
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	429a      	cmp	r2, r3
 800369e:	d1eb      	bne.n	8003678 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036a0:	4b25      	ldr	r3, [pc, #148]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0307 	and.w	r3, r3, #7
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d20c      	bcs.n	80036c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ae:	4b22      	ldr	r3, [pc, #136]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	b2d2      	uxtb	r2, r2
 80036b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036b6:	4b20      	ldr	r3, [pc, #128]	; (8003738 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e032      	b.n	800372e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0304 	and.w	r3, r3, #4
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d008      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d4:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	4916      	ldr	r1, [pc, #88]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0308 	and.w	r3, r3, #8
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f2:	4b12      	ldr	r3, [pc, #72]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	490e      	ldr	r1, [pc, #56]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003706:	f000 f821 	bl	800374c <HAL_RCC_GetSysClockFreq>
 800370a:	4602      	mov	r2, r0
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	091b      	lsrs	r3, r3, #4
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	490a      	ldr	r1, [pc, #40]	; (8003740 <HAL_RCC_ClockConfig+0x1c0>)
 8003718:	5ccb      	ldrb	r3, [r1, r3]
 800371a:	fa22 f303 	lsr.w	r3, r2, r3
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HAL_RCC_ClockConfig+0x1c8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd fbea 	bl	8000f00 <HAL_InitTick>

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40023c00 	.word	0x40023c00
 800373c:	40023800 	.word	0x40023800
 8003740:	08009150 	.word	0x08009150
 8003744:	20000000 	.word	0x20000000
 8003748:	20000004 	.word	0x20000004

0800374c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800374c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003750:	b090      	sub	sp, #64	; 0x40
 8003752:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	637b      	str	r3, [r7, #52]	; 0x34
 8003758:	2300      	movs	r3, #0
 800375a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800375c:	2300      	movs	r3, #0
 800375e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003764:	4b59      	ldr	r3, [pc, #356]	; (80038cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 030c 	and.w	r3, r3, #12
 800376c:	2b08      	cmp	r3, #8
 800376e:	d00d      	beq.n	800378c <HAL_RCC_GetSysClockFreq+0x40>
 8003770:	2b08      	cmp	r3, #8
 8003772:	f200 80a1 	bhi.w	80038b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_RCC_GetSysClockFreq+0x34>
 800377a:	2b04      	cmp	r3, #4
 800377c:	d003      	beq.n	8003786 <HAL_RCC_GetSysClockFreq+0x3a>
 800377e:	e09b      	b.n	80038b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003780:	4b53      	ldr	r3, [pc, #332]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003782:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003784:	e09b      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003786:	4b53      	ldr	r3, [pc, #332]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003788:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800378a:	e098      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800378c:	4b4f      	ldr	r3, [pc, #316]	; (80038cc <HAL_RCC_GetSysClockFreq+0x180>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003794:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003796:	4b4d      	ldr	r3, [pc, #308]	; (80038cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d028      	beq.n	80037f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a2:	4b4a      	ldr	r3, [pc, #296]	; (80038cc <HAL_RCC_GetSysClockFreq+0x180>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	099b      	lsrs	r3, r3, #6
 80037a8:	2200      	movs	r2, #0
 80037aa:	623b      	str	r3, [r7, #32]
 80037ac:	627a      	str	r2, [r7, #36]	; 0x24
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037b4:	2100      	movs	r1, #0
 80037b6:	4b47      	ldr	r3, [pc, #284]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037b8:	fb03 f201 	mul.w	r2, r3, r1
 80037bc:	2300      	movs	r3, #0
 80037be:	fb00 f303 	mul.w	r3, r0, r3
 80037c2:	4413      	add	r3, r2
 80037c4:	4a43      	ldr	r2, [pc, #268]	; (80038d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037c6:	fba0 1202 	umull	r1, r2, r0, r2
 80037ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037cc:	460a      	mov	r2, r1
 80037ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80037d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037d2:	4413      	add	r3, r2
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037d8:	2200      	movs	r2, #0
 80037da:	61bb      	str	r3, [r7, #24]
 80037dc:	61fa      	str	r2, [r7, #28]
 80037de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037e6:	f7fc fd4b 	bl	8000280 <__aeabi_uldivmod>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4613      	mov	r3, r2
 80037f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037f2:	e053      	b.n	800389c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f4:	4b35      	ldr	r3, [pc, #212]	; (80038cc <HAL_RCC_GetSysClockFreq+0x180>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	099b      	lsrs	r3, r3, #6
 80037fa:	2200      	movs	r2, #0
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	617a      	str	r2, [r7, #20]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003806:	f04f 0b00 	mov.w	fp, #0
 800380a:	4652      	mov	r2, sl
 800380c:	465b      	mov	r3, fp
 800380e:	f04f 0000 	mov.w	r0, #0
 8003812:	f04f 0100 	mov.w	r1, #0
 8003816:	0159      	lsls	r1, r3, #5
 8003818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800381c:	0150      	lsls	r0, r2, #5
 800381e:	4602      	mov	r2, r0
 8003820:	460b      	mov	r3, r1
 8003822:	ebb2 080a 	subs.w	r8, r2, sl
 8003826:	eb63 090b 	sbc.w	r9, r3, fp
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003836:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800383a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800383e:	ebb2 0408 	subs.w	r4, r2, r8
 8003842:	eb63 0509 	sbc.w	r5, r3, r9
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	00eb      	lsls	r3, r5, #3
 8003850:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003854:	00e2      	lsls	r2, r4, #3
 8003856:	4614      	mov	r4, r2
 8003858:	461d      	mov	r5, r3
 800385a:	eb14 030a 	adds.w	r3, r4, sl
 800385e:	603b      	str	r3, [r7, #0]
 8003860:	eb45 030b 	adc.w	r3, r5, fp
 8003864:	607b      	str	r3, [r7, #4]
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003872:	4629      	mov	r1, r5
 8003874:	028b      	lsls	r3, r1, #10
 8003876:	4621      	mov	r1, r4
 8003878:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800387c:	4621      	mov	r1, r4
 800387e:	028a      	lsls	r2, r1, #10
 8003880:	4610      	mov	r0, r2
 8003882:	4619      	mov	r1, r3
 8003884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003886:	2200      	movs	r2, #0
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	60fa      	str	r2, [r7, #12]
 800388c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003890:	f7fc fcf6 	bl	8000280 <__aeabi_uldivmod>
 8003894:	4602      	mov	r2, r0
 8003896:	460b      	mov	r3, r1
 8003898:	4613      	mov	r3, r2
 800389a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_GetSysClockFreq+0x180>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	0c1b      	lsrs	r3, r3, #16
 80038a2:	f003 0303 	and.w	r3, r3, #3
 80038a6:	3301      	adds	r3, #1
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038b6:	e002      	b.n	80038be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80038ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3740      	adds	r7, #64	; 0x40
 80038c4:	46bd      	mov	sp, r7
 80038c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ca:	bf00      	nop
 80038cc:	40023800 	.word	0x40023800
 80038d0:	00f42400 	.word	0x00f42400
 80038d4:	017d7840 	.word	0x017d7840

080038d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038dc:	4b03      	ldr	r3, [pc, #12]	; (80038ec <HAL_RCC_GetHCLKFreq+0x14>)
 80038de:	681b      	ldr	r3, [r3, #0]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	20000000 	.word	0x20000000

080038f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07b      	b.n	80039fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d108      	bne.n	800391c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003912:	d009      	beq.n	8003928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	61da      	str	r2, [r3, #28]
 800391a:	e005      	b.n	8003928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd f894 	bl	8000a70 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800395e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ac:	ea42 0103 	orr.w	r1, r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 0104 	and.w	r1, r3, #4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	f003 0210 	and.w	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b08c      	sub	sp, #48	; 0x30
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a10:	2301      	movs	r3, #1
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a14:	2300      	movs	r3, #0
 8003a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x26>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e18a      	b.n	8003d3e <HAL_SPI_TransmitReceive+0x33c>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a30:	f7fd faaa 	bl	8000f88 <HAL_GetTick>
 8003a34:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a46:	887b      	ldrh	r3, [r7, #2]
 8003a48:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d00f      	beq.n	8003a72 <HAL_SPI_TransmitReceive+0x70>
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a58:	d107      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d103      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x68>
 8003a62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d003      	beq.n	8003a72 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a70:	e15b      	b.n	8003d2a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d005      	beq.n	8003a84 <HAL_SPI_TransmitReceive+0x82>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <HAL_SPI_TransmitReceive+0x82>
 8003a7e:	887b      	ldrh	r3, [r7, #2]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d103      	bne.n	8003a8c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a8a:	e14e      	b.n	8003d2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b04      	cmp	r3, #4
 8003a96:	d003      	beq.n	8003aa0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2205      	movs	r2, #5
 8003a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	887a      	ldrh	r2, [r7, #2]
 8003ab0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	887a      	ldrh	r2, [r7, #2]
 8003ab6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	887a      	ldrh	r2, [r7, #2]
 8003ac2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	887a      	ldrh	r2, [r7, #2]
 8003ac8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae0:	2b40      	cmp	r3, #64	; 0x40
 8003ae2:	d007      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003afc:	d178      	bne.n	8003bf0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d002      	beq.n	8003b0c <HAL_SPI_TransmitReceive+0x10a>
 8003b06:	8b7b      	ldrh	r3, [r7, #26]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d166      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	881a      	ldrh	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	1c9a      	adds	r2, r3, #2
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b30:	e053      	b.n	8003bda <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d11b      	bne.n	8003b78 <HAL_SPI_TransmitReceive+0x176>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d016      	beq.n	8003b78 <HAL_SPI_TransmitReceive+0x176>
 8003b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d113      	bne.n	8003b78 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b54:	881a      	ldrh	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b60:	1c9a      	adds	r2, r3, #2
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d119      	bne.n	8003bba <HAL_SPI_TransmitReceive+0x1b8>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d014      	beq.n	8003bba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	b292      	uxth	r2, r2
 8003b9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba2:	1c9a      	adds	r2, r3, #2
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bba:	f7fd f9e5 	bl	8000f88 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d807      	bhi.n	8003bda <HAL_SPI_TransmitReceive+0x1d8>
 8003bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d003      	beq.n	8003bda <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003bd8:	e0a7      	b.n	8003d2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1a6      	bne.n	8003b32 <HAL_SPI_TransmitReceive+0x130>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1a1      	bne.n	8003b32 <HAL_SPI_TransmitReceive+0x130>
 8003bee:	e07c      	b.n	8003cea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d002      	beq.n	8003bfe <HAL_SPI_TransmitReceive+0x1fc>
 8003bf8:	8b7b      	ldrh	r3, [r7, #26]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d16b      	bne.n	8003cd6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	330c      	adds	r3, #12
 8003c08:	7812      	ldrb	r2, [r2, #0]
 8003c0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c24:	e057      	b.n	8003cd6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d11c      	bne.n	8003c6e <HAL_SPI_TransmitReceive+0x26c>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d017      	beq.n	8003c6e <HAL_SPI_TransmitReceive+0x26c>
 8003c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d114      	bne.n	8003c6e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	330c      	adds	r3, #12
 8003c4e:	7812      	ldrb	r2, [r2, #0]
 8003c50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d119      	bne.n	8003cb0 <HAL_SPI_TransmitReceive+0x2ae>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d014      	beq.n	8003cb0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cac:	2301      	movs	r3, #1
 8003cae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cb0:	f7fd f96a 	bl	8000f88 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d803      	bhi.n	8003cc8 <HAL_SPI_TransmitReceive+0x2c6>
 8003cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	d102      	bne.n	8003cce <HAL_SPI_TransmitReceive+0x2cc>
 8003cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d103      	bne.n	8003cd6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003cd4:	e029      	b.n	8003d2a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d1a2      	bne.n	8003c26 <HAL_SPI_TransmitReceive+0x224>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d19d      	bne.n	8003c26 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f8b2 	bl	8003e58 <SPI_EndRxTxTransaction>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d006      	beq.n	8003d08 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d06:	e010      	b.n	8003d2a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10b      	bne.n	8003d28 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	617b      	str	r3, [r7, #20]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	e000      	b.n	8003d2a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d28:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3730      	adds	r7, #48	; 0x30
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d58:	f7fd f916 	bl	8000f88 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	4413      	add	r3, r2
 8003d66:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d68:	f7fd f90e 	bl	8000f88 <HAL_GetTick>
 8003d6c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d6e:	4b39      	ldr	r3, [pc, #228]	; (8003e54 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	015b      	lsls	r3, r3, #5
 8003d74:	0d1b      	lsrs	r3, r3, #20
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	fb02 f303 	mul.w	r3, r2, r3
 8003d7c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d7e:	e054      	b.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d86:	d050      	beq.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d88:	f7fd f8fe 	bl	8000f88 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	69fa      	ldr	r2, [r7, #28]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d902      	bls.n	8003d9e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d13d      	bne.n	8003e1a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	685a      	ldr	r2, [r3, #4]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003db6:	d111      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc0:	d004      	beq.n	8003dcc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dca:	d107      	bne.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dda:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003de0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de4:	d10f      	bne.n	8003e06 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e04:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e017      	b.n	8003e4a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e20:	2300      	movs	r3, #0
 8003e22:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3b01      	subs	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4013      	ands	r3, r2
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	bf0c      	ite	eq
 8003e3a:	2301      	moveq	r3, #1
 8003e3c:	2300      	movne	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	461a      	mov	r2, r3
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d19b      	bne.n	8003d80 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000000 	.word	0x20000000

08003e58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e64:	4b1b      	ldr	r3, [pc, #108]	; (8003ed4 <SPI_EndRxTxTransaction+0x7c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1b      	ldr	r2, [pc, #108]	; (8003ed8 <SPI_EndRxTxTransaction+0x80>)
 8003e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6e:	0d5b      	lsrs	r3, r3, #21
 8003e70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e74:	fb02 f303 	mul.w	r3, r2, r3
 8003e78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e82:	d112      	bne.n	8003eaa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2180      	movs	r1, #128	; 0x80
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7ff ff5a 	bl	8003d48 <SPI_WaitFlagStateUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d016      	beq.n	8003ec8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e00f      	b.n	8003eca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d00a      	beq.n	8003ec6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ec0:	2b80      	cmp	r3, #128	; 0x80
 8003ec2:	d0f2      	beq.n	8003eaa <SPI_EndRxTxTransaction+0x52>
 8003ec4:	e000      	b.n	8003ec8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ec6:	bf00      	nop
  }

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	165e9f81 	.word	0x165e9f81

08003edc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003edc:	b084      	sub	sp, #16
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
 8003ee6:	f107 001c 	add.w	r0, r7, #28
 8003eea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d122      	bne.n	8003f3a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d105      	bne.n	8003f2e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f001 fbee 	bl	8005710 <USB_CoreReset>
 8003f34:	4603      	mov	r3, r0
 8003f36:	73fb      	strb	r3, [r7, #15]
 8003f38:	e01a      	b.n	8003f70 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f001 fbe2 	bl	8005710 <USB_CoreReset>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	639a      	str	r2, [r3, #56]	; 0x38
 8003f62:	e005      	b.n	8003f70 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d10b      	bne.n	8003f8e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f043 0206 	orr.w	r2, r3, #6
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f043 0220 	orr.w	r2, r3, #32
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f9a:	b004      	add	sp, #16
 8003f9c:	4770      	bx	lr
	...

08003fa0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b087      	sub	sp, #28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d165      	bne.n	8004080 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4a41      	ldr	r2, [pc, #260]	; (80040bc <USB_SetTurnaroundTime+0x11c>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d906      	bls.n	8003fca <USB_SetTurnaroundTime+0x2a>
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4a40      	ldr	r2, [pc, #256]	; (80040c0 <USB_SetTurnaroundTime+0x120>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d202      	bcs.n	8003fca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003fc4:	230f      	movs	r3, #15
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e062      	b.n	8004090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4a3c      	ldr	r2, [pc, #240]	; (80040c0 <USB_SetTurnaroundTime+0x120>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d306      	bcc.n	8003fe0 <USB_SetTurnaroundTime+0x40>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4a3b      	ldr	r2, [pc, #236]	; (80040c4 <USB_SetTurnaroundTime+0x124>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d202      	bcs.n	8003fe0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003fda:	230e      	movs	r3, #14
 8003fdc:	617b      	str	r3, [r7, #20]
 8003fde:	e057      	b.n	8004090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4a38      	ldr	r2, [pc, #224]	; (80040c4 <USB_SetTurnaroundTime+0x124>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d306      	bcc.n	8003ff6 <USB_SetTurnaroundTime+0x56>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4a37      	ldr	r2, [pc, #220]	; (80040c8 <USB_SetTurnaroundTime+0x128>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d202      	bcs.n	8003ff6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003ff0:	230d      	movs	r3, #13
 8003ff2:	617b      	str	r3, [r7, #20]
 8003ff4:	e04c      	b.n	8004090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	4a33      	ldr	r2, [pc, #204]	; (80040c8 <USB_SetTurnaroundTime+0x128>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d306      	bcc.n	800400c <USB_SetTurnaroundTime+0x6c>
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	4a32      	ldr	r2, [pc, #200]	; (80040cc <USB_SetTurnaroundTime+0x12c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d802      	bhi.n	800400c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004006:	230c      	movs	r3, #12
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	e041      	b.n	8004090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4a2f      	ldr	r2, [pc, #188]	; (80040cc <USB_SetTurnaroundTime+0x12c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d906      	bls.n	8004022 <USB_SetTurnaroundTime+0x82>
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	4a2e      	ldr	r2, [pc, #184]	; (80040d0 <USB_SetTurnaroundTime+0x130>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d802      	bhi.n	8004022 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800401c:	230b      	movs	r3, #11
 800401e:	617b      	str	r3, [r7, #20]
 8004020:	e036      	b.n	8004090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4a2a      	ldr	r2, [pc, #168]	; (80040d0 <USB_SetTurnaroundTime+0x130>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d906      	bls.n	8004038 <USB_SetTurnaroundTime+0x98>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	4a29      	ldr	r2, [pc, #164]	; (80040d4 <USB_SetTurnaroundTime+0x134>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d802      	bhi.n	8004038 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004032:	230a      	movs	r3, #10
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	e02b      	b.n	8004090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4a26      	ldr	r2, [pc, #152]	; (80040d4 <USB_SetTurnaroundTime+0x134>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d906      	bls.n	800404e <USB_SetTurnaroundTime+0xae>
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <USB_SetTurnaroundTime+0x138>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d202      	bcs.n	800404e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004048:	2309      	movs	r3, #9
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	e020      	b.n	8004090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4a21      	ldr	r2, [pc, #132]	; (80040d8 <USB_SetTurnaroundTime+0x138>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d306      	bcc.n	8004064 <USB_SetTurnaroundTime+0xc4>
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4a20      	ldr	r2, [pc, #128]	; (80040dc <USB_SetTurnaroundTime+0x13c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d802      	bhi.n	8004064 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800405e:	2308      	movs	r3, #8
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	e015      	b.n	8004090 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	4a1d      	ldr	r2, [pc, #116]	; (80040dc <USB_SetTurnaroundTime+0x13c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d906      	bls.n	800407a <USB_SetTurnaroundTime+0xda>
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <USB_SetTurnaroundTime+0x140>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d202      	bcs.n	800407a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004074:	2307      	movs	r3, #7
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	e00a      	b.n	8004090 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800407a:	2306      	movs	r3, #6
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e007      	b.n	8004090 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004086:	2309      	movs	r3, #9
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	e001      	b.n	8004090 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800408c:	2309      	movs	r3, #9
 800408e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	029b      	lsls	r3, r3, #10
 80040a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80040a8:	431a      	orrs	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	371c      	adds	r7, #28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	00d8acbf 	.word	0x00d8acbf
 80040c0:	00e4e1c0 	.word	0x00e4e1c0
 80040c4:	00f42400 	.word	0x00f42400
 80040c8:	01067380 	.word	0x01067380
 80040cc:	011a499f 	.word	0x011a499f
 80040d0:	01312cff 	.word	0x01312cff
 80040d4:	014ca43f 	.word	0x014ca43f
 80040d8:	016e3600 	.word	0x016e3600
 80040dc:	01a6ab1f 	.word	0x01a6ab1f
 80040e0:	01e84800 	.word	0x01e84800

080040e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f043 0201 	orr.w	r2, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f023 0201 	bic.w	r2, r3, #1
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d115      	bne.n	8004176 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004156:	2001      	movs	r0, #1
 8004158:	f7fc ff22 	bl	8000fa0 <HAL_Delay>
      ms++;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	3301      	adds	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f001 fa45 	bl	80055f2 <USB_GetMode>
 8004168:	4603      	mov	r3, r0
 800416a:	2b01      	cmp	r3, #1
 800416c:	d01e      	beq.n	80041ac <USB_SetCurrentMode+0x84>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b31      	cmp	r3, #49	; 0x31
 8004172:	d9f0      	bls.n	8004156 <USB_SetCurrentMode+0x2e>
 8004174:	e01a      	b.n	80041ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d115      	bne.n	80041a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004188:	2001      	movs	r0, #1
 800418a:	f7fc ff09 	bl	8000fa0 <HAL_Delay>
      ms++;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	3301      	adds	r3, #1
 8004192:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f001 fa2c 	bl	80055f2 <USB_GetMode>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d005      	beq.n	80041ac <USB_SetCurrentMode+0x84>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b31      	cmp	r3, #49	; 0x31
 80041a4:	d9f0      	bls.n	8004188 <USB_SetCurrentMode+0x60>
 80041a6:	e001      	b.n	80041ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e005      	b.n	80041b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b32      	cmp	r3, #50	; 0x32
 80041b0:	d101      	bne.n	80041b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041c0:	b084      	sub	sp, #16
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b086      	sub	sp, #24
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
 80041ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80041ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80041da:	2300      	movs	r3, #0
 80041dc:	613b      	str	r3, [r7, #16]
 80041de:	e009      	b.n	80041f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	3340      	adds	r3, #64	; 0x40
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	2200      	movs	r2, #0
 80041ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	3301      	adds	r3, #1
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b0e      	cmp	r3, #14
 80041f8:	d9f2      	bls.n	80041e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80041fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d11c      	bne.n	800423a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800420e:	f043 0302 	orr.w	r3, r3, #2
 8004212:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004224:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	639a      	str	r2, [r3, #56]	; 0x38
 8004238:	e00b      	b.n	8004252 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004258:	461a      	mov	r2, r3
 800425a:	2300      	movs	r3, #0
 800425c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004264:	4619      	mov	r1, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426c:	461a      	mov	r2, r3
 800426e:	680b      	ldr	r3, [r1, #0]
 8004270:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	2b01      	cmp	r3, #1
 8004276:	d10c      	bne.n	8004292 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	2b00      	cmp	r3, #0
 800427c:	d104      	bne.n	8004288 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800427e:	2100      	movs	r1, #0
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 f965 	bl	8004550 <USB_SetDevSpeed>
 8004286:	e008      	b.n	800429a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004288:	2101      	movs	r1, #1
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f960 	bl	8004550 <USB_SetDevSpeed>
 8004290:	e003      	b.n	800429a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004292:	2103      	movs	r1, #3
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f95b 	bl	8004550 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800429a:	2110      	movs	r1, #16
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f8f3 	bl	8004488 <USB_FlushTxFifo>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d001      	beq.n	80042ac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f91f 	bl	80044f0 <USB_FlushRxFifo>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c2:	461a      	mov	r2, r3
 80042c4:	2300      	movs	r3, #0
 80042c6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ce:	461a      	mov	r2, r3
 80042d0:	2300      	movs	r3, #0
 80042d2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042da:	461a      	mov	r2, r3
 80042dc:	2300      	movs	r3, #0
 80042de:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80042e0:	2300      	movs	r3, #0
 80042e2:	613b      	str	r3, [r7, #16]
 80042e4:	e043      	b.n	800436e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	015a      	lsls	r2, r3, #5
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4413      	add	r3, r2
 80042ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042fc:	d118      	bne.n	8004330 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004310:	461a      	mov	r2, r3
 8004312:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	e013      	b.n	8004342 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004326:	461a      	mov	r2, r3
 8004328:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800432c:	6013      	str	r3, [r2, #0]
 800432e:	e008      	b.n	8004342 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	461a      	mov	r2, r3
 800433e:	2300      	movs	r3, #0
 8004340:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434e:	461a      	mov	r2, r3
 8004350:	2300      	movs	r3, #0
 8004352:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004360:	461a      	mov	r2, r3
 8004362:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004366:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	3301      	adds	r3, #1
 800436c:	613b      	str	r3, [r7, #16]
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	429a      	cmp	r2, r3
 8004374:	d3b7      	bcc.n	80042e6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004376:	2300      	movs	r3, #0
 8004378:	613b      	str	r3, [r7, #16]
 800437a:	e043      	b.n	8004404 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	015a      	lsls	r2, r3, #5
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4413      	add	r3, r2
 8004384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800438e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004392:	d118      	bne.n	80043c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10a      	bne.n	80043b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a6:	461a      	mov	r2, r3
 80043a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	e013      	b.n	80043d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	461a      	mov	r2, r3
 80043be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80043c2:	6013      	str	r3, [r2, #0]
 80043c4:	e008      	b.n	80043d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d2:	461a      	mov	r2, r3
 80043d4:	2300      	movs	r3, #0
 80043d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e4:	461a      	mov	r2, r3
 80043e6:	2300      	movs	r3, #0
 80043e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	015a      	lsls	r2, r3, #5
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4413      	add	r3, r2
 80043f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f6:	461a      	mov	r2, r3
 80043f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3301      	adds	r3, #1
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	429a      	cmp	r2, r3
 800440a:	d3b7      	bcc.n	800437c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	68fa      	ldr	r2, [r7, #12]
 8004416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800441a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800441e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2200      	movs	r2, #0
 8004424:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800442c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	2b00      	cmp	r3, #0
 8004432:	d105      	bne.n	8004440 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	f043 0210 	orr.w	r2, r3, #16
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <USB_DevInit+0x2c4>)
 8004446:	4313      	orrs	r3, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800444c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	f043 0208 	orr.w	r2, r3, #8
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800445e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d107      	bne.n	8004474 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800446c:	f043 0304 	orr.w	r3, r3, #4
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004474:	7dfb      	ldrb	r3, [r7, #23]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004480:	b004      	add	sp, #16
 8004482:	4770      	bx	lr
 8004484:	803c3800 	.word	0x803c3800

08004488 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	3301      	adds	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4a13      	ldr	r2, [pc, #76]	; (80044ec <USB_FlushTxFifo+0x64>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d901      	bls.n	80044a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e01b      	b.n	80044e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	daf2      	bge.n	8004496 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	019b      	lsls	r3, r3, #6
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3301      	adds	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4a08      	ldr	r2, [pc, #32]	; (80044ec <USB_FlushTxFifo+0x64>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e006      	b.n	80044e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	f003 0320 	and.w	r3, r3, #32
 80044da:	2b20      	cmp	r3, #32
 80044dc:	d0f0      	beq.n	80044c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	00030d40 	.word	0x00030d40

080044f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3301      	adds	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4a11      	ldr	r2, [pc, #68]	; (800454c <USB_FlushRxFifo+0x5c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d901      	bls.n	800450e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e018      	b.n	8004540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	daf2      	bge.n	80044fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2210      	movs	r2, #16
 800451e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3301      	adds	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	4a08      	ldr	r2, [pc, #32]	; (800454c <USB_FlushRxFifo+0x5c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e006      	b.n	8004540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	2b10      	cmp	r3, #16
 800453c:	d0f0      	beq.n	8004520 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	00030d40 	.word	0x00030d40

08004550 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	460b      	mov	r3, r1
 800455a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	78fb      	ldrb	r3, [r7, #3]
 800456a:	68f9      	ldr	r1, [r7, #12]
 800456c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004570:	4313      	orrs	r3, r2
 8004572:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004582:	b480      	push	{r7}
 8004584:	b087      	sub	sp, #28
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0306 	and.w	r3, r3, #6
 800459a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80045a2:	2300      	movs	r3, #0
 80045a4:	75fb      	strb	r3, [r7, #23]
 80045a6:	e00a      	b.n	80045be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d002      	beq.n	80045b4 <USB_GetDevSpeed+0x32>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b06      	cmp	r3, #6
 80045b2:	d102      	bne.n	80045ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80045b4:	2302      	movs	r3, #2
 80045b6:	75fb      	strb	r3, [r7, #23]
 80045b8:	e001      	b.n	80045be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80045ba:	230f      	movs	r3, #15
 80045bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80045be:	7dfb      	ldrb	r3, [r7, #23]
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	371c      	adds	r7, #28
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	785b      	ldrb	r3, [r3, #1]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d13a      	bne.n	800465e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	b29b      	uxth	r3, r3
 8004600:	68f9      	ldr	r1, [r7, #12]
 8004602:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004606:	4313      	orrs	r3, r2
 8004608:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	015a      	lsls	r2, r3, #5
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	4413      	add	r3, r2
 8004612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d155      	bne.n	80046cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	791b      	ldrb	r3, [r3, #4]
 800463a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800463c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	059b      	lsls	r3, r3, #22
 8004642:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004644:	4313      	orrs	r3, r2
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	0151      	lsls	r1, r2, #5
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	440a      	add	r2, r1
 800464e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	e036      	b.n	80046cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004664:	69da      	ldr	r2, [r3, #28]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	f003 030f 	and.w	r3, r3, #15
 800466e:	2101      	movs	r1, #1
 8004670:	fa01 f303 	lsl.w	r3, r1, r3
 8004674:	041b      	lsls	r3, r3, #16
 8004676:	68f9      	ldr	r1, [r7, #12]
 8004678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800467c:	4313      	orrs	r3, r2
 800467e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d11a      	bne.n	80046cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	791b      	ldrb	r3, [r3, #4]
 80046b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80046b2:	430b      	orrs	r3, r1
 80046b4:	4313      	orrs	r3, r2
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	0151      	lsls	r1, r2, #5
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	440a      	add	r2, r1
 80046be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	785b      	ldrb	r3, [r3, #1]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d161      	bne.n	80047bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800470a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800470e:	d11f      	bne.n	8004750 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	4413      	add	r3, r2
 8004718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68ba      	ldr	r2, [r7, #8]
 8004720:	0151      	lsls	r1, r2, #5
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	440a      	add	r2, r1
 8004726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800472a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800472e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	0151      	lsls	r1, r2, #5
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	440a      	add	r2, r1
 8004746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800474e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004756:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	f003 030f 	and.w	r3, r3, #15
 8004760:	2101      	movs	r1, #1
 8004762:	fa01 f303 	lsl.w	r3, r1, r3
 8004766:	b29b      	uxth	r3, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	68f9      	ldr	r1, [r7, #12]
 800476c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004770:	4013      	ands	r3, r2
 8004772:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477a:	69da      	ldr	r2, [r3, #28]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	2101      	movs	r1, #1
 8004786:	fa01 f303 	lsl.w	r3, r1, r3
 800478a:	b29b      	uxth	r3, r3
 800478c:	43db      	mvns	r3, r3
 800478e:	68f9      	ldr	r1, [r7, #12]
 8004790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004794:	4013      	ands	r3, r2
 8004796:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	0159      	lsls	r1, r3, #5
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	440b      	add	r3, r1
 80047ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b2:	4619      	mov	r1, r3
 80047b4:	4b35      	ldr	r3, [pc, #212]	; (800488c <USB_DeactivateEndpoint+0x1b0>)
 80047b6:	4013      	ands	r3, r2
 80047b8:	600b      	str	r3, [r1, #0]
 80047ba:	e060      	b.n	800487e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	015a      	lsls	r2, r3, #5
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4413      	add	r3, r2
 80047c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047d2:	d11f      	bne.n	8004814 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	0151      	lsls	r1, r2, #5
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	440a      	add	r2, r1
 80047ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80047f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	0151      	lsls	r1, r2, #5
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	440a      	add	r2, r1
 800480a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800480e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004812:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800481a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	f003 030f 	and.w	r3, r3, #15
 8004824:	2101      	movs	r1, #1
 8004826:	fa01 f303 	lsl.w	r3, r1, r3
 800482a:	041b      	lsls	r3, r3, #16
 800482c:	43db      	mvns	r3, r3
 800482e:	68f9      	ldr	r1, [r7, #12]
 8004830:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004834:	4013      	ands	r3, r2
 8004836:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	69da      	ldr	r2, [r3, #28]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	f003 030f 	and.w	r3, r3, #15
 8004848:	2101      	movs	r1, #1
 800484a:	fa01 f303 	lsl.w	r3, r1, r3
 800484e:	041b      	lsls	r3, r3, #16
 8004850:	43db      	mvns	r3, r3
 8004852:	68f9      	ldr	r1, [r7, #12]
 8004854:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004858:	4013      	ands	r3, r2
 800485a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	015a      	lsls	r2, r3, #5
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	4413      	add	r3, r2
 8004864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	0159      	lsls	r1, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	440b      	add	r3, r1
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	4619      	mov	r1, r3
 8004878:	4b05      	ldr	r3, [pc, #20]	; (8004890 <USB_DeactivateEndpoint+0x1b4>)
 800487a:	4013      	ands	r3, r2
 800487c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	ec337800 	.word	0xec337800
 8004890:	eff37800 	.word	0xeff37800

08004894 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	; 0x28
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	4613      	mov	r3, r2
 80048a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	785b      	ldrb	r3, [r3, #1]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	f040 815c 	bne.w	8004b6e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d132      	bne.n	8004924 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ca:	691b      	ldr	r3, [r3, #16]
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	0151      	lsls	r1, r2, #5
 80048d0:	69fa      	ldr	r2, [r7, #28]
 80048d2:	440a      	add	r2, r1
 80048d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80048dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80048e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	015a      	lsls	r2, r3, #5
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	4413      	add	r3, r2
 80048ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004900:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490e:	691b      	ldr	r3, [r3, #16]
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	0151      	lsls	r1, r2, #5
 8004914:	69fa      	ldr	r2, [r7, #28]
 8004916:	440a      	add	r2, r1
 8004918:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800491c:	0cdb      	lsrs	r3, r3, #19
 800491e:	04db      	lsls	r3, r3, #19
 8004920:	6113      	str	r3, [r2, #16]
 8004922:	e074      	b.n	8004a0e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	0151      	lsls	r1, r2, #5
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	440a      	add	r2, r1
 800493a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493e:	0cdb      	lsrs	r3, r3, #19
 8004940:	04db      	lsls	r3, r3, #19
 8004942:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	015a      	lsls	r2, r3, #5
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	4413      	add	r3, r2
 800494c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	0151      	lsls	r1, r2, #5
 8004956:	69fa      	ldr	r2, [r7, #28]
 8004958:	440a      	add	r2, r1
 800495a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004962:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004966:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004974:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	6999      	ldr	r1, [r3, #24]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	440b      	add	r3, r1
 8004980:	1e59      	subs	r1, r3, #1
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	fbb1 f3f3 	udiv	r3, r1, r3
 800498a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800498c:	4b9d      	ldr	r3, [pc, #628]	; (8004c04 <USB_EPStartXfer+0x370>)
 800498e:	400b      	ands	r3, r1
 8004990:	69b9      	ldr	r1, [r7, #24]
 8004992:	0148      	lsls	r0, r1, #5
 8004994:	69f9      	ldr	r1, [r7, #28]
 8004996:	4401      	add	r1, r0
 8004998:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800499c:	4313      	orrs	r3, r2
 800499e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	015a      	lsls	r2, r3, #5
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	4413      	add	r3, r2
 80049a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b6:	69b9      	ldr	r1, [r7, #24]
 80049b8:	0148      	lsls	r0, r1, #5
 80049ba:	69f9      	ldr	r1, [r7, #28]
 80049bc:	4401      	add	r1, r0
 80049be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80049c2:	4313      	orrs	r3, r2
 80049c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	791b      	ldrb	r3, [r3, #4]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d11f      	bne.n	8004a0e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	0151      	lsls	r1, r2, #5
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	440a      	add	r2, r1
 80049e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80049ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	0151      	lsls	r1, r2, #5
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	440a      	add	r2, r1
 8004a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a0c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d14b      	bne.n	8004aac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d009      	beq.n	8004a30 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	791b      	ldrb	r3, [r3, #4]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d128      	bne.n	8004a8a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d110      	bne.n	8004a6a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	0151      	lsls	r1, r2, #5
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	440a      	add	r2, r1
 8004a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	e00f      	b.n	8004a8a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	015a      	lsls	r2, r3, #5
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	4413      	add	r3, r2
 8004a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	0151      	lsls	r1, r2, #5
 8004a7c:	69fa      	ldr	r2, [r7, #28]
 8004a7e:	440a      	add	r2, r1
 8004a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a88:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	0151      	lsls	r1, r2, #5
 8004a9c:	69fa      	ldr	r2, [r7, #28]
 8004a9e:	440a      	add	r2, r1
 8004aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e133      	b.n	8004d14 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69ba      	ldr	r2, [r7, #24]
 8004abc:	0151      	lsls	r1, r2, #5
 8004abe:	69fa      	ldr	r2, [r7, #28]
 8004ac0:	440a      	add	r2, r1
 8004ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004aca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	791b      	ldrb	r3, [r3, #4]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d015      	beq.n	8004b00 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 811b 	beq.w	8004d14 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	2101      	movs	r1, #1
 8004af0:	fa01 f303 	lsl.w	r3, r1, r3
 8004af4:	69f9      	ldr	r1, [r7, #28]
 8004af6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004afa:	4313      	orrs	r3, r2
 8004afc:	634b      	str	r3, [r1, #52]	; 0x34
 8004afe:	e109      	b.n	8004d14 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d110      	bne.n	8004b32 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	0151      	lsls	r1, r2, #5
 8004b22:	69fa      	ldr	r2, [r7, #28]
 8004b24:	440a      	add	r2, r1
 8004b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	e00f      	b.n	8004b52 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b50:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6919      	ldr	r1, [r3, #16]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	781a      	ldrb	r2, [r3, #0]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	b298      	uxth	r0, r3
 8004b60:	79fb      	ldrb	r3, [r7, #7]
 8004b62:	9300      	str	r3, [sp, #0]
 8004b64:	4603      	mov	r3, r0
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fade 	bl	8005128 <USB_WritePacket>
 8004b6c:	e0d2      	b.n	8004d14 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b88:	0cdb      	lsrs	r3, r3, #19
 8004b8a:	04db      	lsls	r3, r3, #19
 8004b8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bb0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d126      	bne.n	8004c08 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bd0:	69b9      	ldr	r1, [r7, #24]
 8004bd2:	0148      	lsls	r0, r1, #5
 8004bd4:	69f9      	ldr	r1, [r7, #28]
 8004bd6:	4401      	add	r1, r0
 8004bd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	0151      	lsls	r1, r2, #5
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	440a      	add	r2, r1
 8004bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bfe:	6113      	str	r3, [r2, #16]
 8004c00:	e03a      	b.n	8004c78 <USB_EPStartXfer+0x3e4>
 8004c02:	bf00      	nop
 8004c04:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	699a      	ldr	r2, [r3, #24]
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4413      	add	r3, r2
 8004c12:	1e5a      	subs	r2, r3, #1
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c1c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	8afa      	ldrh	r2, [r7, #22]
 8004c24:	fb03 f202 	mul.w	r2, r3, r2
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	8afb      	ldrh	r3, [r7, #22]
 8004c3c:	04d9      	lsls	r1, r3, #19
 8004c3e:	4b38      	ldr	r3, [pc, #224]	; (8004d20 <USB_EPStartXfer+0x48c>)
 8004c40:	400b      	ands	r3, r1
 8004c42:	69b9      	ldr	r1, [r7, #24]
 8004c44:	0148      	lsls	r0, r1, #5
 8004c46:	69f9      	ldr	r1, [r7, #28]
 8004c48:	4401      	add	r1, r0
 8004c4a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c68:	69b9      	ldr	r1, [r7, #24]
 8004c6a:	0148      	lsls	r0, r1, #5
 8004c6c:	69f9      	ldr	r1, [r7, #28]
 8004c6e:	4401      	add	r1, r0
 8004c70:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c74:	4313      	orrs	r3, r2
 8004c76:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d10d      	bne.n	8004c9a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d009      	beq.n	8004c9a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6919      	ldr	r1, [r3, #16]
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	460a      	mov	r2, r1
 8004c98:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	791b      	ldrb	r3, [r3, #4]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d128      	bne.n	8004cf4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d110      	bne.n	8004cd4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	69ba      	ldr	r2, [r7, #24]
 8004cc2:	0151      	lsls	r1, r2, #5
 8004cc4:	69fa      	ldr	r2, [r7, #28]
 8004cc6:	440a      	add	r2, r1
 8004cc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ccc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e00f      	b.n	8004cf4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	0151      	lsls	r1, r2, #5
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	440a      	add	r2, r1
 8004d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	1ff80000 	.word	0x1ff80000

08004d24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b087      	sub	sp, #28
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	f040 80ce 	bne.w	8004ee2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d132      	bne.n	8004db4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	015a      	lsls	r2, r3, #5
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	4413      	add	r3, r2
 8004d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	0151      	lsls	r1, r2, #5
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	440a      	add	r2, r1
 8004d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	0151      	lsls	r1, r2, #5
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	440a      	add	r2, r1
 8004d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	0151      	lsls	r1, r2, #5
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	440a      	add	r2, r1
 8004da8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dac:	0cdb      	lsrs	r3, r3, #19
 8004dae:	04db      	lsls	r3, r3, #19
 8004db0:	6113      	str	r3, [r2, #16]
 8004db2:	e04e      	b.n	8004e52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	0151      	lsls	r1, r2, #5
 8004dc6:	697a      	ldr	r2, [r7, #20]
 8004dc8:	440a      	add	r2, r1
 8004dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dce:	0cdb      	lsrs	r3, r3, #19
 8004dd0:	04db      	lsls	r3, r3, #19
 8004dd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004df2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004df6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	699a      	ldr	r2, [r3, #24]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d903      	bls.n	8004e0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e42:	6939      	ldr	r1, [r7, #16]
 8004e44:	0148      	lsls	r0, r1, #5
 8004e46:	6979      	ldr	r1, [r7, #20]
 8004e48:	4401      	add	r1, r0
 8004e4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e52:	79fb      	ldrb	r3, [r7, #7]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d11e      	bne.n	8004e96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d009      	beq.n	8004e74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	e097      	b.n	8004fc6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004eb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 8083 	beq.w	8004fc6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed6:	6979      	ldr	r1, [r7, #20]
 8004ed8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004edc:	4313      	orrs	r3, r2
 8004ede:	634b      	str	r3, [r1, #52]	; 0x34
 8004ee0:	e071      	b.n	8004fc6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	0151      	lsls	r1, r2, #5
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	440a      	add	r2, r1
 8004ef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004efc:	0cdb      	lsrs	r3, r3, #19
 8004efe:	04db      	lsls	r3, r3, #19
 8004f00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	015a      	lsls	r2, r3, #5
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	4413      	add	r3, r2
 8004f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	0151      	lsls	r1, r2, #5
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	440a      	add	r2, r1
 8004f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	68da      	ldr	r2, [r3, #12]
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	015a      	lsls	r2, r3, #5
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	4413      	add	r3, r2
 8004f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f74:	6939      	ldr	r1, [r7, #16]
 8004f76:	0148      	lsls	r0, r1, #5
 8004f78:	6979      	ldr	r1, [r7, #20]
 8004f7a:	4401      	add	r1, r0
 8004f7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f80:	4313      	orrs	r3, r2
 8004f82:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004f84:	79fb      	ldrb	r3, [r7, #7]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d10d      	bne.n	8004fa6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d009      	beq.n	8004fa6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	6919      	ldr	r1, [r3, #16]
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	015a      	lsls	r2, r3, #5
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa2:	460a      	mov	r2, r1
 8004fa4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	015a      	lsls	r2, r3, #5
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	4413      	add	r3, r2
 8004fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	0151      	lsls	r1, r2, #5
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	440a      	add	r2, r1
 8004fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	371c      	adds	r7, #28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b087      	sub	sp, #28
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d14a      	bne.n	8005088 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005006:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800500a:	f040 8086 	bne.w	800511a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	015a      	lsls	r2, r3, #5
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	4413      	add	r3, r2
 8005018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	7812      	ldrb	r2, [r2, #0]
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005030:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	7812      	ldrb	r2, [r2, #0]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005050:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005054:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3301      	adds	r3, #1
 800505a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f242 7210 	movw	r2, #10000	; 0x2710
 8005062:	4293      	cmp	r3, r2
 8005064:	d902      	bls.n	800506c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	75fb      	strb	r3, [r7, #23]
          break;
 800506a:	e056      	b.n	800511a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005080:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005084:	d0e7      	beq.n	8005056 <USB_EPStopXfer+0x82>
 8005086:	e048      	b.n	800511a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800509c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050a0:	d13b      	bne.n	800511a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	7812      	ldrb	r2, [r2, #0]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	693a      	ldr	r2, [r7, #16]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	7812      	ldrb	r2, [r2, #0]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	3301      	adds	r3, #1
 80050ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d902      	bls.n	8005100 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	75fb      	strb	r3, [r7, #23]
          break;
 80050fe:	e00c      	b.n	800511a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	015a      	lsls	r2, r3, #5
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	4413      	add	r3, r2
 800510a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005114:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005118:	d0e7      	beq.n	80050ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800511a:	7dfb      	ldrb	r3, [r7, #23]
}
 800511c:	4618      	mov	r0, r3
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005128:	b480      	push	{r7}
 800512a:	b089      	sub	sp, #36	; 0x24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	4611      	mov	r1, r2
 8005134:	461a      	mov	r2, r3
 8005136:	460b      	mov	r3, r1
 8005138:	71fb      	strb	r3, [r7, #7]
 800513a:	4613      	mov	r3, r2
 800513c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005146:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800514a:	2b00      	cmp	r3, #0
 800514c:	d123      	bne.n	8005196 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800514e:	88bb      	ldrh	r3, [r7, #4]
 8005150:	3303      	adds	r3, #3
 8005152:	089b      	lsrs	r3, r3, #2
 8005154:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005156:	2300      	movs	r3, #0
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	e018      	b.n	800518e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	031a      	lsls	r2, r3, #12
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	4413      	add	r3, r2
 8005164:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005168:	461a      	mov	r2, r3
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005170:	69fb      	ldr	r3, [r7, #28]
 8005172:	3301      	adds	r3, #1
 8005174:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	3301      	adds	r3, #1
 800517a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	3301      	adds	r3, #1
 8005180:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	3301      	adds	r3, #1
 8005186:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	3301      	adds	r3, #1
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	69ba      	ldr	r2, [r7, #24]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	429a      	cmp	r2, r3
 8005194:	d3e2      	bcc.n	800515c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3724      	adds	r7, #36	; 0x24
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b08b      	sub	sp, #44	; 0x2c
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051ba:	88fb      	ldrh	r3, [r7, #6]
 80051bc:	089b      	lsrs	r3, r3, #2
 80051be:	b29b      	uxth	r3, r3
 80051c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	f003 0303 	and.w	r3, r3, #3
 80051c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051ca:	2300      	movs	r3, #0
 80051cc:	623b      	str	r3, [r7, #32]
 80051ce:	e014      	b.n	80051fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	601a      	str	r2, [r3, #0]
    pDest++;
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	3301      	adds	r3, #1
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	3301      	adds	r3, #1
 80051e6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	3301      	adds	r3, #1
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	3301      	adds	r3, #1
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	3301      	adds	r3, #1
 80051f8:	623b      	str	r3, [r7, #32]
 80051fa:	6a3a      	ldr	r2, [r7, #32]
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d3e6      	bcc.n	80051d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005202:	8bfb      	ldrh	r3, [r7, #30]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01e      	beq.n	8005246 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005212:	461a      	mov	r2, r3
 8005214:	f107 0310 	add.w	r3, r7, #16
 8005218:	6812      	ldr	r2, [r2, #0]
 800521a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	b2db      	uxtb	r3, r3
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	fa22 f303 	lsr.w	r3, r2, r3
 8005228:	b2da      	uxtb	r2, r3
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	701a      	strb	r2, [r3, #0]
      i++;
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	3301      	adds	r3, #1
 8005232:	623b      	str	r3, [r7, #32]
      pDest++;
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	3301      	adds	r3, #1
 8005238:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800523a:	8bfb      	ldrh	r3, [r7, #30]
 800523c:	3b01      	subs	r3, #1
 800523e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005240:	8bfb      	ldrh	r3, [r7, #30]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1ea      	bne.n	800521c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005248:	4618      	mov	r0, r3
 800524a:	372c      	adds	r7, #44	; 0x2c
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d12c      	bne.n	80052ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	db12      	blt.n	80052a8 <USB_EPSetStall+0x54>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00f      	beq.n	80052a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	0151      	lsls	r1, r2, #5
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	440a      	add	r2, r1
 800529e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80052a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052c6:	6013      	str	r3, [r2, #0]
 80052c8:	e02b      	b.n	8005322 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	db12      	blt.n	8005302 <USB_EPSetStall+0xae>
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00f      	beq.n	8005302 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	0151      	lsls	r1, r2, #5
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	440a      	add	r2, r1
 80052f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005300:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	015a      	lsls	r2, r3, #5
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4413      	add	r3, r2
 800530a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	0151      	lsls	r1, r2, #5
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	440a      	add	r2, r1
 8005318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800531c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005320:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	785b      	ldrb	r3, [r3, #1]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d128      	bne.n	800539e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	0151      	lsls	r1, r2, #5
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	440a      	add	r2, r1
 8005362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800536a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	791b      	ldrb	r3, [r3, #4]
 8005370:	2b03      	cmp	r3, #3
 8005372:	d003      	beq.n	800537c <USB_EPClearStall+0x4c>
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	791b      	ldrb	r3, [r3, #4]
 8005378:	2b02      	cmp	r3, #2
 800537a:	d138      	bne.n	80053ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	e027      	b.n	80053ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	791b      	ldrb	r3, [r3, #4]
 80053c2:	2b03      	cmp	r3, #3
 80053c4:	d003      	beq.n	80053ce <USB_EPClearStall+0x9e>
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	791b      	ldrb	r3, [r3, #4]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d10f      	bne.n	80053ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80053ee:	2300      	movs	r3, #0
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3714      	adds	r7, #20
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	460b      	mov	r3, r1
 8005406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800541a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800541e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	011b      	lsls	r3, r3, #4
 800542c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005430:	68f9      	ldr	r1, [r7, #12]
 8005432:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005436:	4313      	orrs	r3, r2
 8005438:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005462:	f023 0303 	bic.w	r3, r3, #3
 8005466:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005476:	f023 0302 	bic.w	r3, r3, #2
 800547a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3714      	adds	r7, #20
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800548a:	b480      	push	{r7}
 800548c:	b085      	sub	sp, #20
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80054a4:	f023 0303 	bic.w	r3, r3, #3
 80054a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b8:	f043 0302 	orr.w	r3, r3, #2
 80054bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054be:	2300      	movs	r3, #0
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b085      	sub	sp, #20
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	695b      	ldr	r3, [r3, #20]
 80054d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4013      	ands	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80054e4:	68fb      	ldr	r3, [r7, #12]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	4013      	ands	r3, r2
 8005514:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	0c1b      	lsrs	r3, r3, #16
}
 800551a:	4618      	mov	r0, r3
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005526:	b480      	push	{r7}
 8005528:	b085      	sub	sp, #20
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005542:	69db      	ldr	r3, [r3, #28]
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	4013      	ands	r3, r2
 8005548:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	b29b      	uxth	r3, r3
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800555a:	b480      	push	{r7}
 800555c:	b085      	sub	sp, #20
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	460b      	mov	r3, r1
 8005564:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800556a:	78fb      	ldrb	r3, [r7, #3]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	4013      	ands	r3, r2
 8005586:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005588:	68bb      	ldr	r3, [r7, #8]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr

08005596 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005596:	b480      	push	{r7}
 8005598:	b087      	sub	sp, #28
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	460b      	mov	r3, r1
 80055a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80055ba:	78fb      	ldrb	r3, [r7, #3]
 80055bc:	f003 030f 	and.w	r3, r3, #15
 80055c0:	68fa      	ldr	r2, [r7, #12]
 80055c2:	fa22 f303 	lsr.w	r3, r2, r3
 80055c6:	01db      	lsls	r3, r3, #7
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80055d0:	78fb      	ldrb	r3, [r7, #3]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4013      	ands	r3, r2
 80055e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80055e4:	68bb      	ldr	r3, [r7, #8]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	371c      	adds	r7, #28
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f003 0301 	and.w	r3, r3, #1
}
 8005602:	4618      	mov	r0, r3
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800560e:	b480      	push	{r7}
 8005610:	b085      	sub	sp, #20
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005628:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800562c:	f023 0307 	bic.w	r3, r3, #7
 8005630:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005644:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	460b      	mov	r3, r1
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	333c      	adds	r3, #60	; 0x3c
 800566a:	3304      	adds	r3, #4
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	4a26      	ldr	r2, [pc, #152]	; (800570c <USB_EP0_OutStart+0xb8>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d90a      	bls.n	800568e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005684:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005688:	d101      	bne.n	800568e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	e037      	b.n	80056fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005694:	461a      	mov	r2, r3
 8005696:	2300      	movs	r3, #0
 8005698:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056bc:	f043 0318 	orr.w	r3, r3, #24
 80056c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80056d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80056d6:	7afb      	ldrb	r3, [r7, #11]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d10f      	bne.n	80056fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	461a      	mov	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80056fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
 800570a:	bf00      	nop
 800570c:	4f54300a 	.word	0x4f54300a

08005710 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	4a13      	ldr	r2, [pc, #76]	; (8005774 <USB_CoreReset+0x64>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d901      	bls.n	800572e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800572a:	2303      	movs	r3, #3
 800572c:	e01b      	b.n	8005766 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	691b      	ldr	r3, [r3, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	daf2      	bge.n	800571c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005736:	2300      	movs	r3, #0
 8005738:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f043 0201 	orr.w	r2, r3, #1
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	3301      	adds	r3, #1
 800574a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4a09      	ldr	r2, [pc, #36]	; (8005774 <USB_CoreReset+0x64>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d901      	bls.n	8005758 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e006      	b.n	8005766 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b01      	cmp	r3, #1
 8005762:	d0f0      	beq.n	8005746 <USB_CoreReset+0x36>

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	00030d40 	.word	0x00030d40

08005778 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005784:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005788:	f002 fc8a 	bl	80080a0 <USBD_static_malloc>
 800578c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d109      	bne.n	80057a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	32b0      	adds	r2, #176	; 0xb0
 800579e:	2100      	movs	r1, #0
 80057a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80057a4:	2302      	movs	r3, #2
 80057a6:	e0d4      	b.n	8005952 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80057a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80057ac:	2100      	movs	r1, #0
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f002 fce4 	bl	800817c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	32b0      	adds	r2, #176	; 0xb0
 80057be:	68f9      	ldr	r1, [r7, #12]
 80057c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	32b0      	adds	r2, #176	; 0xb0
 80057ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	7c1b      	ldrb	r3, [r3, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d138      	bne.n	8005852 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80057e0:	4b5e      	ldr	r3, [pc, #376]	; (800595c <USBD_CDC_Init+0x1e4>)
 80057e2:	7819      	ldrb	r1, [r3, #0]
 80057e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057e8:	2202      	movs	r2, #2
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f002 fb35 	bl	8007e5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80057f0:	4b5a      	ldr	r3, [pc, #360]	; (800595c <USBD_CDC_Init+0x1e4>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	f003 020f 	and.w	r2, r3, #15
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	440b      	add	r3, r1
 8005804:	3324      	adds	r3, #36	; 0x24
 8005806:	2201      	movs	r2, #1
 8005808:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800580a:	4b55      	ldr	r3, [pc, #340]	; (8005960 <USBD_CDC_Init+0x1e8>)
 800580c:	7819      	ldrb	r1, [r3, #0]
 800580e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005812:	2202      	movs	r2, #2
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f002 fb20 	bl	8007e5a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800581a:	4b51      	ldr	r3, [pc, #324]	; (8005960 <USBD_CDC_Init+0x1e8>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	f003 020f 	and.w	r2, r3, #15
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	440b      	add	r3, r1
 800582e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005832:	2201      	movs	r2, #1
 8005834:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005836:	4b4b      	ldr	r3, [pc, #300]	; (8005964 <USBD_CDC_Init+0x1ec>)
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	f003 020f 	and.w	r2, r3, #15
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	3326      	adds	r3, #38	; 0x26
 800584c:	2210      	movs	r2, #16
 800584e:	801a      	strh	r2, [r3, #0]
 8005850:	e035      	b.n	80058be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005852:	4b42      	ldr	r3, [pc, #264]	; (800595c <USBD_CDC_Init+0x1e4>)
 8005854:	7819      	ldrb	r1, [r3, #0]
 8005856:	2340      	movs	r3, #64	; 0x40
 8005858:	2202      	movs	r2, #2
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f002 fafd 	bl	8007e5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005860:	4b3e      	ldr	r3, [pc, #248]	; (800595c <USBD_CDC_Init+0x1e4>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	f003 020f 	and.w	r2, r3, #15
 8005868:	6879      	ldr	r1, [r7, #4]
 800586a:	4613      	mov	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	440b      	add	r3, r1
 8005874:	3324      	adds	r3, #36	; 0x24
 8005876:	2201      	movs	r2, #1
 8005878:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800587a:	4b39      	ldr	r3, [pc, #228]	; (8005960 <USBD_CDC_Init+0x1e8>)
 800587c:	7819      	ldrb	r1, [r3, #0]
 800587e:	2340      	movs	r3, #64	; 0x40
 8005880:	2202      	movs	r2, #2
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f002 fae9 	bl	8007e5a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005888:	4b35      	ldr	r3, [pc, #212]	; (8005960 <USBD_CDC_Init+0x1e8>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	f003 020f 	and.w	r2, r3, #15
 8005890:	6879      	ldr	r1, [r7, #4]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80058a0:	2201      	movs	r2, #1
 80058a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80058a4:	4b2f      	ldr	r3, [pc, #188]	; (8005964 <USBD_CDC_Init+0x1ec>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	f003 020f 	and.w	r2, r3, #15
 80058ac:	6879      	ldr	r1, [r7, #4]
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	3326      	adds	r3, #38	; 0x26
 80058ba:	2210      	movs	r2, #16
 80058bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80058be:	4b29      	ldr	r3, [pc, #164]	; (8005964 <USBD_CDC_Init+0x1ec>)
 80058c0:	7819      	ldrb	r1, [r3, #0]
 80058c2:	2308      	movs	r3, #8
 80058c4:	2203      	movs	r2, #3
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f002 fac7 	bl	8007e5a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80058cc:	4b25      	ldr	r3, [pc, #148]	; (8005964 <USBD_CDC_Init+0x1ec>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	f003 020f 	and.w	r2, r3, #15
 80058d4:	6879      	ldr	r1, [r7, #4]
 80058d6:	4613      	mov	r3, r2
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	009b      	lsls	r3, r3, #2
 80058de:	440b      	add	r3, r1
 80058e0:	3324      	adds	r3, #36	; 0x24
 80058e2:	2201      	movs	r2, #1
 80058e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	33b0      	adds	r3, #176	; 0xb0
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800591c:	2302      	movs	r3, #2
 800591e:	e018      	b.n	8005952 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	7c1b      	ldrb	r3, [r3, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d10a      	bne.n	800593e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005928:	4b0d      	ldr	r3, [pc, #52]	; (8005960 <USBD_CDC_Init+0x1e8>)
 800592a:	7819      	ldrb	r1, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005932:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f002 fb7e 	bl	8008038 <USBD_LL_PrepareReceive>
 800593c:	e008      	b.n	8005950 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800593e:	4b08      	ldr	r3, [pc, #32]	; (8005960 <USBD_CDC_Init+0x1e8>)
 8005940:	7819      	ldrb	r1, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005948:	2340      	movs	r3, #64	; 0x40
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f002 fb74 	bl	8008038 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000093 	.word	0x20000093
 8005960:	20000094 	.word	0x20000094
 8005964:	20000095 	.word	0x20000095

08005968 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005974:	4b3a      	ldr	r3, [pc, #232]	; (8005a60 <USBD_CDC_DeInit+0xf8>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f002 fa93 	bl	8007ea6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005980:	4b37      	ldr	r3, [pc, #220]	; (8005a60 <USBD_CDC_DeInit+0xf8>)
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	f003 020f 	and.w	r2, r3, #15
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	4613      	mov	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	3324      	adds	r3, #36	; 0x24
 8005996:	2200      	movs	r2, #0
 8005998:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800599a:	4b32      	ldr	r3, [pc, #200]	; (8005a64 <USBD_CDC_DeInit+0xfc>)
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	4619      	mov	r1, r3
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f002 fa80 	bl	8007ea6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80059a6:	4b2f      	ldr	r3, [pc, #188]	; (8005a64 <USBD_CDC_DeInit+0xfc>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	f003 020f 	and.w	r2, r3, #15
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059be:	2200      	movs	r2, #0
 80059c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80059c2:	4b29      	ldr	r3, [pc, #164]	; (8005a68 <USBD_CDC_DeInit+0x100>)
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	4619      	mov	r1, r3
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f002 fa6c 	bl	8007ea6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80059ce:	4b26      	ldr	r3, [pc, #152]	; (8005a68 <USBD_CDC_DeInit+0x100>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	f003 020f 	and.w	r2, r3, #15
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	440b      	add	r3, r1
 80059e2:	3324      	adds	r3, #36	; 0x24
 80059e4:	2200      	movs	r2, #0
 80059e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80059e8:	4b1f      	ldr	r3, [pc, #124]	; (8005a68 <USBD_CDC_DeInit+0x100>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	f003 020f 	and.w	r2, r3, #15
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	3326      	adds	r3, #38	; 0x26
 80059fe:	2200      	movs	r2, #0
 8005a00:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	32b0      	adds	r2, #176	; 0xb0
 8005a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01f      	beq.n	8005a54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	33b0      	adds	r3, #176	; 0xb0
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	32b0      	adds	r2, #176	; 0xb0
 8005a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f002 fb40 	bl	80080bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	32b0      	adds	r2, #176	; 0xb0
 8005a46:	2100      	movs	r1, #0
 8005a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20000093 	.word	0x20000093
 8005a64:	20000094 	.word	0x20000094
 8005a68:	20000095 	.word	0x20000095

08005a6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	32b0      	adds	r2, #176	; 0xb0
 8005a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e0bf      	b.n	8005c1c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d050      	beq.n	8005b4a <USBD_CDC_Setup+0xde>
 8005aa8:	2b20      	cmp	r3, #32
 8005aaa:	f040 80af 	bne.w	8005c0c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	88db      	ldrh	r3, [r3, #6]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d03a      	beq.n	8005b2c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	b25b      	sxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	da1b      	bge.n	8005af8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	33b0      	adds	r3, #176	; 0xb0
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005ad6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	88d2      	ldrh	r2, [r2, #6]
 8005adc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	88db      	ldrh	r3, [r3, #6]
 8005ae2:	2b07      	cmp	r3, #7
 8005ae4:	bf28      	it	cs
 8005ae6:	2307      	movcs	r3, #7
 8005ae8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	89fa      	ldrh	r2, [r7, #14]
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f001 fd89 	bl	8007608 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005af6:	e090      	b.n	8005c1a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	785a      	ldrb	r2, [r3, #1]
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	88db      	ldrh	r3, [r3, #6]
 8005b06:	2b3f      	cmp	r3, #63	; 0x3f
 8005b08:	d803      	bhi.n	8005b12 <USBD_CDC_Setup+0xa6>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	88db      	ldrh	r3, [r3, #6]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	e000      	b.n	8005b14 <USBD_CDC_Setup+0xa8>
 8005b12:	2240      	movs	r2, #64	; 0x40
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005b1a:	6939      	ldr	r1, [r7, #16]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005b22:	461a      	mov	r2, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 fd9b 	bl	8007660 <USBD_CtlPrepareRx>
      break;
 8005b2a:	e076      	b.n	8005c1a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	33b0      	adds	r3, #176	; 0xb0
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	7850      	ldrb	r0, [r2, #1]
 8005b42:	2200      	movs	r2, #0
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	4798      	blx	r3
      break;
 8005b48:	e067      	b.n	8005c1a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	2b0b      	cmp	r3, #11
 8005b50:	d851      	bhi.n	8005bf6 <USBD_CDC_Setup+0x18a>
 8005b52:	a201      	add	r2, pc, #4	; (adr r2, 8005b58 <USBD_CDC_Setup+0xec>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005b89 	.word	0x08005b89
 8005b5c:	08005c05 	.word	0x08005c05
 8005b60:	08005bf7 	.word	0x08005bf7
 8005b64:	08005bf7 	.word	0x08005bf7
 8005b68:	08005bf7 	.word	0x08005bf7
 8005b6c:	08005bf7 	.word	0x08005bf7
 8005b70:	08005bf7 	.word	0x08005bf7
 8005b74:	08005bf7 	.word	0x08005bf7
 8005b78:	08005bf7 	.word	0x08005bf7
 8005b7c:	08005bf7 	.word	0x08005bf7
 8005b80:	08005bb3 	.word	0x08005bb3
 8005b84:	08005bdd 	.word	0x08005bdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b03      	cmp	r3, #3
 8005b92:	d107      	bne.n	8005ba4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005b94:	f107 030a 	add.w	r3, r7, #10
 8005b98:	2202      	movs	r2, #2
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f001 fd33 	bl	8007608 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ba2:	e032      	b.n	8005c0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f001 fcbd 	bl	8007526 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bac:	2303      	movs	r3, #3
 8005bae:	75fb      	strb	r3, [r7, #23]
          break;
 8005bb0:	e02b      	b.n	8005c0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d107      	bne.n	8005bce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005bbe:	f107 030d 	add.w	r3, r7, #13
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 fd1e 	bl	8007608 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005bcc:	e01d      	b.n	8005c0a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f001 fca8 	bl	8007526 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bda:	e016      	b.n	8005c0a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d00f      	beq.n	8005c08 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f001 fc9b 	bl	8007526 <USBD_CtlError>
            ret = USBD_FAIL;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005bf4:	e008      	b.n	8005c08 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005bf6:	6839      	ldr	r1, [r7, #0]
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f001 fc94 	bl	8007526 <USBD_CtlError>
          ret = USBD_FAIL;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	75fb      	strb	r3, [r7, #23]
          break;
 8005c02:	e002      	b.n	8005c0a <USBD_CDC_Setup+0x19e>
          break;
 8005c04:	bf00      	nop
 8005c06:	e008      	b.n	8005c1a <USBD_CDC_Setup+0x1ae>
          break;
 8005c08:	bf00      	nop
      }
      break;
 8005c0a:	e006      	b.n	8005c1a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005c0c:	6839      	ldr	r1, [r7, #0]
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 fc89 	bl	8007526 <USBD_CtlError>
      ret = USBD_FAIL;
 8005c14:	2303      	movs	r3, #3
 8005c16:	75fb      	strb	r3, [r7, #23]
      break;
 8005c18:	bf00      	nop
  }

  return (uint8_t)ret;
 8005c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3718      	adds	r7, #24
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005c36:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	32b0      	adds	r2, #176	; 0xb0
 8005c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e065      	b.n	8005d1a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	32b0      	adds	r2, #176	; 0xb0
 8005c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005c5e:	78fb      	ldrb	r3, [r7, #3]
 8005c60:	f003 020f 	and.w	r2, r3, #15
 8005c64:	6879      	ldr	r1, [r7, #4]
 8005c66:	4613      	mov	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	440b      	add	r3, r1
 8005c70:	3318      	adds	r3, #24
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d02f      	beq.n	8005cd8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005c78:	78fb      	ldrb	r3, [r7, #3]
 8005c7a:	f003 020f 	and.w	r2, r3, #15
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	3318      	adds	r3, #24
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	f003 010f 	and.w	r1, r3, #15
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	460b      	mov	r3, r1
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	440b      	add	r3, r1
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4403      	add	r3, r0
 8005ca0:	3348      	adds	r3, #72	; 0x48
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ca8:	fb01 f303 	mul.w	r3, r1, r3
 8005cac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d112      	bne.n	8005cd8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	f003 020f 	and.w	r2, r3, #15
 8005cb8:	6879      	ldr	r1, [r7, #4]
 8005cba:	4613      	mov	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	3318      	adds	r3, #24
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005cca:	78f9      	ldrb	r1, [r7, #3]
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2200      	movs	r2, #0
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f002 f990 	bl	8007ff6 <USBD_LL_Transmit>
 8005cd6:	e01f      	b.n	8005d18 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	33b0      	adds	r3, #176	; 0xb0
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d010      	beq.n	8005d18 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	33b0      	adds	r3, #176	; 0xb0
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005d14:	78fa      	ldrb	r2, [r7, #3]
 8005d16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}

08005d22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005d22:	b580      	push	{r7, lr}
 8005d24:	b084      	sub	sp, #16
 8005d26:	af00      	add	r7, sp, #0
 8005d28:	6078      	str	r0, [r7, #4]
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	32b0      	adds	r2, #176	; 0xb0
 8005d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	32b0      	adds	r2, #176	; 0xb0
 8005d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e01a      	b.n	8005d8a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f002 f98e 	bl	800807a <USBD_LL_GetRxDataSize>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	33b0      	adds	r3, #176	; 0xb0
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005d84:	4611      	mov	r1, r2
 8005d86:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005d88:	2300      	movs	r3, #0
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	32b0      	adds	r2, #176	; 0xb0
 8005da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e025      	b.n	8005e00 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	33b0      	adds	r3, #176	; 0xb0
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01a      	beq.n	8005dfe <USBD_CDC_EP0_RxReady+0x6c>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005dce:	2bff      	cmp	r3, #255	; 0xff
 8005dd0:	d015      	beq.n	8005dfe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	33b0      	adds	r3, #176	; 0xb0
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005dea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005df2:	b292      	uxth	r2, r2
 8005df4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	22ff      	movs	r2, #255	; 0xff
 8005dfa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3710      	adds	r7, #16
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b086      	sub	sp, #24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e10:	2182      	movs	r1, #130	; 0x82
 8005e12:	4818      	ldr	r0, [pc, #96]	; (8005e74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e14:	f000 fd4f 	bl	80068b6 <USBD_GetEpDesc>
 8005e18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	4815      	ldr	r0, [pc, #84]	; (8005e74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e1e:	f000 fd4a 	bl	80068b6 <USBD_GetEpDesc>
 8005e22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e24:	2181      	movs	r1, #129	; 0x81
 8005e26:	4813      	ldr	r0, [pc, #76]	; (8005e74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005e28:	f000 fd45 	bl	80068b6 <USBD_GetEpDesc>
 8005e2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2210      	movs	r2, #16
 8005e38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d006      	beq.n	8005e4e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e48:	711a      	strb	r2, [r3, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d006      	beq.n	8005e62 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e5c:	711a      	strb	r2, [r3, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2243      	movs	r2, #67	; 0x43
 8005e66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005e68:	4b02      	ldr	r3, [pc, #8]	; (8005e74 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000050 	.word	0x20000050

08005e78 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005e80:	2182      	movs	r1, #130	; 0x82
 8005e82:	4818      	ldr	r0, [pc, #96]	; (8005ee4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e84:	f000 fd17 	bl	80068b6 <USBD_GetEpDesc>
 8005e88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	4815      	ldr	r0, [pc, #84]	; (8005ee4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e8e:	f000 fd12 	bl	80068b6 <USBD_GetEpDesc>
 8005e92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005e94:	2181      	movs	r1, #129	; 0x81
 8005e96:	4813      	ldr	r0, [pc, #76]	; (8005ee4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005e98:	f000 fd0d 	bl	80068b6 <USBD_GetEpDesc>
 8005e9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2210      	movs	r2, #16
 8005ea8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d006      	beq.n	8005ebe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	711a      	strb	r2, [r3, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f042 0202 	orr.w	r2, r2, #2
 8005ebc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d006      	beq.n	8005ed2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	711a      	strb	r2, [r3, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f042 0202 	orr.w	r2, r2, #2
 8005ed0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2243      	movs	r2, #67	; 0x43
 8005ed6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ed8:	4b02      	ldr	r3, [pc, #8]	; (8005ee4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20000050 	.word	0x20000050

08005ee8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ef0:	2182      	movs	r1, #130	; 0x82
 8005ef2:	4818      	ldr	r0, [pc, #96]	; (8005f54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ef4:	f000 fcdf 	bl	80068b6 <USBD_GetEpDesc>
 8005ef8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005efa:	2101      	movs	r1, #1
 8005efc:	4815      	ldr	r0, [pc, #84]	; (8005f54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005efe:	f000 fcda 	bl	80068b6 <USBD_GetEpDesc>
 8005f02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005f04:	2181      	movs	r1, #129	; 0x81
 8005f06:	4813      	ldr	r0, [pc, #76]	; (8005f54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005f08:	f000 fcd5 	bl	80068b6 <USBD_GetEpDesc>
 8005f0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2210      	movs	r2, #16
 8005f18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d006      	beq.n	8005f2e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f28:	711a      	strb	r2, [r3, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d006      	beq.n	8005f42 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f3c:	711a      	strb	r2, [r3, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2243      	movs	r2, #67	; 0x43
 8005f46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005f48:	4b02      	ldr	r3, [pc, #8]	; (8005f54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000050 	.word	0x20000050

08005f58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	220a      	movs	r2, #10
 8005f64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005f66:	4b03      	ldr	r3, [pc, #12]	; (8005f74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	2000000c 	.word	0x2000000c

08005f78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e009      	b.n	8005fa0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	33b0      	adds	r3, #176	; 0xb0
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b087      	sub	sp, #28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	32b0      	adds	r2, #176	; 0xb0
 8005fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e008      	b.n	8005fe4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005fe2:	2300      	movs	r3, #0
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	32b0      	adds	r2, #176	; 0xb0
 8006004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006008:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006010:	2303      	movs	r3, #3
 8006012:	e004      	b.n	800601e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	683a      	ldr	r2, [r7, #0]
 8006018:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	32b0      	adds	r2, #176	; 0xb0
 800603e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006042:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006044:	2301      	movs	r3, #1
 8006046:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	32b0      	adds	r2, #176	; 0xb0
 8006052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800605a:	2303      	movs	r3, #3
 800605c:	e025      	b.n	80060aa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11f      	bne.n	80060a8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2201      	movs	r2, #1
 800606c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006070:	4b10      	ldr	r3, [pc, #64]	; (80060b4 <USBD_CDC_TransmitPacket+0x88>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	f003 020f 	and.w	r2, r3, #15
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4403      	add	r3, r0
 800608a:	3318      	adds	r3, #24
 800608c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800608e:	4b09      	ldr	r3, [pc, #36]	; (80060b4 <USBD_CDC_TransmitPacket+0x88>)
 8006090:	7819      	ldrb	r1, [r3, #0]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 ffa9 	bl	8007ff6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80060a4:	2300      	movs	r3, #0
 80060a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80060a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000093 	.word	0x20000093

080060b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	32b0      	adds	r2, #176	; 0xb0
 80060ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	32b0      	adds	r2, #176	; 0xb0
 80060da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e018      	b.n	8006118 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	7c1b      	ldrb	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10a      	bne.n	8006104 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80060ee:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <USBD_CDC_ReceivePacket+0x68>)
 80060f0:	7819      	ldrb	r1, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80060f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f001 ff9b 	bl	8008038 <USBD_LL_PrepareReceive>
 8006102:	e008      	b.n	8006116 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006104:	4b06      	ldr	r3, [pc, #24]	; (8006120 <USBD_CDC_ReceivePacket+0x68>)
 8006106:	7819      	ldrb	r1, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800610e:	2340      	movs	r3, #64	; 0x40
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f001 ff91 	bl	8008038 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20000094 	.word	0x20000094

08006124 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b086      	sub	sp, #24
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	4613      	mov	r3, r2
 8006130:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d101      	bne.n	800613c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006138:	2303      	movs	r3, #3
 800613a:	e01f      	b.n	800617c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d003      	beq.n	8006162 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	79fa      	ldrb	r2, [r7, #7]
 800616e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f001 fe0b 	bl	8007d8c <USBD_LL_Init>
 8006176:	4603      	mov	r3, r0
 8006178:	75fb      	strb	r3, [r7, #23]

  return ret;
 800617a:	7dfb      	ldrb	r3, [r7, #23]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3718      	adds	r7, #24
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800618e:	2300      	movs	r3, #0
 8006190:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006198:	2303      	movs	r3, #3
 800619a:	e025      	b.n	80061e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	32ae      	adds	r2, #174	; 0xae
 80061ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00f      	beq.n	80061d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	32ae      	adds	r2, #174	; 0xae
 80061c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c8:	f107 020e 	add.w	r2, r7, #14
 80061cc:	4610      	mov	r0, r2
 80061ce:	4798      	blx	r3
 80061d0:	4602      	mov	r2, r0
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 fe13 	bl	8007e24 <USBD_LL_Start>
 80061fe:	4603      	mov	r3, r0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006210:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800621e:	b580      	push	{r7, lr}
 8006220:	b084      	sub	sp, #16
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
 8006226:	460b      	mov	r3, r1
 8006228:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006234:	2b00      	cmp	r3, #0
 8006236:	d009      	beq.n	800624c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	78fa      	ldrb	r2, [r7, #3]
 8006242:	4611      	mov	r1, r2
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	4798      	blx	r3
 8006248:	4603      	mov	r3, r0
 800624a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800624c:	7bfb      	ldrb	r3, [r7, #15]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}

08006256 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	460b      	mov	r3, r1
 8006260:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	78fa      	ldrb	r2, [r7, #3]
 8006270:	4611      	mov	r1, r2
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	4798      	blx	r3
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d001      	beq.n	8006280 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800627c:	2303      	movs	r3, #3
 800627e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	4618      	mov	r0, r3
 800629e:	f001 f908 	bl	80074b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80062b0:	461a      	mov	r2, r3
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80062be:	f003 031f 	and.w	r3, r3, #31
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d01a      	beq.n	80062fc <USBD_LL_SetupStage+0x72>
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d822      	bhi.n	8006310 <USBD_LL_SetupStage+0x86>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <USBD_LL_SetupStage+0x4a>
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d00a      	beq.n	80062e8 <USBD_LL_SetupStage+0x5e>
 80062d2:	e01d      	b.n	8006310 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 fb5f 	bl	80069a0 <USBD_StdDevReq>
 80062e2:	4603      	mov	r3, r0
 80062e4:	73fb      	strb	r3, [r7, #15]
      break;
 80062e6:	e020      	b.n	800632a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fbc7 	bl	8006a84 <USBD_StdItfReq>
 80062f6:	4603      	mov	r3, r0
 80062f8:	73fb      	strb	r3, [r7, #15]
      break;
 80062fa:	e016      	b.n	800632a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006302:	4619      	mov	r1, r3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fc29 	bl	8006b5c <USBD_StdEPReq>
 800630a:	4603      	mov	r3, r0
 800630c:	73fb      	strb	r3, [r7, #15]
      break;
 800630e:	e00c      	b.n	800632a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006316:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800631a:	b2db      	uxtb	r3, r3
 800631c:	4619      	mov	r1, r3
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f001 fde0 	bl	8007ee4 <USBD_LL_StallEP>
 8006324:	4603      	mov	r3, r0
 8006326:	73fb      	strb	r3, [r7, #15]
      break;
 8006328:	bf00      	nop
  }

  return ret;
 800632a:	7bfb      	ldrb	r3, [r7, #15]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	460b      	mov	r3, r1
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006346:	7afb      	ldrb	r3, [r7, #11]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d16e      	bne.n	800642a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006352:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800635a:	2b03      	cmp	r3, #3
 800635c:	f040 8098 	bne.w	8006490 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	429a      	cmp	r2, r3
 800636a:	d913      	bls.n	8006394 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	689a      	ldr	r2, [r3, #8]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	1ad2      	subs	r2, r2, r3
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	4293      	cmp	r3, r2
 8006384:	bf28      	it	cs
 8006386:	4613      	movcs	r3, r2
 8006388:	461a      	mov	r2, r3
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f001 f984 	bl	800769a <USBD_CtlContinueRx>
 8006392:	e07d      	b.n	8006490 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800639a:	f003 031f 	and.w	r3, r3, #31
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d014      	beq.n	80063cc <USBD_LL_DataOutStage+0x98>
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d81d      	bhi.n	80063e2 <USBD_LL_DataOutStage+0xae>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d002      	beq.n	80063b0 <USBD_LL_DataOutStage+0x7c>
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d003      	beq.n	80063b6 <USBD_LL_DataOutStage+0x82>
 80063ae:	e018      	b.n	80063e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80063b0:	2300      	movs	r3, #0
 80063b2:	75bb      	strb	r3, [r7, #22]
            break;
 80063b4:	e018      	b.n	80063e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	4619      	mov	r1, r3
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 fa5e 	bl	8006882 <USBD_CoreFindIF>
 80063c6:	4603      	mov	r3, r0
 80063c8:	75bb      	strb	r3, [r7, #22]
            break;
 80063ca:	e00d      	b.n	80063e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	4619      	mov	r1, r3
 80063d6:	68f8      	ldr	r0, [r7, #12]
 80063d8:	f000 fa60 	bl	800689c <USBD_CoreFindEP>
 80063dc:	4603      	mov	r3, r0
 80063de:	75bb      	strb	r3, [r7, #22]
            break;
 80063e0:	e002      	b.n	80063e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	75bb      	strb	r3, [r7, #22]
            break;
 80063e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80063e8:	7dbb      	ldrb	r3, [r7, #22]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d119      	bne.n	8006422 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b03      	cmp	r3, #3
 80063f8:	d113      	bne.n	8006422 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80063fa:	7dba      	ldrb	r2, [r7, #22]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	32ae      	adds	r2, #174	; 0xae
 8006400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00b      	beq.n	8006422 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800640a:	7dba      	ldrb	r2, [r7, #22]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006412:	7dba      	ldrb	r2, [r7, #22]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	32ae      	adds	r2, #174	; 0xae
 8006418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006422:	68f8      	ldr	r0, [r7, #12]
 8006424:	f001 f94a 	bl	80076bc <USBD_CtlSendStatus>
 8006428:	e032      	b.n	8006490 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800642a:	7afb      	ldrb	r3, [r7, #11]
 800642c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006430:	b2db      	uxtb	r3, r3
 8006432:	4619      	mov	r1, r3
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fa31 	bl	800689c <USBD_CoreFindEP>
 800643a:	4603      	mov	r3, r0
 800643c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800643e:	7dbb      	ldrb	r3, [r7, #22]
 8006440:	2bff      	cmp	r3, #255	; 0xff
 8006442:	d025      	beq.n	8006490 <USBD_LL_DataOutStage+0x15c>
 8006444:	7dbb      	ldrb	r3, [r7, #22]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d122      	bne.n	8006490 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b03      	cmp	r3, #3
 8006454:	d117      	bne.n	8006486 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006456:	7dba      	ldrb	r2, [r7, #22]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	32ae      	adds	r2, #174	; 0xae
 800645c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00f      	beq.n	8006486 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006466:	7dba      	ldrb	r2, [r7, #22]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800646e:	7dba      	ldrb	r2, [r7, #22]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	32ae      	adds	r2, #174	; 0xae
 8006474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	7afa      	ldrb	r2, [r7, #11]
 800647c:	4611      	mov	r1, r2
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	4798      	blx	r3
 8006482:	4603      	mov	r3, r0
 8006484:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006486:	7dfb      	ldrb	r3, [r7, #23]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d001      	beq.n	8006490 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800648c:	7dfb      	ldrb	r3, [r7, #23]
 800648e:	e000      	b.n	8006492 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3718      	adds	r7, #24
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b086      	sub	sp, #24
 800649e:	af00      	add	r7, sp, #0
 80064a0:	60f8      	str	r0, [r7, #12]
 80064a2:	460b      	mov	r3, r1
 80064a4:	607a      	str	r2, [r7, #4]
 80064a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80064a8:	7afb      	ldrb	r3, [r7, #11]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d16f      	bne.n	800658e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	3314      	adds	r3, #20
 80064b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d15a      	bne.n	8006574 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d914      	bls.n	80064f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	1ad2      	subs	r2, r2, r3
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	461a      	mov	r2, r3
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f001 f8ac 	bl	800763e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80064e6:	2300      	movs	r3, #0
 80064e8:	2200      	movs	r2, #0
 80064ea:	2100      	movs	r1, #0
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f001 fda3 	bl	8008038 <USBD_LL_PrepareReceive>
 80064f2:	e03f      	b.n	8006574 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	68da      	ldr	r2, [r3, #12]
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d11c      	bne.n	800653a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	685a      	ldr	r2, [r3, #4]
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006508:	429a      	cmp	r2, r3
 800650a:	d316      	bcc.n	800653a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006516:	429a      	cmp	r2, r3
 8006518:	d20f      	bcs.n	800653a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800651a:	2200      	movs	r2, #0
 800651c:	2100      	movs	r1, #0
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f001 f88d 	bl	800763e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800652c:	2300      	movs	r3, #0
 800652e:	2200      	movs	r2, #0
 8006530:	2100      	movs	r1, #0
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f001 fd80 	bl	8008038 <USBD_LL_PrepareReceive>
 8006538:	e01c      	b.n	8006574 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b03      	cmp	r3, #3
 8006544:	d10f      	bne.n	8006566 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d009      	beq.n	8006566 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2200      	movs	r2, #0
 8006556:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	68f8      	ldr	r0, [r7, #12]
 8006564:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006566:	2180      	movs	r1, #128	; 0x80
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f001 fcbb 	bl	8007ee4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f001 f8b7 	bl	80076e2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d03a      	beq.n	80065f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f7ff fe42 	bl	8006208 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800658c:	e032      	b.n	80065f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800658e:	7afb      	ldrb	r3, [r7, #11]
 8006590:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006594:	b2db      	uxtb	r3, r3
 8006596:	4619      	mov	r1, r3
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f000 f97f 	bl	800689c <USBD_CoreFindEP>
 800659e:	4603      	mov	r3, r0
 80065a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
 80065a4:	2bff      	cmp	r3, #255	; 0xff
 80065a6:	d025      	beq.n	80065f4 <USBD_LL_DataInStage+0x15a>
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d122      	bne.n	80065f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d11c      	bne.n	80065f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80065ba:	7dfa      	ldrb	r2, [r7, #23]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	32ae      	adds	r2, #174	; 0xae
 80065c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d014      	beq.n	80065f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80065ca:	7dfa      	ldrb	r2, [r7, #23]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80065d2:	7dfa      	ldrb	r2, [r7, #23]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	32ae      	adds	r2, #174	; 0xae
 80065d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	7afa      	ldrb	r2, [r7, #11]
 80065e0:	4611      	mov	r1, r2
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	4798      	blx	r3
 80065e6:	4603      	mov	r3, r0
 80065e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80065ea:	7dbb      	ldrb	r3, [r7, #22]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80065f0:	7dbb      	ldrb	r3, [r7, #22]
 80065f2:	e000      	b.n	80065f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d014      	beq.n	8006664 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00e      	beq.n	8006664 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6852      	ldr	r2, [r2, #4]
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	4611      	mov	r1, r2
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	4798      	blx	r3
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	d001      	beq.n	8006664 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006660:	2303      	movs	r3, #3
 8006662:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006664:	2340      	movs	r3, #64	; 0x40
 8006666:	2200      	movs	r2, #0
 8006668:	2100      	movs	r1, #0
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f001 fbf5 	bl	8007e5a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2240      	movs	r2, #64	; 0x40
 800667c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006680:	2340      	movs	r3, #64	; 0x40
 8006682:	2200      	movs	r2, #0
 8006684:	2180      	movs	r1, #128	; 0x80
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 fbe7 	bl	8007e5a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2240      	movs	r2, #64	; 0x40
 8006696:	621a      	str	r2, [r3, #32]

  return ret;
 8006698:	7bfb      	ldrb	r3, [r7, #15]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80066a2:	b480      	push	{r7}
 80066a4:	b083      	sub	sp, #12
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	78fa      	ldrb	r2, [r7, #3]
 80066b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80066b4:	2300      	movs	r3, #0
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2204      	movs	r2, #4
 80066dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ec:	4770      	bx	lr

080066ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80066ee:	b480      	push	{r7}
 80066f0:	b083      	sub	sp, #12
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d106      	bne.n	8006710 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006708:	b2da      	uxtb	r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006710:	2300      	movs	r3, #0
}
 8006712:	4618      	mov	r0, r3
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b082      	sub	sp, #8
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b03      	cmp	r3, #3
 8006730:	d110      	bne.n	8006754 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006742:	69db      	ldr	r3, [r3, #28]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	460b      	mov	r3, r1
 8006768:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	32ae      	adds	r2, #174	; 0xae
 8006774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800677c:	2303      	movs	r3, #3
 800677e:	e01c      	b.n	80067ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b03      	cmp	r3, #3
 800678a:	d115      	bne.n	80067b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	32ae      	adds	r2, #174	; 0xae
 8006796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	32ae      	adds	r2, #174	; 0xae
 80067aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ae:	6a1b      	ldr	r3, [r3, #32]
 80067b0:	78fa      	ldrb	r2, [r7, #3]
 80067b2:	4611      	mov	r1, r2
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	460b      	mov	r3, r1
 80067cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	32ae      	adds	r2, #174	; 0xae
 80067d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e01c      	b.n	800681e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	2b03      	cmp	r3, #3
 80067ee:	d115      	bne.n	800681c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	32ae      	adds	r2, #174	; 0xae
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	32ae      	adds	r2, #174	; 0xae
 800680e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006814:	78fa      	ldrb	r2, [r7, #3]
 8006816:	4611      	mov	r1, r2
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b084      	sub	sp, #16
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006844:	2300      	movs	r3, #0
 8006846:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00e      	beq.n	8006878 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6852      	ldr	r2, [r2, #4]
 8006866:	b2d2      	uxtb	r2, r2
 8006868:	4611      	mov	r1, r2
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006874:	2303      	movs	r3, #3
 8006876:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800688e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006890:	4618      	mov	r0, r3
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80068a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	370c      	adds	r7, #12
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr

080068b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b086      	sub	sp, #24
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
 80068be:	460b      	mov	r3, r1
 80068c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	885b      	ldrh	r3, [r3, #2]
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	b29b      	uxth	r3, r3
 80068da:	429a      	cmp	r2, r3
 80068dc:	d920      	bls.n	8006920 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80068e6:	e013      	b.n	8006910 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80068e8:	f107 030a 	add.w	r3, r7, #10
 80068ec:	4619      	mov	r1, r3
 80068ee:	6978      	ldr	r0, [r7, #20]
 80068f0:	f000 f81b 	bl	800692a <USBD_GetNextDesc>
 80068f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	785b      	ldrb	r3, [r3, #1]
 80068fa:	2b05      	cmp	r3, #5
 80068fc:	d108      	bne.n	8006910 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	789b      	ldrb	r3, [r3, #2]
 8006906:	78fa      	ldrb	r2, [r7, #3]
 8006908:	429a      	cmp	r2, r3
 800690a:	d008      	beq.n	800691e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800690c:	2300      	movs	r3, #0
 800690e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	885b      	ldrh	r3, [r3, #2]
 8006914:	b29a      	uxth	r2, r3
 8006916:	897b      	ldrh	r3, [r7, #10]
 8006918:	429a      	cmp	r2, r3
 800691a:	d8e5      	bhi.n	80068e8 <USBD_GetEpDesc+0x32>
 800691c:	e000      	b.n	8006920 <USBD_GetEpDesc+0x6a>
          break;
 800691e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006920:	693b      	ldr	r3, [r7, #16]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	881a      	ldrh	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	4413      	add	r3, r2
 8006944:	b29a      	uxth	r2, r3
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4413      	add	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006956:	68fb      	ldr	r3, [r7, #12]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	3301      	adds	r3, #1
 800697a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006982:	8a3b      	ldrh	r3, [r7, #16]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	b21a      	sxth	r2, r3
 8006988:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800698c:	4313      	orrs	r3, r2
 800698e:	b21b      	sxth	r3, r3
 8006990:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006992:	89fb      	ldrh	r3, [r7, #14]
}
 8006994:	4618      	mov	r0, r3
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d005      	beq.n	80069c6 <USBD_StdDevReq+0x26>
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d857      	bhi.n	8006a6e <USBD_StdDevReq+0xce>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00f      	beq.n	80069e2 <USBD_StdDevReq+0x42>
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	d153      	bne.n	8006a6e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	32ae      	adds	r2, #174	; 0xae
 80069d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
 80069dc:	4603      	mov	r3, r0
 80069de:	73fb      	strb	r3, [r7, #15]
      break;
 80069e0:	e04a      	b.n	8006a78 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	785b      	ldrb	r3, [r3, #1]
 80069e6:	2b09      	cmp	r3, #9
 80069e8:	d83b      	bhi.n	8006a62 <USBD_StdDevReq+0xc2>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <USBD_StdDevReq+0x50>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a45 	.word	0x08006a45
 80069f4:	08006a59 	.word	0x08006a59
 80069f8:	08006a63 	.word	0x08006a63
 80069fc:	08006a4f 	.word	0x08006a4f
 8006a00:	08006a63 	.word	0x08006a63
 8006a04:	08006a23 	.word	0x08006a23
 8006a08:	08006a19 	.word	0x08006a19
 8006a0c:	08006a63 	.word	0x08006a63
 8006a10:	08006a3b 	.word	0x08006a3b
 8006a14:	08006a2d 	.word	0x08006a2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa3c 	bl	8006e98 <USBD_GetDescriptor>
          break;
 8006a20:	e024      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fba1 	bl	800716c <USBD_SetAddress>
          break;
 8006a2a:	e01f      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fbe0 	bl	80071f4 <USBD_SetConfig>
 8006a34:	4603      	mov	r3, r0
 8006a36:	73fb      	strb	r3, [r7, #15]
          break;
 8006a38:	e018      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fc83 	bl	8007348 <USBD_GetConfig>
          break;
 8006a42:	e013      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fcb4 	bl	80073b4 <USBD_GetStatus>
          break;
 8006a4c:	e00e      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fce3 	bl	800741c <USBD_SetFeature>
          break;
 8006a56:	e009      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fd07 	bl	800746e <USBD_ClrFeature>
          break;
 8006a60:	e004      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fd5e 	bl	8007526 <USBD_CtlError>
          break;
 8006a6a:	bf00      	nop
      }
      break;
 8006a6c:	e004      	b.n	8006a78 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fd58 	bl	8007526 <USBD_CtlError>
      break;
 8006a76:	bf00      	nop
  }

  return ret;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop

08006a84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d005      	beq.n	8006aaa <USBD_StdItfReq+0x26>
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d852      	bhi.n	8006b48 <USBD_StdItfReq+0xc4>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <USBD_StdItfReq+0x26>
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d14e      	bne.n	8006b48 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d840      	bhi.n	8006b3a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	889b      	ldrh	r3, [r3, #4]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d836      	bhi.n	8006b30 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	889b      	ldrh	r3, [r3, #4]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff fed9 	bl	8006882 <USBD_CoreFindIF>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	2bff      	cmp	r3, #255	; 0xff
 8006ad8:	d01d      	beq.n	8006b16 <USBD_StdItfReq+0x92>
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d11a      	bne.n	8006b16 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006ae0:	7bba      	ldrb	r2, [r7, #14]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	32ae      	adds	r2, #174	; 0xae
 8006ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00f      	beq.n	8006b10 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006af0:	7bba      	ldrb	r2, [r7, #14]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006af8:	7bba      	ldrb	r2, [r7, #14]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	32ae      	adds	r2, #174	; 0xae
 8006afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	4798      	blx	r3
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b0e:	e004      	b.n	8006b1a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b10:	2303      	movs	r3, #3
 8006b12:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b14:	e001      	b.n	8006b1a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b16:	2303      	movs	r3, #3
 8006b18:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	88db      	ldrh	r3, [r3, #6]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d110      	bne.n	8006b44 <USBD_StdItfReq+0xc0>
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10d      	bne.n	8006b44 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fdc7 	bl	80076bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b2e:	e009      	b.n	8006b44 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fcf7 	bl	8007526 <USBD_CtlError>
          break;
 8006b38:	e004      	b.n	8006b44 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fcf2 	bl	8007526 <USBD_CtlError>
          break;
 8006b42:	e000      	b.n	8006b46 <USBD_StdItfReq+0xc2>
          break;
 8006b44:	bf00      	nop
      }
      break;
 8006b46:	e004      	b.n	8006b52 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fceb 	bl	8007526 <USBD_CtlError>
      break;
 8006b50:	bf00      	nop
  }

  return ret;
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	889b      	ldrh	r3, [r3, #4]
 8006b6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	d007      	beq.n	8006b8c <USBD_StdEPReq+0x30>
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	f200 817f 	bhi.w	8006e80 <USBD_StdEPReq+0x324>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d02a      	beq.n	8006bdc <USBD_StdEPReq+0x80>
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	f040 817a 	bne.w	8006e80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff fe83 	bl	800689c <USBD_CoreFindEP>
 8006b96:	4603      	mov	r3, r0
 8006b98:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b9a:	7b7b      	ldrb	r3, [r7, #13]
 8006b9c:	2bff      	cmp	r3, #255	; 0xff
 8006b9e:	f000 8174 	beq.w	8006e8a <USBD_StdEPReq+0x32e>
 8006ba2:	7b7b      	ldrb	r3, [r7, #13]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f040 8170 	bne.w	8006e8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006baa:	7b7a      	ldrb	r2, [r7, #13]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006bb2:	7b7a      	ldrb	r2, [r7, #13]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	32ae      	adds	r2, #174	; 0xae
 8006bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8163 	beq.w	8006e8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006bc4:	7b7a      	ldrb	r2, [r7, #13]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	32ae      	adds	r2, #174	; 0xae
 8006bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bda:	e156      	b.n	8006e8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d008      	beq.n	8006bf6 <USBD_StdEPReq+0x9a>
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	f300 8145 	bgt.w	8006e74 <USBD_StdEPReq+0x318>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 809b 	beq.w	8006d26 <USBD_StdEPReq+0x1ca>
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d03c      	beq.n	8006c6e <USBD_StdEPReq+0x112>
 8006bf4:	e13e      	b.n	8006e74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d002      	beq.n	8006c08 <USBD_StdEPReq+0xac>
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d016      	beq.n	8006c34 <USBD_StdEPReq+0xd8>
 8006c06:	e02c      	b.n	8006c62 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00d      	beq.n	8006c2a <USBD_StdEPReq+0xce>
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	2b80      	cmp	r3, #128	; 0x80
 8006c12:	d00a      	beq.n	8006c2a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 f963 	bl	8007ee4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c1e:	2180      	movs	r1, #128	; 0x80
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 f95f 	bl	8007ee4 <USBD_LL_StallEP>
 8006c26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c28:	e020      	b.n	8006c6c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fc7a 	bl	8007526 <USBD_CtlError>
              break;
 8006c32:	e01b      	b.n	8006c6c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	885b      	ldrh	r3, [r3, #2]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10e      	bne.n	8006c5a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00b      	beq.n	8006c5a <USBD_StdEPReq+0xfe>
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b80      	cmp	r3, #128	; 0x80
 8006c46:	d008      	beq.n	8006c5a <USBD_StdEPReq+0xfe>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	88db      	ldrh	r3, [r3, #6]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d104      	bne.n	8006c5a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f001 f945 	bl	8007ee4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fd2e 	bl	80076bc <USBD_CtlSendStatus>

              break;
 8006c60:	e004      	b.n	8006c6c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fc5e 	bl	8007526 <USBD_CtlError>
              break;
 8006c6a:	bf00      	nop
          }
          break;
 8006c6c:	e107      	b.n	8006e7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d002      	beq.n	8006c80 <USBD_StdEPReq+0x124>
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d016      	beq.n	8006cac <USBD_StdEPReq+0x150>
 8006c7e:	e04b      	b.n	8006d18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <USBD_StdEPReq+0x146>
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	2b80      	cmp	r3, #128	; 0x80
 8006c8a:	d00a      	beq.n	8006ca2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f001 f927 	bl	8007ee4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c96:	2180      	movs	r1, #128	; 0x80
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f001 f923 	bl	8007ee4 <USBD_LL_StallEP>
 8006c9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ca0:	e040      	b.n	8006d24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fc3e 	bl	8007526 <USBD_CtlError>
              break;
 8006caa:	e03b      	b.n	8006d24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	885b      	ldrh	r3, [r3, #2]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d136      	bne.n	8006d22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 f92d 	bl	8007f22 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fcf7 	bl	80076bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff fde2 	bl	800689c <USBD_CoreFindEP>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cdc:	7b7b      	ldrb	r3, [r7, #13]
 8006cde:	2bff      	cmp	r3, #255	; 0xff
 8006ce0:	d01f      	beq.n	8006d22 <USBD_StdEPReq+0x1c6>
 8006ce2:	7b7b      	ldrb	r3, [r7, #13]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d11c      	bne.n	8006d22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006ce8:	7b7a      	ldrb	r2, [r7, #13]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006cf0:	7b7a      	ldrb	r2, [r7, #13]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	32ae      	adds	r2, #174	; 0xae
 8006cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d010      	beq.n	8006d22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d00:	7b7a      	ldrb	r2, [r7, #13]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	32ae      	adds	r2, #174	; 0xae
 8006d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
 8006d12:	4603      	mov	r3, r0
 8006d14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d16:	e004      	b.n	8006d22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fc03 	bl	8007526 <USBD_CtlError>
              break;
 8006d20:	e000      	b.n	8006d24 <USBD_StdEPReq+0x1c8>
              break;
 8006d22:	bf00      	nop
          }
          break;
 8006d24:	e0ab      	b.n	8006e7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d002      	beq.n	8006d38 <USBD_StdEPReq+0x1dc>
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d032      	beq.n	8006d9c <USBD_StdEPReq+0x240>
 8006d36:	e097      	b.n	8006e68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d007      	beq.n	8006d4e <USBD_StdEPReq+0x1f2>
 8006d3e:	7bbb      	ldrb	r3, [r7, #14]
 8006d40:	2b80      	cmp	r3, #128	; 0x80
 8006d42:	d004      	beq.n	8006d4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fbed 	bl	8007526 <USBD_CtlError>
                break;
 8006d4c:	e091      	b.n	8006e72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	da0b      	bge.n	8006d6e <USBD_StdEPReq+0x212>
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	3310      	adds	r3, #16
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	4413      	add	r3, r2
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	e00b      	b.n	8006d86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	4413      	add	r3, r2
 8006d84:	3304      	adds	r3, #4
 8006d86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2202      	movs	r2, #2
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fc37 	bl	8007608 <USBD_CtlSendData>
              break;
 8006d9a:	e06a      	b.n	8006e72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da11      	bge.n	8006dc8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	f003 020f 	and.w	r2, r3, #15
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	3324      	adds	r3, #36	; 0x24
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d117      	bne.n	8006dee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fbb0 	bl	8007526 <USBD_CtlError>
                  break;
 8006dc6:	e054      	b.n	8006e72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	f003 020f 	and.w	r2, r3, #15
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d104      	bne.n	8006dee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fb9d 	bl	8007526 <USBD_CtlError>
                  break;
 8006dec:	e041      	b.n	8006e72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da0b      	bge.n	8006e0e <USBD_StdEPReq+0x2b2>
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	3310      	adds	r3, #16
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	4413      	add	r3, r2
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	e00b      	b.n	8006e26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	4413      	add	r3, r2
 8006e24:	3304      	adds	r3, #4
 8006e26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <USBD_StdEPReq+0x2d8>
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	2b80      	cmp	r3, #128	; 0x80
 8006e32:	d103      	bne.n	8006e3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	e00e      	b.n	8006e5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f88d 	bl	8007f60 <USBD_LL_IsStallEP>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	e002      	b.n	8006e5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fbd1 	bl	8007608 <USBD_CtlSendData>
              break;
 8006e66:	e004      	b.n	8006e72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fb5b 	bl	8007526 <USBD_CtlError>
              break;
 8006e70:	bf00      	nop
          }
          break;
 8006e72:	e004      	b.n	8006e7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fb55 	bl	8007526 <USBD_CtlError>
          break;
 8006e7c:	bf00      	nop
      }
      break;
 8006e7e:	e005      	b.n	8006e8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fb4f 	bl	8007526 <USBD_CtlError>
      break;
 8006e88:	e000      	b.n	8006e8c <USBD_StdEPReq+0x330>
      break;
 8006e8a:	bf00      	nop
  }

  return ret;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	885b      	ldrh	r3, [r3, #2]
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	2b06      	cmp	r3, #6
 8006eba:	f200 8128 	bhi.w	800710e <USBD_GetDescriptor+0x276>
 8006ebe:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <USBD_GetDescriptor+0x2c>)
 8006ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec4:	08006ee1 	.word	0x08006ee1
 8006ec8:	08006ef9 	.word	0x08006ef9
 8006ecc:	08006f39 	.word	0x08006f39
 8006ed0:	0800710f 	.word	0x0800710f
 8006ed4:	0800710f 	.word	0x0800710f
 8006ed8:	080070af 	.word	0x080070af
 8006edc:	080070db 	.word	0x080070db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	7c12      	ldrb	r2, [r2, #16]
 8006eec:	f107 0108 	add.w	r1, r7, #8
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	60f8      	str	r0, [r7, #12]
      break;
 8006ef6:	e112      	b.n	800711e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	7c1b      	ldrb	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10d      	bne.n	8006f1c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f08:	f107 0208 	add.w	r2, r7, #8
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4798      	blx	r3
 8006f10:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	2202      	movs	r2, #2
 8006f18:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f1a:	e100      	b.n	800711e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	f107 0208 	add.w	r2, r7, #8
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3301      	adds	r3, #1
 8006f32:	2202      	movs	r2, #2
 8006f34:	701a      	strb	r2, [r3, #0]
      break;
 8006f36:	e0f2      	b.n	800711e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	885b      	ldrh	r3, [r3, #2]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b05      	cmp	r3, #5
 8006f40:	f200 80ac 	bhi.w	800709c <USBD_GetDescriptor+0x204>
 8006f44:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <USBD_GetDescriptor+0xb4>)
 8006f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4a:	bf00      	nop
 8006f4c:	08006f65 	.word	0x08006f65
 8006f50:	08006f99 	.word	0x08006f99
 8006f54:	08006fcd 	.word	0x08006fcd
 8006f58:	08007001 	.word	0x08007001
 8006f5c:	08007035 	.word	0x08007035
 8006f60:	08007069 	.word	0x08007069
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	7c12      	ldrb	r2, [r2, #16]
 8006f7c:	f107 0108 	add.w	r1, r7, #8
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f86:	e091      	b.n	80070ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 facb 	bl	8007526 <USBD_CtlError>
            err++;
 8006f90:	7afb      	ldrb	r3, [r7, #11]
 8006f92:	3301      	adds	r3, #1
 8006f94:	72fb      	strb	r3, [r7, #11]
          break;
 8006f96:	e089      	b.n	80070ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7c12      	ldrb	r2, [r2, #16]
 8006fb0:	f107 0108 	add.w	r1, r7, #8
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
 8006fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fba:	e077      	b.n	80070ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fab1 	bl	8007526 <USBD_CtlError>
            err++;
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fca:	e06f      	b.n	80070ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	7c12      	ldrb	r2, [r2, #16]
 8006fe4:	f107 0108 	add.w	r1, r7, #8
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
 8006fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fee:	e05d      	b.n	80070ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa97 	bl	8007526 <USBD_CtlError>
            err++;
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ffe:	e055      	b.n	80070ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	7c12      	ldrb	r2, [r2, #16]
 8007018:	f107 0108 	add.w	r1, r7, #8
 800701c:	4610      	mov	r0, r2
 800701e:	4798      	blx	r3
 8007020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007022:	e043      	b.n	80070ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa7d 	bl	8007526 <USBD_CtlError>
            err++;
 800702c:	7afb      	ldrb	r3, [r7, #11]
 800702e:	3301      	adds	r3, #1
 8007030:	72fb      	strb	r3, [r7, #11]
          break;
 8007032:	e03b      	b.n	80070ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	7c12      	ldrb	r2, [r2, #16]
 800704c:	f107 0108 	add.w	r1, r7, #8
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
 8007054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007056:	e029      	b.n	80070ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fa63 	bl	8007526 <USBD_CtlError>
            err++;
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	3301      	adds	r3, #1
 8007064:	72fb      	strb	r3, [r7, #11]
          break;
 8007066:	e021      	b.n	80070ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	7c12      	ldrb	r2, [r2, #16]
 8007080:	f107 0108 	add.w	r1, r7, #8
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
 8007088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800708a:	e00f      	b.n	80070ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa49 	bl	8007526 <USBD_CtlError>
            err++;
 8007094:	7afb      	ldrb	r3, [r7, #11]
 8007096:	3301      	adds	r3, #1
 8007098:	72fb      	strb	r3, [r7, #11]
          break;
 800709a:	e007      	b.n	80070ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa41 	bl	8007526 <USBD_CtlError>
          err++;
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	3301      	adds	r3, #1
 80070a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80070aa:	bf00      	nop
      }
      break;
 80070ac:	e037      	b.n	800711e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	7c1b      	ldrb	r3, [r3, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d109      	bne.n	80070ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070be:	f107 0208 	add.w	r2, r7, #8
 80070c2:	4610      	mov	r0, r2
 80070c4:	4798      	blx	r3
 80070c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070c8:	e029      	b.n	800711e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fa2a 	bl	8007526 <USBD_CtlError>
        err++;
 80070d2:	7afb      	ldrb	r3, [r7, #11]
 80070d4:	3301      	adds	r3, #1
 80070d6:	72fb      	strb	r3, [r7, #11]
      break;
 80070d8:	e021      	b.n	800711e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	7c1b      	ldrb	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10d      	bne.n	80070fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ea:	f107 0208 	add.w	r2, r7, #8
 80070ee:	4610      	mov	r0, r2
 80070f0:	4798      	blx	r3
 80070f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	2207      	movs	r2, #7
 80070fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070fc:	e00f      	b.n	800711e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fa10 	bl	8007526 <USBD_CtlError>
        err++;
 8007106:	7afb      	ldrb	r3, [r7, #11]
 8007108:	3301      	adds	r3, #1
 800710a:	72fb      	strb	r3, [r7, #11]
      break;
 800710c:	e007      	b.n	800711e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa08 	bl	8007526 <USBD_CtlError>
      err++;
 8007116:	7afb      	ldrb	r3, [r7, #11]
 8007118:	3301      	adds	r3, #1
 800711a:	72fb      	strb	r3, [r7, #11]
      break;
 800711c:	bf00      	nop
  }

  if (err != 0U)
 800711e:	7afb      	ldrb	r3, [r7, #11]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d11e      	bne.n	8007162 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	88db      	ldrh	r3, [r3, #6]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d016      	beq.n	800715a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800712c:	893b      	ldrh	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00e      	beq.n	8007150 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	88da      	ldrh	r2, [r3, #6]
 8007136:	893b      	ldrh	r3, [r7, #8]
 8007138:	4293      	cmp	r3, r2
 800713a:	bf28      	it	cs
 800713c:	4613      	movcs	r3, r2
 800713e:	b29b      	uxth	r3, r3
 8007140:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007142:	893b      	ldrh	r3, [r7, #8]
 8007144:	461a      	mov	r2, r3
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fa5d 	bl	8007608 <USBD_CtlSendData>
 800714e:	e009      	b.n	8007164 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f9e7 	bl	8007526 <USBD_CtlError>
 8007158:	e004      	b.n	8007164 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 faae 	bl	80076bc <USBD_CtlSendStatus>
 8007160:	e000      	b.n	8007164 <USBD_GetDescriptor+0x2cc>
    return;
 8007162:	bf00      	nop
  }
}
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop

0800716c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	889b      	ldrh	r3, [r3, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d131      	bne.n	80071e2 <USBD_SetAddress+0x76>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	88db      	ldrh	r3, [r3, #6]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d12d      	bne.n	80071e2 <USBD_SetAddress+0x76>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	885b      	ldrh	r3, [r3, #2]
 800718a:	2b7f      	cmp	r3, #127	; 0x7f
 800718c:	d829      	bhi.n	80071e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	885b      	ldrh	r3, [r3, #2]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007198:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d104      	bne.n	80071b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f9bc 	bl	8007526 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ae:	e01d      	b.n	80071ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	7bfa      	ldrb	r2, [r7, #15]
 80071b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fefb 	bl	8007fb8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fa7a 	bl	80076bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d004      	beq.n	80071d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d6:	e009      	b.n	80071ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e0:	e004      	b.n	80071ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f99e 	bl	8007526 <USBD_CtlError>
  }
}
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	4b4e      	ldr	r3, [pc, #312]	; (8007344 <USBD_SetConfig+0x150>)
 800720a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800720c:	4b4d      	ldr	r3, [pc, #308]	; (8007344 <USBD_SetConfig+0x150>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d905      	bls.n	8007220 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f985 	bl	8007526 <USBD_CtlError>
    return USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e08c      	b.n	800733a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d002      	beq.n	8007232 <USBD_SetConfig+0x3e>
 800722c:	2b03      	cmp	r3, #3
 800722e:	d029      	beq.n	8007284 <USBD_SetConfig+0x90>
 8007230:	e075      	b.n	800731e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007232:	4b44      	ldr	r3, [pc, #272]	; (8007344 <USBD_SetConfig+0x150>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d020      	beq.n	800727c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800723a:	4b42      	ldr	r3, [pc, #264]	; (8007344 <USBD_SetConfig+0x150>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007244:	4b3f      	ldr	r3, [pc, #252]	; (8007344 <USBD_SetConfig+0x150>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fe ffe7 	bl	800621e <USBD_SetClassConfig>
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d008      	beq.n	800726c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f962 	bl	8007526 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800726a:	e065      	b.n	8007338 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fa25 	bl	80076bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2203      	movs	r2, #3
 8007276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800727a:	e05d      	b.n	8007338 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fa1d 	bl	80076bc <USBD_CtlSendStatus>
      break;
 8007282:	e059      	b.n	8007338 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007284:	4b2f      	ldr	r3, [pc, #188]	; (8007344 <USBD_SetConfig+0x150>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d112      	bne.n	80072b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007294:	4b2b      	ldr	r3, [pc, #172]	; (8007344 <USBD_SetConfig+0x150>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800729e:	4b29      	ldr	r3, [pc, #164]	; (8007344 <USBD_SetConfig+0x150>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7fe ffd6 	bl	8006256 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa06 	bl	80076bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072b0:	e042      	b.n	8007338 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80072b2:	4b24      	ldr	r3, [pc, #144]	; (8007344 <USBD_SetConfig+0x150>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d02a      	beq.n	8007316 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7fe ffc4 	bl	8006256 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80072ce:	4b1d      	ldr	r3, [pc, #116]	; (8007344 <USBD_SetConfig+0x150>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072d8:	4b1a      	ldr	r3, [pc, #104]	; (8007344 <USBD_SetConfig+0x150>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fe ff9d 	bl	800621e <USBD_SetClassConfig>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00f      	beq.n	800730e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f918 	bl	8007526 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7fe ffa9 	bl	8006256 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800730c:	e014      	b.n	8007338 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9d4 	bl	80076bc <USBD_CtlSendStatus>
      break;
 8007314:	e010      	b.n	8007338 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f9d0 	bl	80076bc <USBD_CtlSendStatus>
      break;
 800731c:	e00c      	b.n	8007338 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f900 	bl	8007526 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007326:	4b07      	ldr	r3, [pc, #28]	; (8007344 <USBD_SetConfig+0x150>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7fe ff92 	bl	8006256 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007332:	2303      	movs	r3, #3
 8007334:	73fb      	strb	r3, [r7, #15]
      break;
 8007336:	bf00      	nop
  }

  return ret;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	200002f4 	.word	0x200002f4

08007348 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	88db      	ldrh	r3, [r3, #6]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d004      	beq.n	8007364 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f8e2 	bl	8007526 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007362:	e023      	b.n	80073ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	dc02      	bgt.n	8007376 <USBD_GetConfig+0x2e>
 8007370:	2b00      	cmp	r3, #0
 8007372:	dc03      	bgt.n	800737c <USBD_GetConfig+0x34>
 8007374:	e015      	b.n	80073a2 <USBD_GetConfig+0x5a>
 8007376:	2b03      	cmp	r3, #3
 8007378:	d00b      	beq.n	8007392 <USBD_GetConfig+0x4a>
 800737a:	e012      	b.n	80073a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3308      	adds	r3, #8
 8007386:	2201      	movs	r2, #1
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f93c 	bl	8007608 <USBD_CtlSendData>
        break;
 8007390:	e00c      	b.n	80073ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3304      	adds	r3, #4
 8007396:	2201      	movs	r2, #1
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f934 	bl	8007608 <USBD_CtlSendData>
        break;
 80073a0:	e004      	b.n	80073ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f8be 	bl	8007526 <USBD_CtlError>
        break;
 80073aa:	bf00      	nop
}
 80073ac:	bf00      	nop
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d81e      	bhi.n	800740a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	88db      	ldrh	r3, [r3, #6]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d004      	beq.n	80073de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f8a5 	bl	8007526 <USBD_CtlError>
        break;
 80073dc:	e01a      	b.n	8007414 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2201      	movs	r2, #1
 80073e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f043 0202 	orr.w	r2, r3, #2
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	330c      	adds	r3, #12
 80073fe:	2202      	movs	r2, #2
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f900 	bl	8007608 <USBD_CtlSendData>
      break;
 8007408:	e004      	b.n	8007414 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f88a 	bl	8007526 <USBD_CtlError>
      break;
 8007412:	bf00      	nop
  }
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	885b      	ldrh	r3, [r3, #2]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d107      	bne.n	800743e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f940 	bl	80076bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800743c:	e013      	b.n	8007466 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	885b      	ldrh	r3, [r3, #2]
 8007442:	2b02      	cmp	r3, #2
 8007444:	d10b      	bne.n	800745e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	889b      	ldrh	r3, [r3, #4]
 800744a:	0a1b      	lsrs	r3, r3, #8
 800744c:	b29b      	uxth	r3, r3
 800744e:	b2da      	uxtb	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f930 	bl	80076bc <USBD_CtlSendStatus>
}
 800745c:	e003      	b.n	8007466 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f860 	bl	8007526 <USBD_CtlError>
}
 8007466:	bf00      	nop
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800747e:	b2db      	uxtb	r3, r3
 8007480:	3b01      	subs	r3, #1
 8007482:	2b02      	cmp	r3, #2
 8007484:	d80b      	bhi.n	800749e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	885b      	ldrh	r3, [r3, #2]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d10c      	bne.n	80074a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f910 	bl	80076bc <USBD_CtlSendStatus>
      }
      break;
 800749c:	e004      	b.n	80074a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f840 	bl	8007526 <USBD_CtlError>
      break;
 80074a6:	e000      	b.n	80074aa <USBD_ClrFeature+0x3c>
      break;
 80074a8:	bf00      	nop
  }
}
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	781a      	ldrb	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3301      	adds	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	781a      	ldrb	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3301      	adds	r3, #1
 80074da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f7ff fa41 	bl	8006964 <SWAPBYTE>
 80074e2:	4603      	mov	r3, r0
 80074e4:	461a      	mov	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff fa34 	bl	8006964 <SWAPBYTE>
 80074fc:	4603      	mov	r3, r0
 80074fe:	461a      	mov	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3301      	adds	r3, #1
 8007508:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3301      	adds	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f7ff fa27 	bl	8006964 <SWAPBYTE>
 8007516:	4603      	mov	r3, r0
 8007518:	461a      	mov	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	80da      	strh	r2, [r3, #6]
}
 800751e:	bf00      	nop
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b082      	sub	sp, #8
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fcd6 	bl	8007ee4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007538:	2100      	movs	r1, #0
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 fcd2 	bl	8007ee4 <USBD_LL_StallEP>
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d036      	beq.n	80075cc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007562:	6938      	ldr	r0, [r7, #16]
 8007564:	f000 f836 	bl	80075d4 <USBD_GetLen>
 8007568:	4603      	mov	r3, r0
 800756a:	3301      	adds	r3, #1
 800756c:	b29b      	uxth	r3, r3
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	4413      	add	r3, r2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	7812      	ldrb	r2, [r2, #0]
 8007580:	701a      	strb	r2, [r3, #0]
  idx++;
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	3301      	adds	r3, #1
 8007586:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4413      	add	r3, r2
 800758e:	2203      	movs	r2, #3
 8007590:	701a      	strb	r2, [r3, #0]
  idx++;
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	3301      	adds	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007598:	e013      	b.n	80075c2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	4413      	add	r3, r2
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	7812      	ldrb	r2, [r2, #0]
 80075a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	3301      	adds	r3, #1
 80075aa:	613b      	str	r3, [r7, #16]
    idx++;
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
 80075ae:	3301      	adds	r3, #1
 80075b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	4413      	add	r3, r2
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
    idx++;
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	3301      	adds	r3, #1
 80075c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e7      	bne.n	800759a <USBD_GetString+0x52>
 80075ca:	e000      	b.n	80075ce <USBD_GetString+0x86>
    return;
 80075cc:	bf00      	nop
  }
}
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80075e4:	e005      	b.n	80075f2 <USBD_GetLen+0x1e>
  {
    len++;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	3301      	adds	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	3301      	adds	r3, #1
 80075f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1f5      	bne.n	80075e6 <USBD_GetLen+0x12>
  }

  return len;
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2202      	movs	r2, #2
 8007618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	2100      	movs	r1, #0
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fce1 	bl	8007ff6 <USBD_LL_Transmit>

  return USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	2100      	movs	r1, #0
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 fcd0 	bl	8007ff6 <USBD_LL_Transmit>

  return USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2203      	movs	r2, #3
 8007670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	2100      	movs	r1, #0
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f000 fcd4 	bl	8008038 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	2100      	movs	r1, #0
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fcc3 	bl	8008038 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2204      	movs	r2, #4
 80076c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076cc:	2300      	movs	r3, #0
 80076ce:	2200      	movs	r2, #0
 80076d0:	2100      	movs	r1, #0
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fc8f 	bl	8007ff6 <USBD_LL_Transmit>

  return USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2205      	movs	r2, #5
 80076ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076f2:	2300      	movs	r3, #0
 80076f4:	2200      	movs	r2, #0
 80076f6:	2100      	movs	r1, #0
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fc9d 	bl	8008038 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800770c:	2200      	movs	r2, #0
 800770e:	4912      	ldr	r1, [pc, #72]	; (8007758 <MX_USB_DEVICE_Init+0x50>)
 8007710:	4812      	ldr	r0, [pc, #72]	; (800775c <MX_USB_DEVICE_Init+0x54>)
 8007712:	f7fe fd07 	bl	8006124 <USBD_Init>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800771c:	f7f9 f97b 	bl	8000a16 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007720:	490f      	ldr	r1, [pc, #60]	; (8007760 <MX_USB_DEVICE_Init+0x58>)
 8007722:	480e      	ldr	r0, [pc, #56]	; (800775c <MX_USB_DEVICE_Init+0x54>)
 8007724:	f7fe fd2e 	bl	8006184 <USBD_RegisterClass>
 8007728:	4603      	mov	r3, r0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d001      	beq.n	8007732 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800772e:	f7f9 f972 	bl	8000a16 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007732:	490c      	ldr	r1, [pc, #48]	; (8007764 <MX_USB_DEVICE_Init+0x5c>)
 8007734:	4809      	ldr	r0, [pc, #36]	; (800775c <MX_USB_DEVICE_Init+0x54>)
 8007736:	f7fe fc1f 	bl	8005f78 <USBD_CDC_RegisterInterface>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d001      	beq.n	8007744 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007740:	f7f9 f969 	bl	8000a16 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007744:	4805      	ldr	r0, [pc, #20]	; (800775c <MX_USB_DEVICE_Init+0x54>)
 8007746:	f7fe fd53 	bl	80061f0 <USBD_Start>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007750:	f7f9 f961 	bl	8000a16 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007754:	bf00      	nop
 8007756:	bd80      	pop	{r7, pc}
 8007758:	200000ac 	.word	0x200000ac
 800775c:	200002f8 	.word	0x200002f8
 8007760:	20000018 	.word	0x20000018
 8007764:	20000098 	.word	0x20000098

08007768 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800776c:	2200      	movs	r2, #0
 800776e:	4905      	ldr	r1, [pc, #20]	; (8007784 <CDC_Init_FS+0x1c>)
 8007770:	4805      	ldr	r0, [pc, #20]	; (8007788 <CDC_Init_FS+0x20>)
 8007772:	f7fe fc1b 	bl	8005fac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007776:	4905      	ldr	r1, [pc, #20]	; (800778c <CDC_Init_FS+0x24>)
 8007778:	4803      	ldr	r0, [pc, #12]	; (8007788 <CDC_Init_FS+0x20>)
 800777a:	f7fe fc39 	bl	8005ff0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800777e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007780:	4618      	mov	r0, r3
 8007782:	bd80      	pop	{r7, pc}
 8007784:	20000dd4 	.word	0x20000dd4
 8007788:	200002f8 	.word	0x200002f8
 800778c:	200005d4 	.word	0x200005d4

08007790 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007790:	b480      	push	{r7}
 8007792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007794:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007796:	4618      	mov	r0, r3
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	6039      	str	r1, [r7, #0]
 80077aa:	71fb      	strb	r3, [r7, #7]
 80077ac:	4613      	mov	r3, r2
 80077ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80077b0:	79fb      	ldrb	r3, [r7, #7]
 80077b2:	2b23      	cmp	r3, #35	; 0x23
 80077b4:	d84a      	bhi.n	800784c <CDC_Control_FS+0xac>
 80077b6:	a201      	add	r2, pc, #4	; (adr r2, 80077bc <CDC_Control_FS+0x1c>)
 80077b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077bc:	0800784d 	.word	0x0800784d
 80077c0:	0800784d 	.word	0x0800784d
 80077c4:	0800784d 	.word	0x0800784d
 80077c8:	0800784d 	.word	0x0800784d
 80077cc:	0800784d 	.word	0x0800784d
 80077d0:	0800784d 	.word	0x0800784d
 80077d4:	0800784d 	.word	0x0800784d
 80077d8:	0800784d 	.word	0x0800784d
 80077dc:	0800784d 	.word	0x0800784d
 80077e0:	0800784d 	.word	0x0800784d
 80077e4:	0800784d 	.word	0x0800784d
 80077e8:	0800784d 	.word	0x0800784d
 80077ec:	0800784d 	.word	0x0800784d
 80077f0:	0800784d 	.word	0x0800784d
 80077f4:	0800784d 	.word	0x0800784d
 80077f8:	0800784d 	.word	0x0800784d
 80077fc:	0800784d 	.word	0x0800784d
 8007800:	0800784d 	.word	0x0800784d
 8007804:	0800784d 	.word	0x0800784d
 8007808:	0800784d 	.word	0x0800784d
 800780c:	0800784d 	.word	0x0800784d
 8007810:	0800784d 	.word	0x0800784d
 8007814:	0800784d 	.word	0x0800784d
 8007818:	0800784d 	.word	0x0800784d
 800781c:	0800784d 	.word	0x0800784d
 8007820:	0800784d 	.word	0x0800784d
 8007824:	0800784d 	.word	0x0800784d
 8007828:	0800784d 	.word	0x0800784d
 800782c:	0800784d 	.word	0x0800784d
 8007830:	0800784d 	.word	0x0800784d
 8007834:	0800784d 	.word	0x0800784d
 8007838:	0800784d 	.word	0x0800784d
 800783c:	0800784d 	.word	0x0800784d
 8007840:	0800784d 	.word	0x0800784d
 8007844:	0800784d 	.word	0x0800784d
 8007848:	0800784d 	.word	0x0800784d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800784c:	bf00      	nop
  }

  return (USBD_OK);
 800784e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007850:	4618      	mov	r0, r3
 8007852:	370c      	adds	r7, #12
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4805      	ldr	r0, [pc, #20]	; (8007880 <CDC_Receive_FS+0x24>)
 800786a:	f7fe fbc1 	bl	8005ff0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800786e:	4804      	ldr	r0, [pc, #16]	; (8007880 <CDC_Receive_FS+0x24>)
 8007870:	f7fe fc22 	bl	80060b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007874:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	200002f8 	.word	0x200002f8

08007884 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007894:	4b0d      	ldr	r3, [pc, #52]	; (80078cc <CDC_Transmit_FS+0x48>)
 8007896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800789a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e00b      	b.n	80078c2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80078aa:	887b      	ldrh	r3, [r7, #2]
 80078ac:	461a      	mov	r2, r3
 80078ae:	6879      	ldr	r1, [r7, #4]
 80078b0:	4806      	ldr	r0, [pc, #24]	; (80078cc <CDC_Transmit_FS+0x48>)
 80078b2:	f7fe fb7b 	bl	8005fac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80078b6:	4805      	ldr	r0, [pc, #20]	; (80078cc <CDC_Transmit_FS+0x48>)
 80078b8:	f7fe fbb8 	bl	800602c <USBD_CDC_TransmitPacket>
 80078bc:	4603      	mov	r3, r0
 80078be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80078c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
 80078ca:	bf00      	nop
 80078cc:	200002f8 	.word	0x200002f8

080078d0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	4613      	mov	r3, r2
 80078dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80078de:	2300      	movs	r3, #0
 80078e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80078e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	371c      	adds	r7, #28
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
	...

080078f4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	4603      	mov	r3, r0
 80078fc:	6039      	str	r1, [r7, #0]
 80078fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	2212      	movs	r2, #18
 8007904:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007906:	4b03      	ldr	r3, [pc, #12]	; (8007914 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	200000c8 	.word	0x200000c8

08007918 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	6039      	str	r1, [r7, #0]
 8007922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	2204      	movs	r2, #4
 8007928:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800792a:	4b03      	ldr	r3, [pc, #12]	; (8007938 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800792c:	4618      	mov	r0, r3
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	200000dc 	.word	0x200000dc

0800793c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	6039      	str	r1, [r7, #0]
 8007946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d105      	bne.n	800795a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	4907      	ldr	r1, [pc, #28]	; (8007970 <USBD_FS_ProductStrDescriptor+0x34>)
 8007952:	4808      	ldr	r0, [pc, #32]	; (8007974 <USBD_FS_ProductStrDescriptor+0x38>)
 8007954:	f7ff fdf8 	bl	8007548 <USBD_GetString>
 8007958:	e004      	b.n	8007964 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	4904      	ldr	r1, [pc, #16]	; (8007970 <USBD_FS_ProductStrDescriptor+0x34>)
 800795e:	4805      	ldr	r0, [pc, #20]	; (8007974 <USBD_FS_ProductStrDescriptor+0x38>)
 8007960:	f7ff fdf2 	bl	8007548 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007964:	4b02      	ldr	r3, [pc, #8]	; (8007970 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	200015d4 	.word	0x200015d4
 8007974:	08009108 	.word	0x08009108

08007978 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	6039      	str	r1, [r7, #0]
 8007982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007984:	683a      	ldr	r2, [r7, #0]
 8007986:	4904      	ldr	r1, [pc, #16]	; (8007998 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007988:	4804      	ldr	r0, [pc, #16]	; (800799c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800798a:	f7ff fddd 	bl	8007548 <USBD_GetString>
  return USBD_StrDesc;
 800798e:	4b02      	ldr	r3, [pc, #8]	; (8007998 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007990:	4618      	mov	r0, r3
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}
 8007998:	200015d4 	.word	0x200015d4
 800799c:	08009120 	.word	0x08009120

080079a0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4603      	mov	r3, r0
 80079a8:	6039      	str	r1, [r7, #0]
 80079aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	221a      	movs	r2, #26
 80079b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079b2:	f000 f843 	bl	8007a3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079b6:	4b02      	ldr	r3, [pc, #8]	; (80079c0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	200000e0 	.word	0x200000e0

080079c4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	4603      	mov	r3, r0
 80079cc:	6039      	str	r1, [r7, #0]
 80079ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079d0:	79fb      	ldrb	r3, [r7, #7]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d105      	bne.n	80079e2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	4907      	ldr	r1, [pc, #28]	; (80079f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80079da:	4808      	ldr	r0, [pc, #32]	; (80079fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80079dc:	f7ff fdb4 	bl	8007548 <USBD_GetString>
 80079e0:	e004      	b.n	80079ec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	4904      	ldr	r1, [pc, #16]	; (80079f8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80079e6:	4805      	ldr	r0, [pc, #20]	; (80079fc <USBD_FS_ConfigStrDescriptor+0x38>)
 80079e8:	f7ff fdae 	bl	8007548 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079ec:	4b02      	ldr	r3, [pc, #8]	; (80079f8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	200015d4 	.word	0x200015d4
 80079fc:	08009134 	.word	0x08009134

08007a00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d105      	bne.n	8007a1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	4907      	ldr	r1, [pc, #28]	; (8007a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a16:	4808      	ldr	r0, [pc, #32]	; (8007a38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a18:	f7ff fd96 	bl	8007548 <USBD_GetString>
 8007a1c:	e004      	b.n	8007a28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	4904      	ldr	r1, [pc, #16]	; (8007a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a22:	4805      	ldr	r0, [pc, #20]	; (8007a38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a24:	f7ff fd90 	bl	8007548 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a28:	4b02      	ldr	r3, [pc, #8]	; (8007a34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	200015d4 	.word	0x200015d4
 8007a38:	08009140 	.word	0x08009140

08007a3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a42:	4b0f      	ldr	r3, [pc, #60]	; (8007a80 <Get_SerialNum+0x44>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a48:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <Get_SerialNum+0x48>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a4e:	4b0e      	ldr	r3, [pc, #56]	; (8007a88 <Get_SerialNum+0x4c>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d009      	beq.n	8007a76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a62:	2208      	movs	r2, #8
 8007a64:	4909      	ldr	r1, [pc, #36]	; (8007a8c <Get_SerialNum+0x50>)
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f000 f814 	bl	8007a94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a6c:	2204      	movs	r2, #4
 8007a6e:	4908      	ldr	r1, [pc, #32]	; (8007a90 <Get_SerialNum+0x54>)
 8007a70:	68b8      	ldr	r0, [r7, #8]
 8007a72:	f000 f80f 	bl	8007a94 <IntToUnicode>
  }
}
 8007a76:	bf00      	nop
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	1fff7a10 	.word	0x1fff7a10
 8007a84:	1fff7a14 	.word	0x1fff7a14
 8007a88:	1fff7a18 	.word	0x1fff7a18
 8007a8c:	200000e2 	.word	0x200000e2
 8007a90:	200000f2 	.word	0x200000f2

08007a94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75fb      	strb	r3, [r7, #23]
 8007aaa:	e027      	b.n	8007afc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	0f1b      	lsrs	r3, r3, #28
 8007ab0:	2b09      	cmp	r3, #9
 8007ab2:	d80b      	bhi.n	8007acc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	0f1b      	lsrs	r3, r3, #28
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	4619      	mov	r1, r3
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	440b      	add	r3, r1
 8007ac4:	3230      	adds	r2, #48	; 0x30
 8007ac6:	b2d2      	uxtb	r2, r2
 8007ac8:	701a      	strb	r2, [r3, #0]
 8007aca:	e00a      	b.n	8007ae2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	0f1b      	lsrs	r3, r3, #28
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	005b      	lsls	r3, r3, #1
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	440b      	add	r3, r1
 8007adc:	3237      	adds	r2, #55	; 0x37
 8007ade:	b2d2      	uxtb	r2, r2
 8007ae0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	3301      	adds	r3, #1
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	4413      	add	r3, r2
 8007af2:	2200      	movs	r2, #0
 8007af4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007af6:	7dfb      	ldrb	r3, [r7, #23]
 8007af8:	3301      	adds	r3, #1
 8007afa:	75fb      	strb	r3, [r7, #23]
 8007afc:	7dfa      	ldrb	r2, [r7, #23]
 8007afe:	79fb      	ldrb	r3, [r7, #7]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d3d3      	bcc.n	8007aac <IntToUnicode+0x18>
  }
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
	...

08007b14 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08a      	sub	sp, #40	; 0x28
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b1c:	f107 0314 	add.w	r3, r7, #20
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	605a      	str	r2, [r3, #4]
 8007b26:	609a      	str	r2, [r3, #8]
 8007b28:	60da      	str	r2, [r3, #12]
 8007b2a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b34:	d13a      	bne.n	8007bac <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b36:	2300      	movs	r3, #0
 8007b38:	613b      	str	r3, [r7, #16]
 8007b3a:	4b1e      	ldr	r3, [pc, #120]	; (8007bb4 <HAL_PCD_MspInit+0xa0>)
 8007b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3e:	4a1d      	ldr	r2, [pc, #116]	; (8007bb4 <HAL_PCD_MspInit+0xa0>)
 8007b40:	f043 0301 	orr.w	r3, r3, #1
 8007b44:	6313      	str	r3, [r2, #48]	; 0x30
 8007b46:	4b1b      	ldr	r3, [pc, #108]	; (8007bb4 <HAL_PCD_MspInit+0xa0>)
 8007b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	613b      	str	r3, [r7, #16]
 8007b50:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b60:	2303      	movs	r3, #3
 8007b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b64:	230a      	movs	r3, #10
 8007b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b68:	f107 0314 	add.w	r3, r7, #20
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	4812      	ldr	r0, [pc, #72]	; (8007bb8 <HAL_PCD_MspInit+0xa4>)
 8007b70:	f7f9 fe36 	bl	80017e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b74:	4b0f      	ldr	r3, [pc, #60]	; (8007bb4 <HAL_PCD_MspInit+0xa0>)
 8007b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b78:	4a0e      	ldr	r2, [pc, #56]	; (8007bb4 <HAL_PCD_MspInit+0xa0>)
 8007b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7e:	6353      	str	r3, [r2, #52]	; 0x34
 8007b80:	2300      	movs	r3, #0
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <HAL_PCD_MspInit+0xa0>)
 8007b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b88:	4a0a      	ldr	r2, [pc, #40]	; (8007bb4 <HAL_PCD_MspInit+0xa0>)
 8007b8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b8e:	6453      	str	r3, [r2, #68]	; 0x44
 8007b90:	4b08      	ldr	r3, [pc, #32]	; (8007bb4 <HAL_PCD_MspInit+0xa0>)
 8007b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	2043      	movs	r0, #67	; 0x43
 8007ba2:	f7f9 fafc 	bl	800119e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ba6:	2043      	movs	r0, #67	; 0x43
 8007ba8:	f7f9 fb15 	bl	80011d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bac:	bf00      	nop
 8007bae:	3728      	adds	r7, #40	; 0x28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	40023800 	.word	0x40023800
 8007bb8:	40020000 	.word	0x40020000

08007bbc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b082      	sub	sp, #8
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4610      	mov	r0, r2
 8007bd4:	f7fe fb59 	bl	800628a <USBD_LL_SetupStage>
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007bf2:	78fa      	ldrb	r2, [r7, #3]
 8007bf4:	6879      	ldr	r1, [r7, #4]
 8007bf6:	4613      	mov	r3, r2
 8007bf8:	00db      	lsls	r3, r3, #3
 8007bfa:	4413      	add	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	440b      	add	r3, r1
 8007c00:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	78fb      	ldrb	r3, [r7, #3]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f7fe fb93 	bl	8006334 <USBD_LL_DataOutStage>
}
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	460b      	mov	r3, r1
 8007c20:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007c28:	78fa      	ldrb	r2, [r7, #3]
 8007c2a:	6879      	ldr	r1, [r7, #4]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	00db      	lsls	r3, r3, #3
 8007c30:	4413      	add	r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	440b      	add	r3, r1
 8007c36:	334c      	adds	r3, #76	; 0x4c
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	f7fe fc2c 	bl	800649a <USBD_LL_DataInStage>
}
 8007c42:	bf00      	nop
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fd60 	bl	800671e <USBD_LL_SOF>
}
 8007c5e:	bf00      	nop
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b084      	sub	sp, #16
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d001      	beq.n	8007c7e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c7a:	f7f8 fecc 	bl	8000a16 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c84:	7bfa      	ldrb	r2, [r7, #15]
 8007c86:	4611      	mov	r1, r2
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fe fd0a 	bl	80066a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fe fcb2 	bl	80065fe <USBD_LL_Reset>
}
 8007c9a:	bf00      	nop
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe fd05 	bl	80066c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	6812      	ldr	r2, [r2, #0]
 8007cc6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cca:	f043 0301 	orr.w	r3, r3, #1
 8007cce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a1b      	ldr	r3, [r3, #32]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d005      	beq.n	8007ce4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cd8:	4b04      	ldr	r3, [pc, #16]	; (8007cec <HAL_PCD_SuspendCallback+0x48>)
 8007cda:	691b      	ldr	r3, [r3, #16]
 8007cdc:	4a03      	ldr	r2, [pc, #12]	; (8007cec <HAL_PCD_SuspendCallback+0x48>)
 8007cde:	f043 0306 	orr.w	r3, r3, #6
 8007ce2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ce4:	bf00      	nop
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	e000ed00 	.word	0xe000ed00

08007cf0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f7fe fcf5 	bl	80066ee <USBD_LL_Resume>
}
 8007d04:	bf00      	nop
 8007d06:	3708      	adds	r7, #8
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d1e:	78fa      	ldrb	r2, [r7, #3]
 8007d20:	4611      	mov	r1, r2
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7fe fd4d 	bl	80067c2 <USBD_LL_IsoOUTIncomplete>
}
 8007d28:	bf00      	nop
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d42:	78fa      	ldrb	r2, [r7, #3]
 8007d44:	4611      	mov	r1, r2
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe fd09 	bl	800675e <USBD_LL_IsoINIncomplete>
}
 8007d4c:	bf00      	nop
 8007d4e:	3708      	adds	r7, #8
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b082      	sub	sp, #8
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7fe fd5f 	bl	8006826 <USBD_LL_DevConnected>
}
 8007d68:	bf00      	nop
 8007d6a:	3708      	adds	r7, #8
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe fd5c 	bl	800683c <USBD_LL_DevDisconnected>
}
 8007d84:	bf00      	nop
 8007d86:	3708      	adds	r7, #8
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d13c      	bne.n	8007e16 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d9c:	4a20      	ldr	r2, [pc, #128]	; (8007e20 <USBD_LL_Init+0x94>)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a1e      	ldr	r2, [pc, #120]	; (8007e20 <USBD_LL_Init+0x94>)
 8007da8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007dac:	4b1c      	ldr	r3, [pc, #112]	; (8007e20 <USBD_LL_Init+0x94>)
 8007dae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007db2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007db4:	4b1a      	ldr	r3, [pc, #104]	; (8007e20 <USBD_LL_Init+0x94>)
 8007db6:	2204      	movs	r2, #4
 8007db8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007dba:	4b19      	ldr	r3, [pc, #100]	; (8007e20 <USBD_LL_Init+0x94>)
 8007dbc:	2202      	movs	r2, #2
 8007dbe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007dc0:	4b17      	ldr	r3, [pc, #92]	; (8007e20 <USBD_LL_Init+0x94>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007dc6:	4b16      	ldr	r3, [pc, #88]	; (8007e20 <USBD_LL_Init+0x94>)
 8007dc8:	2202      	movs	r2, #2
 8007dca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007dcc:	4b14      	ldr	r3, [pc, #80]	; (8007e20 <USBD_LL_Init+0x94>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007dd2:	4b13      	ldr	r3, [pc, #76]	; (8007e20 <USBD_LL_Init+0x94>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007dd8:	4b11      	ldr	r3, [pc, #68]	; (8007e20 <USBD_LL_Init+0x94>)
 8007dda:	2200      	movs	r2, #0
 8007ddc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007dde:	4b10      	ldr	r3, [pc, #64]	; (8007e20 <USBD_LL_Init+0x94>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007de4:	4b0e      	ldr	r3, [pc, #56]	; (8007e20 <USBD_LL_Init+0x94>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007dea:	480d      	ldr	r0, [pc, #52]	; (8007e20 <USBD_LL_Init+0x94>)
 8007dec:	f7f9 fed3 	bl	8001b96 <HAL_PCD_Init>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007df6:	f7f8 fe0e 	bl	8000a16 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007dfa:	2180      	movs	r1, #128	; 0x80
 8007dfc:	4808      	ldr	r0, [pc, #32]	; (8007e20 <USBD_LL_Init+0x94>)
 8007dfe:	f7fb f92a 	bl	8003056 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e02:	2240      	movs	r2, #64	; 0x40
 8007e04:	2100      	movs	r1, #0
 8007e06:	4806      	ldr	r0, [pc, #24]	; (8007e20 <USBD_LL_Init+0x94>)
 8007e08:	f7fb f8de 	bl	8002fc8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e0c:	2280      	movs	r2, #128	; 0x80
 8007e0e:	2101      	movs	r1, #1
 8007e10:	4803      	ldr	r0, [pc, #12]	; (8007e20 <USBD_LL_Init+0x94>)
 8007e12:	f7fb f8d9 	bl	8002fc8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e16:	2300      	movs	r3, #0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	200017d4 	.word	0x200017d4

08007e24 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7f9 ffc8 	bl	8001dd0 <HAL_PCD_Start>
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 f942 	bl	80080d0 <USBD_Get_USB_Status>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e52:	4618      	mov	r0, r3
 8007e54:	3710      	adds	r7, #16
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
 8007e62:	4608      	mov	r0, r1
 8007e64:	4611      	mov	r1, r2
 8007e66:	461a      	mov	r2, r3
 8007e68:	4603      	mov	r3, r0
 8007e6a:	70fb      	strb	r3, [r7, #3]
 8007e6c:	460b      	mov	r3, r1
 8007e6e:	70bb      	strb	r3, [r7, #2]
 8007e70:	4613      	mov	r3, r2
 8007e72:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e74:	2300      	movs	r3, #0
 8007e76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e82:	78bb      	ldrb	r3, [r7, #2]
 8007e84:	883a      	ldrh	r2, [r7, #0]
 8007e86:	78f9      	ldrb	r1, [r7, #3]
 8007e88:	f7fa fc99 	bl	80027be <HAL_PCD_EP_Open>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f91c 	bl	80080d0 <USBD_Get_USB_Status>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b084      	sub	sp, #16
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ec0:	78fa      	ldrb	r2, [r7, #3]
 8007ec2:	4611      	mov	r1, r2
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f7fa fce2 	bl	800288e <HAL_PCD_EP_Close>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f000 f8fd 	bl	80080d0 <USBD_Get_USB_Status>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eda:	7bbb      	ldrb	r3, [r7, #14]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007efe:	78fa      	ldrb	r2, [r7, #3]
 8007f00:	4611      	mov	r1, r2
 8007f02:	4618      	mov	r0, r3
 8007f04:	f7fa fdba 	bl	8002a7c <HAL_PCD_EP_SetStall>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f8de 	bl	80080d0 <USBD_Get_USB_Status>
 8007f14:	4603      	mov	r3, r0
 8007f16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f18:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	3710      	adds	r7, #16
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b084      	sub	sp, #16
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
 8007f2a:	460b      	mov	r3, r1
 8007f2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f3c:	78fa      	ldrb	r2, [r7, #3]
 8007f3e:	4611      	mov	r1, r2
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fa fdff 	bl	8002b44 <HAL_PCD_EP_ClrStall>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 f8bf 	bl	80080d0 <USBD_Get_USB_Status>
 8007f52:	4603      	mov	r3, r0
 8007f54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f56:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3710      	adds	r7, #16
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}

08007f60 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b085      	sub	sp, #20
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	460b      	mov	r3, r1
 8007f6a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f72:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	da0b      	bge.n	8007f94 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f7c:	78fb      	ldrb	r3, [r7, #3]
 8007f7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	4613      	mov	r3, r2
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	4413      	add	r3, r2
 8007f8a:	009b      	lsls	r3, r3, #2
 8007f8c:	440b      	add	r3, r1
 8007f8e:	333e      	adds	r3, #62	; 0x3e
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	e00b      	b.n	8007fac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f9a:	68f9      	ldr	r1, [r7, #12]
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	440b      	add	r3, r1
 8007fa6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007faa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	3714      	adds	r7, #20
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b084      	sub	sp, #16
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fd2:	78fa      	ldrb	r2, [r7, #3]
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fa fbcc 	bl	8002774 <HAL_PCD_SetAddress>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 f874 	bl	80080d0 <USBD_Get_USB_Status>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b086      	sub	sp, #24
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	460b      	mov	r3, r1
 8008004:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008014:	7af9      	ldrb	r1, [r7, #11]
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	f7fa fce5 	bl	80029e8 <HAL_PCD_EP_Transmit>
 800801e:	4603      	mov	r3, r0
 8008020:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008022:	7dfb      	ldrb	r3, [r7, #23]
 8008024:	4618      	mov	r0, r3
 8008026:	f000 f853 	bl	80080d0 <USBD_Get_USB_Status>
 800802a:	4603      	mov	r3, r0
 800802c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800802e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3718      	adds	r7, #24
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	607a      	str	r2, [r7, #4]
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	460b      	mov	r3, r1
 8008046:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008048:	2300      	movs	r3, #0
 800804a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008056:	7af9      	ldrb	r1, [r7, #11]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	f7fa fc61 	bl	8002922 <HAL_PCD_EP_Receive>
 8008060:	4603      	mov	r3, r0
 8008062:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008064:	7dfb      	ldrb	r3, [r7, #23]
 8008066:	4618      	mov	r0, r3
 8008068:	f000 f832 	bl	80080d0 <USBD_Get_USB_Status>
 800806c:	4603      	mov	r3, r0
 800806e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008070:	7dbb      	ldrb	r3, [r7, #22]
}
 8008072:	4618      	mov	r0, r3
 8008074:	3718      	adds	r7, #24
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	460b      	mov	r3, r1
 8008084:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800808c:	78fa      	ldrb	r2, [r7, #3]
 800808e:	4611      	mov	r1, r2
 8008090:	4618      	mov	r0, r3
 8008092:	f7fa fc91 	bl	80029b8 <HAL_PCD_EP_GetRxCount>
 8008096:	4603      	mov	r3, r0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80080a8:	4b03      	ldr	r3, [pc, #12]	; (80080b8 <USBD_static_malloc+0x18>)
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	20001ce0 	.word	0x20001ce0

080080bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]

}
 80080c4:	bf00      	nop
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	4603      	mov	r3, r0
 80080d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d817      	bhi.n	8008114 <USBD_Get_USB_Status+0x44>
 80080e4:	a201      	add	r2, pc, #4	; (adr r2, 80080ec <USBD_Get_USB_Status+0x1c>)
 80080e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ea:	bf00      	nop
 80080ec:	080080fd 	.word	0x080080fd
 80080f0:	08008103 	.word	0x08008103
 80080f4:	08008109 	.word	0x08008109
 80080f8:	0800810f 	.word	0x0800810f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080fc:	2300      	movs	r3, #0
 80080fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008100:	e00b      	b.n	800811a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008102:	2303      	movs	r3, #3
 8008104:	73fb      	strb	r3, [r7, #15]
    break;
 8008106:	e008      	b.n	800811a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008108:	2301      	movs	r3, #1
 800810a:	73fb      	strb	r3, [r7, #15]
    break;
 800810c:	e005      	b.n	800811a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800810e:	2303      	movs	r3, #3
 8008110:	73fb      	strb	r3, [r7, #15]
    break;
 8008112:	e002      	b.n	800811a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008114:	2303      	movs	r3, #3
 8008116:	73fb      	strb	r3, [r7, #15]
    break;
 8008118:	bf00      	nop
  }
  return usb_status;
 800811a:	7bfb      	ldrb	r3, [r7, #15]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3714      	adds	r7, #20
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <__errno>:
 8008128:	4b01      	ldr	r3, [pc, #4]	; (8008130 <__errno+0x8>)
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	200000fc 	.word	0x200000fc

08008134 <__libc_init_array>:
 8008134:	b570      	push	{r4, r5, r6, lr}
 8008136:	4d0d      	ldr	r5, [pc, #52]	; (800816c <__libc_init_array+0x38>)
 8008138:	4c0d      	ldr	r4, [pc, #52]	; (8008170 <__libc_init_array+0x3c>)
 800813a:	1b64      	subs	r4, r4, r5
 800813c:	10a4      	asrs	r4, r4, #2
 800813e:	2600      	movs	r6, #0
 8008140:	42a6      	cmp	r6, r4
 8008142:	d109      	bne.n	8008158 <__libc_init_array+0x24>
 8008144:	4d0b      	ldr	r5, [pc, #44]	; (8008174 <__libc_init_array+0x40>)
 8008146:	4c0c      	ldr	r4, [pc, #48]	; (8008178 <__libc_init_array+0x44>)
 8008148:	f000 ffae 	bl	80090a8 <_init>
 800814c:	1b64      	subs	r4, r4, r5
 800814e:	10a4      	asrs	r4, r4, #2
 8008150:	2600      	movs	r6, #0
 8008152:	42a6      	cmp	r6, r4
 8008154:	d105      	bne.n	8008162 <__libc_init_array+0x2e>
 8008156:	bd70      	pop	{r4, r5, r6, pc}
 8008158:	f855 3b04 	ldr.w	r3, [r5], #4
 800815c:	4798      	blx	r3
 800815e:	3601      	adds	r6, #1
 8008160:	e7ee      	b.n	8008140 <__libc_init_array+0xc>
 8008162:	f855 3b04 	ldr.w	r3, [r5], #4
 8008166:	4798      	blx	r3
 8008168:	3601      	adds	r6, #1
 800816a:	e7f2      	b.n	8008152 <__libc_init_array+0x1e>
 800816c:	08009208 	.word	0x08009208
 8008170:	08009208 	.word	0x08009208
 8008174:	08009208 	.word	0x08009208
 8008178:	0800920c 	.word	0x0800920c

0800817c <memset>:
 800817c:	4402      	add	r2, r0
 800817e:	4603      	mov	r3, r0
 8008180:	4293      	cmp	r3, r2
 8008182:	d100      	bne.n	8008186 <memset+0xa>
 8008184:	4770      	bx	lr
 8008186:	f803 1b01 	strb.w	r1, [r3], #1
 800818a:	e7f9      	b.n	8008180 <memset+0x4>

0800818c <iprintf>:
 800818c:	b40f      	push	{r0, r1, r2, r3}
 800818e:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <iprintf+0x2c>)
 8008190:	b513      	push	{r0, r1, r4, lr}
 8008192:	681c      	ldr	r4, [r3, #0]
 8008194:	b124      	cbz	r4, 80081a0 <iprintf+0x14>
 8008196:	69a3      	ldr	r3, [r4, #24]
 8008198:	b913      	cbnz	r3, 80081a0 <iprintf+0x14>
 800819a:	4620      	mov	r0, r4
 800819c:	f000 f866 	bl	800826c <__sinit>
 80081a0:	ab05      	add	r3, sp, #20
 80081a2:	9a04      	ldr	r2, [sp, #16]
 80081a4:	68a1      	ldr	r1, [r4, #8]
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 f9bd 	bl	8008528 <_vfiprintf_r>
 80081ae:	b002      	add	sp, #8
 80081b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b4:	b004      	add	sp, #16
 80081b6:	4770      	bx	lr
 80081b8:	200000fc 	.word	0x200000fc

080081bc <std>:
 80081bc:	2300      	movs	r3, #0
 80081be:	b510      	push	{r4, lr}
 80081c0:	4604      	mov	r4, r0
 80081c2:	e9c0 3300 	strd	r3, r3, [r0]
 80081c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081ca:	6083      	str	r3, [r0, #8]
 80081cc:	8181      	strh	r1, [r0, #12]
 80081ce:	6643      	str	r3, [r0, #100]	; 0x64
 80081d0:	81c2      	strh	r2, [r0, #14]
 80081d2:	6183      	str	r3, [r0, #24]
 80081d4:	4619      	mov	r1, r3
 80081d6:	2208      	movs	r2, #8
 80081d8:	305c      	adds	r0, #92	; 0x5c
 80081da:	f7ff ffcf 	bl	800817c <memset>
 80081de:	4b05      	ldr	r3, [pc, #20]	; (80081f4 <std+0x38>)
 80081e0:	6263      	str	r3, [r4, #36]	; 0x24
 80081e2:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <std+0x3c>)
 80081e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80081e6:	4b05      	ldr	r3, [pc, #20]	; (80081fc <std+0x40>)
 80081e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80081ea:	4b05      	ldr	r3, [pc, #20]	; (8008200 <std+0x44>)
 80081ec:	6224      	str	r4, [r4, #32]
 80081ee:	6323      	str	r3, [r4, #48]	; 0x30
 80081f0:	bd10      	pop	{r4, pc}
 80081f2:	bf00      	nop
 80081f4:	08008ad1 	.word	0x08008ad1
 80081f8:	08008af3 	.word	0x08008af3
 80081fc:	08008b2b 	.word	0x08008b2b
 8008200:	08008b4f 	.word	0x08008b4f

08008204 <_cleanup_r>:
 8008204:	4901      	ldr	r1, [pc, #4]	; (800820c <_cleanup_r+0x8>)
 8008206:	f000 b8af 	b.w	8008368 <_fwalk_reent>
 800820a:	bf00      	nop
 800820c:	08008e29 	.word	0x08008e29

08008210 <__sfmoreglue>:
 8008210:	b570      	push	{r4, r5, r6, lr}
 8008212:	2268      	movs	r2, #104	; 0x68
 8008214:	1e4d      	subs	r5, r1, #1
 8008216:	4355      	muls	r5, r2
 8008218:	460e      	mov	r6, r1
 800821a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800821e:	f000 f8e5 	bl	80083ec <_malloc_r>
 8008222:	4604      	mov	r4, r0
 8008224:	b140      	cbz	r0, 8008238 <__sfmoreglue+0x28>
 8008226:	2100      	movs	r1, #0
 8008228:	e9c0 1600 	strd	r1, r6, [r0]
 800822c:	300c      	adds	r0, #12
 800822e:	60a0      	str	r0, [r4, #8]
 8008230:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008234:	f7ff ffa2 	bl	800817c <memset>
 8008238:	4620      	mov	r0, r4
 800823a:	bd70      	pop	{r4, r5, r6, pc}

0800823c <__sfp_lock_acquire>:
 800823c:	4801      	ldr	r0, [pc, #4]	; (8008244 <__sfp_lock_acquire+0x8>)
 800823e:	f000 b8b3 	b.w	80083a8 <__retarget_lock_acquire_recursive>
 8008242:	bf00      	nop
 8008244:	20001f01 	.word	0x20001f01

08008248 <__sfp_lock_release>:
 8008248:	4801      	ldr	r0, [pc, #4]	; (8008250 <__sfp_lock_release+0x8>)
 800824a:	f000 b8ae 	b.w	80083aa <__retarget_lock_release_recursive>
 800824e:	bf00      	nop
 8008250:	20001f01 	.word	0x20001f01

08008254 <__sinit_lock_acquire>:
 8008254:	4801      	ldr	r0, [pc, #4]	; (800825c <__sinit_lock_acquire+0x8>)
 8008256:	f000 b8a7 	b.w	80083a8 <__retarget_lock_acquire_recursive>
 800825a:	bf00      	nop
 800825c:	20001f02 	.word	0x20001f02

08008260 <__sinit_lock_release>:
 8008260:	4801      	ldr	r0, [pc, #4]	; (8008268 <__sinit_lock_release+0x8>)
 8008262:	f000 b8a2 	b.w	80083aa <__retarget_lock_release_recursive>
 8008266:	bf00      	nop
 8008268:	20001f02 	.word	0x20001f02

0800826c <__sinit>:
 800826c:	b510      	push	{r4, lr}
 800826e:	4604      	mov	r4, r0
 8008270:	f7ff fff0 	bl	8008254 <__sinit_lock_acquire>
 8008274:	69a3      	ldr	r3, [r4, #24]
 8008276:	b11b      	cbz	r3, 8008280 <__sinit+0x14>
 8008278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800827c:	f7ff bff0 	b.w	8008260 <__sinit_lock_release>
 8008280:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008284:	6523      	str	r3, [r4, #80]	; 0x50
 8008286:	4b13      	ldr	r3, [pc, #76]	; (80082d4 <__sinit+0x68>)
 8008288:	4a13      	ldr	r2, [pc, #76]	; (80082d8 <__sinit+0x6c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	62a2      	str	r2, [r4, #40]	; 0x28
 800828e:	42a3      	cmp	r3, r4
 8008290:	bf04      	itt	eq
 8008292:	2301      	moveq	r3, #1
 8008294:	61a3      	streq	r3, [r4, #24]
 8008296:	4620      	mov	r0, r4
 8008298:	f000 f820 	bl	80082dc <__sfp>
 800829c:	6060      	str	r0, [r4, #4]
 800829e:	4620      	mov	r0, r4
 80082a0:	f000 f81c 	bl	80082dc <__sfp>
 80082a4:	60a0      	str	r0, [r4, #8]
 80082a6:	4620      	mov	r0, r4
 80082a8:	f000 f818 	bl	80082dc <__sfp>
 80082ac:	2200      	movs	r2, #0
 80082ae:	60e0      	str	r0, [r4, #12]
 80082b0:	2104      	movs	r1, #4
 80082b2:	6860      	ldr	r0, [r4, #4]
 80082b4:	f7ff ff82 	bl	80081bc <std>
 80082b8:	68a0      	ldr	r0, [r4, #8]
 80082ba:	2201      	movs	r2, #1
 80082bc:	2109      	movs	r1, #9
 80082be:	f7ff ff7d 	bl	80081bc <std>
 80082c2:	68e0      	ldr	r0, [r4, #12]
 80082c4:	2202      	movs	r2, #2
 80082c6:	2112      	movs	r1, #18
 80082c8:	f7ff ff78 	bl	80081bc <std>
 80082cc:	2301      	movs	r3, #1
 80082ce:	61a3      	str	r3, [r4, #24]
 80082d0:	e7d2      	b.n	8008278 <__sinit+0xc>
 80082d2:	bf00      	nop
 80082d4:	08009168 	.word	0x08009168
 80082d8:	08008205 	.word	0x08008205

080082dc <__sfp>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	4607      	mov	r7, r0
 80082e0:	f7ff ffac 	bl	800823c <__sfp_lock_acquire>
 80082e4:	4b1e      	ldr	r3, [pc, #120]	; (8008360 <__sfp+0x84>)
 80082e6:	681e      	ldr	r6, [r3, #0]
 80082e8:	69b3      	ldr	r3, [r6, #24]
 80082ea:	b913      	cbnz	r3, 80082f2 <__sfp+0x16>
 80082ec:	4630      	mov	r0, r6
 80082ee:	f7ff ffbd 	bl	800826c <__sinit>
 80082f2:	3648      	adds	r6, #72	; 0x48
 80082f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80082f8:	3b01      	subs	r3, #1
 80082fa:	d503      	bpl.n	8008304 <__sfp+0x28>
 80082fc:	6833      	ldr	r3, [r6, #0]
 80082fe:	b30b      	cbz	r3, 8008344 <__sfp+0x68>
 8008300:	6836      	ldr	r6, [r6, #0]
 8008302:	e7f7      	b.n	80082f4 <__sfp+0x18>
 8008304:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008308:	b9d5      	cbnz	r5, 8008340 <__sfp+0x64>
 800830a:	4b16      	ldr	r3, [pc, #88]	; (8008364 <__sfp+0x88>)
 800830c:	60e3      	str	r3, [r4, #12]
 800830e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008312:	6665      	str	r5, [r4, #100]	; 0x64
 8008314:	f000 f847 	bl	80083a6 <__retarget_lock_init_recursive>
 8008318:	f7ff ff96 	bl	8008248 <__sfp_lock_release>
 800831c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008320:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008324:	6025      	str	r5, [r4, #0]
 8008326:	61a5      	str	r5, [r4, #24]
 8008328:	2208      	movs	r2, #8
 800832a:	4629      	mov	r1, r5
 800832c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008330:	f7ff ff24 	bl	800817c <memset>
 8008334:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008338:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800833c:	4620      	mov	r0, r4
 800833e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008340:	3468      	adds	r4, #104	; 0x68
 8008342:	e7d9      	b.n	80082f8 <__sfp+0x1c>
 8008344:	2104      	movs	r1, #4
 8008346:	4638      	mov	r0, r7
 8008348:	f7ff ff62 	bl	8008210 <__sfmoreglue>
 800834c:	4604      	mov	r4, r0
 800834e:	6030      	str	r0, [r6, #0]
 8008350:	2800      	cmp	r0, #0
 8008352:	d1d5      	bne.n	8008300 <__sfp+0x24>
 8008354:	f7ff ff78 	bl	8008248 <__sfp_lock_release>
 8008358:	230c      	movs	r3, #12
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	e7ee      	b.n	800833c <__sfp+0x60>
 800835e:	bf00      	nop
 8008360:	08009168 	.word	0x08009168
 8008364:	ffff0001 	.word	0xffff0001

08008368 <_fwalk_reent>:
 8008368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800836c:	4606      	mov	r6, r0
 800836e:	4688      	mov	r8, r1
 8008370:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008374:	2700      	movs	r7, #0
 8008376:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800837a:	f1b9 0901 	subs.w	r9, r9, #1
 800837e:	d505      	bpl.n	800838c <_fwalk_reent+0x24>
 8008380:	6824      	ldr	r4, [r4, #0]
 8008382:	2c00      	cmp	r4, #0
 8008384:	d1f7      	bne.n	8008376 <_fwalk_reent+0xe>
 8008386:	4638      	mov	r0, r7
 8008388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800838c:	89ab      	ldrh	r3, [r5, #12]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d907      	bls.n	80083a2 <_fwalk_reent+0x3a>
 8008392:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008396:	3301      	adds	r3, #1
 8008398:	d003      	beq.n	80083a2 <_fwalk_reent+0x3a>
 800839a:	4629      	mov	r1, r5
 800839c:	4630      	mov	r0, r6
 800839e:	47c0      	blx	r8
 80083a0:	4307      	orrs	r7, r0
 80083a2:	3568      	adds	r5, #104	; 0x68
 80083a4:	e7e9      	b.n	800837a <_fwalk_reent+0x12>

080083a6 <__retarget_lock_init_recursive>:
 80083a6:	4770      	bx	lr

080083a8 <__retarget_lock_acquire_recursive>:
 80083a8:	4770      	bx	lr

080083aa <__retarget_lock_release_recursive>:
 80083aa:	4770      	bx	lr

080083ac <sbrk_aligned>:
 80083ac:	b570      	push	{r4, r5, r6, lr}
 80083ae:	4e0e      	ldr	r6, [pc, #56]	; (80083e8 <sbrk_aligned+0x3c>)
 80083b0:	460c      	mov	r4, r1
 80083b2:	6831      	ldr	r1, [r6, #0]
 80083b4:	4605      	mov	r5, r0
 80083b6:	b911      	cbnz	r1, 80083be <sbrk_aligned+0x12>
 80083b8:	f000 fb7a 	bl	8008ab0 <_sbrk_r>
 80083bc:	6030      	str	r0, [r6, #0]
 80083be:	4621      	mov	r1, r4
 80083c0:	4628      	mov	r0, r5
 80083c2:	f000 fb75 	bl	8008ab0 <_sbrk_r>
 80083c6:	1c43      	adds	r3, r0, #1
 80083c8:	d00a      	beq.n	80083e0 <sbrk_aligned+0x34>
 80083ca:	1cc4      	adds	r4, r0, #3
 80083cc:	f024 0403 	bic.w	r4, r4, #3
 80083d0:	42a0      	cmp	r0, r4
 80083d2:	d007      	beq.n	80083e4 <sbrk_aligned+0x38>
 80083d4:	1a21      	subs	r1, r4, r0
 80083d6:	4628      	mov	r0, r5
 80083d8:	f000 fb6a 	bl	8008ab0 <_sbrk_r>
 80083dc:	3001      	adds	r0, #1
 80083de:	d101      	bne.n	80083e4 <sbrk_aligned+0x38>
 80083e0:	f04f 34ff 	mov.w	r4, #4294967295
 80083e4:	4620      	mov	r0, r4
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	20001f08 	.word	0x20001f08

080083ec <_malloc_r>:
 80083ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f0:	1ccd      	adds	r5, r1, #3
 80083f2:	f025 0503 	bic.w	r5, r5, #3
 80083f6:	3508      	adds	r5, #8
 80083f8:	2d0c      	cmp	r5, #12
 80083fa:	bf38      	it	cc
 80083fc:	250c      	movcc	r5, #12
 80083fe:	2d00      	cmp	r5, #0
 8008400:	4607      	mov	r7, r0
 8008402:	db01      	blt.n	8008408 <_malloc_r+0x1c>
 8008404:	42a9      	cmp	r1, r5
 8008406:	d905      	bls.n	8008414 <_malloc_r+0x28>
 8008408:	230c      	movs	r3, #12
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	2600      	movs	r6, #0
 800840e:	4630      	mov	r0, r6
 8008410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008414:	4e2e      	ldr	r6, [pc, #184]	; (80084d0 <_malloc_r+0xe4>)
 8008416:	f000 fdbb 	bl	8008f90 <__malloc_lock>
 800841a:	6833      	ldr	r3, [r6, #0]
 800841c:	461c      	mov	r4, r3
 800841e:	bb34      	cbnz	r4, 800846e <_malloc_r+0x82>
 8008420:	4629      	mov	r1, r5
 8008422:	4638      	mov	r0, r7
 8008424:	f7ff ffc2 	bl	80083ac <sbrk_aligned>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	4604      	mov	r4, r0
 800842c:	d14d      	bne.n	80084ca <_malloc_r+0xde>
 800842e:	6834      	ldr	r4, [r6, #0]
 8008430:	4626      	mov	r6, r4
 8008432:	2e00      	cmp	r6, #0
 8008434:	d140      	bne.n	80084b8 <_malloc_r+0xcc>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	4631      	mov	r1, r6
 800843a:	4638      	mov	r0, r7
 800843c:	eb04 0803 	add.w	r8, r4, r3
 8008440:	f000 fb36 	bl	8008ab0 <_sbrk_r>
 8008444:	4580      	cmp	r8, r0
 8008446:	d13a      	bne.n	80084be <_malloc_r+0xd2>
 8008448:	6821      	ldr	r1, [r4, #0]
 800844a:	3503      	adds	r5, #3
 800844c:	1a6d      	subs	r5, r5, r1
 800844e:	f025 0503 	bic.w	r5, r5, #3
 8008452:	3508      	adds	r5, #8
 8008454:	2d0c      	cmp	r5, #12
 8008456:	bf38      	it	cc
 8008458:	250c      	movcc	r5, #12
 800845a:	4629      	mov	r1, r5
 800845c:	4638      	mov	r0, r7
 800845e:	f7ff ffa5 	bl	80083ac <sbrk_aligned>
 8008462:	3001      	adds	r0, #1
 8008464:	d02b      	beq.n	80084be <_malloc_r+0xd2>
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	442b      	add	r3, r5
 800846a:	6023      	str	r3, [r4, #0]
 800846c:	e00e      	b.n	800848c <_malloc_r+0xa0>
 800846e:	6822      	ldr	r2, [r4, #0]
 8008470:	1b52      	subs	r2, r2, r5
 8008472:	d41e      	bmi.n	80084b2 <_malloc_r+0xc6>
 8008474:	2a0b      	cmp	r2, #11
 8008476:	d916      	bls.n	80084a6 <_malloc_r+0xba>
 8008478:	1961      	adds	r1, r4, r5
 800847a:	42a3      	cmp	r3, r4
 800847c:	6025      	str	r5, [r4, #0]
 800847e:	bf18      	it	ne
 8008480:	6059      	strne	r1, [r3, #4]
 8008482:	6863      	ldr	r3, [r4, #4]
 8008484:	bf08      	it	eq
 8008486:	6031      	streq	r1, [r6, #0]
 8008488:	5162      	str	r2, [r4, r5]
 800848a:	604b      	str	r3, [r1, #4]
 800848c:	4638      	mov	r0, r7
 800848e:	f104 060b 	add.w	r6, r4, #11
 8008492:	f000 fd83 	bl	8008f9c <__malloc_unlock>
 8008496:	f026 0607 	bic.w	r6, r6, #7
 800849a:	1d23      	adds	r3, r4, #4
 800849c:	1af2      	subs	r2, r6, r3
 800849e:	d0b6      	beq.n	800840e <_malloc_r+0x22>
 80084a0:	1b9b      	subs	r3, r3, r6
 80084a2:	50a3      	str	r3, [r4, r2]
 80084a4:	e7b3      	b.n	800840e <_malloc_r+0x22>
 80084a6:	6862      	ldr	r2, [r4, #4]
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	bf0c      	ite	eq
 80084ac:	6032      	streq	r2, [r6, #0]
 80084ae:	605a      	strne	r2, [r3, #4]
 80084b0:	e7ec      	b.n	800848c <_malloc_r+0xa0>
 80084b2:	4623      	mov	r3, r4
 80084b4:	6864      	ldr	r4, [r4, #4]
 80084b6:	e7b2      	b.n	800841e <_malloc_r+0x32>
 80084b8:	4634      	mov	r4, r6
 80084ba:	6876      	ldr	r6, [r6, #4]
 80084bc:	e7b9      	b.n	8008432 <_malloc_r+0x46>
 80084be:	230c      	movs	r3, #12
 80084c0:	603b      	str	r3, [r7, #0]
 80084c2:	4638      	mov	r0, r7
 80084c4:	f000 fd6a 	bl	8008f9c <__malloc_unlock>
 80084c8:	e7a1      	b.n	800840e <_malloc_r+0x22>
 80084ca:	6025      	str	r5, [r4, #0]
 80084cc:	e7de      	b.n	800848c <_malloc_r+0xa0>
 80084ce:	bf00      	nop
 80084d0:	20001f04 	.word	0x20001f04

080084d4 <__sfputc_r>:
 80084d4:	6893      	ldr	r3, [r2, #8]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	b410      	push	{r4}
 80084dc:	6093      	str	r3, [r2, #8]
 80084de:	da08      	bge.n	80084f2 <__sfputc_r+0x1e>
 80084e0:	6994      	ldr	r4, [r2, #24]
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	db01      	blt.n	80084ea <__sfputc_r+0x16>
 80084e6:	290a      	cmp	r1, #10
 80084e8:	d103      	bne.n	80084f2 <__sfputc_r+0x1e>
 80084ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ee:	f000 bb33 	b.w	8008b58 <__swbuf_r>
 80084f2:	6813      	ldr	r3, [r2, #0]
 80084f4:	1c58      	adds	r0, r3, #1
 80084f6:	6010      	str	r0, [r2, #0]
 80084f8:	7019      	strb	r1, [r3, #0]
 80084fa:	4608      	mov	r0, r1
 80084fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008500:	4770      	bx	lr

08008502 <__sfputs_r>:
 8008502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008504:	4606      	mov	r6, r0
 8008506:	460f      	mov	r7, r1
 8008508:	4614      	mov	r4, r2
 800850a:	18d5      	adds	r5, r2, r3
 800850c:	42ac      	cmp	r4, r5
 800850e:	d101      	bne.n	8008514 <__sfputs_r+0x12>
 8008510:	2000      	movs	r0, #0
 8008512:	e007      	b.n	8008524 <__sfputs_r+0x22>
 8008514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008518:	463a      	mov	r2, r7
 800851a:	4630      	mov	r0, r6
 800851c:	f7ff ffda 	bl	80084d4 <__sfputc_r>
 8008520:	1c43      	adds	r3, r0, #1
 8008522:	d1f3      	bne.n	800850c <__sfputs_r+0xa>
 8008524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008528 <_vfiprintf_r>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	460d      	mov	r5, r1
 800852e:	b09d      	sub	sp, #116	; 0x74
 8008530:	4614      	mov	r4, r2
 8008532:	4698      	mov	r8, r3
 8008534:	4606      	mov	r6, r0
 8008536:	b118      	cbz	r0, 8008540 <_vfiprintf_r+0x18>
 8008538:	6983      	ldr	r3, [r0, #24]
 800853a:	b90b      	cbnz	r3, 8008540 <_vfiprintf_r+0x18>
 800853c:	f7ff fe96 	bl	800826c <__sinit>
 8008540:	4b89      	ldr	r3, [pc, #548]	; (8008768 <_vfiprintf_r+0x240>)
 8008542:	429d      	cmp	r5, r3
 8008544:	d11b      	bne.n	800857e <_vfiprintf_r+0x56>
 8008546:	6875      	ldr	r5, [r6, #4]
 8008548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800854a:	07d9      	lsls	r1, r3, #31
 800854c:	d405      	bmi.n	800855a <_vfiprintf_r+0x32>
 800854e:	89ab      	ldrh	r3, [r5, #12]
 8008550:	059a      	lsls	r2, r3, #22
 8008552:	d402      	bmi.n	800855a <_vfiprintf_r+0x32>
 8008554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008556:	f7ff ff27 	bl	80083a8 <__retarget_lock_acquire_recursive>
 800855a:	89ab      	ldrh	r3, [r5, #12]
 800855c:	071b      	lsls	r3, r3, #28
 800855e:	d501      	bpl.n	8008564 <_vfiprintf_r+0x3c>
 8008560:	692b      	ldr	r3, [r5, #16]
 8008562:	b9eb      	cbnz	r3, 80085a0 <_vfiprintf_r+0x78>
 8008564:	4629      	mov	r1, r5
 8008566:	4630      	mov	r0, r6
 8008568:	f000 fb5a 	bl	8008c20 <__swsetup_r>
 800856c:	b1c0      	cbz	r0, 80085a0 <_vfiprintf_r+0x78>
 800856e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008570:	07dc      	lsls	r4, r3, #31
 8008572:	d50e      	bpl.n	8008592 <_vfiprintf_r+0x6a>
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	b01d      	add	sp, #116	; 0x74
 800857a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857e:	4b7b      	ldr	r3, [pc, #492]	; (800876c <_vfiprintf_r+0x244>)
 8008580:	429d      	cmp	r5, r3
 8008582:	d101      	bne.n	8008588 <_vfiprintf_r+0x60>
 8008584:	68b5      	ldr	r5, [r6, #8]
 8008586:	e7df      	b.n	8008548 <_vfiprintf_r+0x20>
 8008588:	4b79      	ldr	r3, [pc, #484]	; (8008770 <_vfiprintf_r+0x248>)
 800858a:	429d      	cmp	r5, r3
 800858c:	bf08      	it	eq
 800858e:	68f5      	ldreq	r5, [r6, #12]
 8008590:	e7da      	b.n	8008548 <_vfiprintf_r+0x20>
 8008592:	89ab      	ldrh	r3, [r5, #12]
 8008594:	0598      	lsls	r0, r3, #22
 8008596:	d4ed      	bmi.n	8008574 <_vfiprintf_r+0x4c>
 8008598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800859a:	f7ff ff06 	bl	80083aa <__retarget_lock_release_recursive>
 800859e:	e7e9      	b.n	8008574 <_vfiprintf_r+0x4c>
 80085a0:	2300      	movs	r3, #0
 80085a2:	9309      	str	r3, [sp, #36]	; 0x24
 80085a4:	2320      	movs	r3, #32
 80085a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80085ae:	2330      	movs	r3, #48	; 0x30
 80085b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008774 <_vfiprintf_r+0x24c>
 80085b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085b8:	f04f 0901 	mov.w	r9, #1
 80085bc:	4623      	mov	r3, r4
 80085be:	469a      	mov	sl, r3
 80085c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085c4:	b10a      	cbz	r2, 80085ca <_vfiprintf_r+0xa2>
 80085c6:	2a25      	cmp	r2, #37	; 0x25
 80085c8:	d1f9      	bne.n	80085be <_vfiprintf_r+0x96>
 80085ca:	ebba 0b04 	subs.w	fp, sl, r4
 80085ce:	d00b      	beq.n	80085e8 <_vfiprintf_r+0xc0>
 80085d0:	465b      	mov	r3, fp
 80085d2:	4622      	mov	r2, r4
 80085d4:	4629      	mov	r1, r5
 80085d6:	4630      	mov	r0, r6
 80085d8:	f7ff ff93 	bl	8008502 <__sfputs_r>
 80085dc:	3001      	adds	r0, #1
 80085de:	f000 80aa 	beq.w	8008736 <_vfiprintf_r+0x20e>
 80085e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085e4:	445a      	add	r2, fp
 80085e6:	9209      	str	r2, [sp, #36]	; 0x24
 80085e8:	f89a 3000 	ldrb.w	r3, [sl]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 80a2 	beq.w	8008736 <_vfiprintf_r+0x20e>
 80085f2:	2300      	movs	r3, #0
 80085f4:	f04f 32ff 	mov.w	r2, #4294967295
 80085f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085fc:	f10a 0a01 	add.w	sl, sl, #1
 8008600:	9304      	str	r3, [sp, #16]
 8008602:	9307      	str	r3, [sp, #28]
 8008604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008608:	931a      	str	r3, [sp, #104]	; 0x68
 800860a:	4654      	mov	r4, sl
 800860c:	2205      	movs	r2, #5
 800860e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008612:	4858      	ldr	r0, [pc, #352]	; (8008774 <_vfiprintf_r+0x24c>)
 8008614:	f7f7 fde4 	bl	80001e0 <memchr>
 8008618:	9a04      	ldr	r2, [sp, #16]
 800861a:	b9d8      	cbnz	r0, 8008654 <_vfiprintf_r+0x12c>
 800861c:	06d1      	lsls	r1, r2, #27
 800861e:	bf44      	itt	mi
 8008620:	2320      	movmi	r3, #32
 8008622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008626:	0713      	lsls	r3, r2, #28
 8008628:	bf44      	itt	mi
 800862a:	232b      	movmi	r3, #43	; 0x2b
 800862c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008630:	f89a 3000 	ldrb.w	r3, [sl]
 8008634:	2b2a      	cmp	r3, #42	; 0x2a
 8008636:	d015      	beq.n	8008664 <_vfiprintf_r+0x13c>
 8008638:	9a07      	ldr	r2, [sp, #28]
 800863a:	4654      	mov	r4, sl
 800863c:	2000      	movs	r0, #0
 800863e:	f04f 0c0a 	mov.w	ip, #10
 8008642:	4621      	mov	r1, r4
 8008644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008648:	3b30      	subs	r3, #48	; 0x30
 800864a:	2b09      	cmp	r3, #9
 800864c:	d94e      	bls.n	80086ec <_vfiprintf_r+0x1c4>
 800864e:	b1b0      	cbz	r0, 800867e <_vfiprintf_r+0x156>
 8008650:	9207      	str	r2, [sp, #28]
 8008652:	e014      	b.n	800867e <_vfiprintf_r+0x156>
 8008654:	eba0 0308 	sub.w	r3, r0, r8
 8008658:	fa09 f303 	lsl.w	r3, r9, r3
 800865c:	4313      	orrs	r3, r2
 800865e:	9304      	str	r3, [sp, #16]
 8008660:	46a2      	mov	sl, r4
 8008662:	e7d2      	b.n	800860a <_vfiprintf_r+0xe2>
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	1d19      	adds	r1, r3, #4
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	9103      	str	r1, [sp, #12]
 800866c:	2b00      	cmp	r3, #0
 800866e:	bfbb      	ittet	lt
 8008670:	425b      	neglt	r3, r3
 8008672:	f042 0202 	orrlt.w	r2, r2, #2
 8008676:	9307      	strge	r3, [sp, #28]
 8008678:	9307      	strlt	r3, [sp, #28]
 800867a:	bfb8      	it	lt
 800867c:	9204      	strlt	r2, [sp, #16]
 800867e:	7823      	ldrb	r3, [r4, #0]
 8008680:	2b2e      	cmp	r3, #46	; 0x2e
 8008682:	d10c      	bne.n	800869e <_vfiprintf_r+0x176>
 8008684:	7863      	ldrb	r3, [r4, #1]
 8008686:	2b2a      	cmp	r3, #42	; 0x2a
 8008688:	d135      	bne.n	80086f6 <_vfiprintf_r+0x1ce>
 800868a:	9b03      	ldr	r3, [sp, #12]
 800868c:	1d1a      	adds	r2, r3, #4
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	9203      	str	r2, [sp, #12]
 8008692:	2b00      	cmp	r3, #0
 8008694:	bfb8      	it	lt
 8008696:	f04f 33ff 	movlt.w	r3, #4294967295
 800869a:	3402      	adds	r4, #2
 800869c:	9305      	str	r3, [sp, #20]
 800869e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008784 <_vfiprintf_r+0x25c>
 80086a2:	7821      	ldrb	r1, [r4, #0]
 80086a4:	2203      	movs	r2, #3
 80086a6:	4650      	mov	r0, sl
 80086a8:	f7f7 fd9a 	bl	80001e0 <memchr>
 80086ac:	b140      	cbz	r0, 80086c0 <_vfiprintf_r+0x198>
 80086ae:	2340      	movs	r3, #64	; 0x40
 80086b0:	eba0 000a 	sub.w	r0, r0, sl
 80086b4:	fa03 f000 	lsl.w	r0, r3, r0
 80086b8:	9b04      	ldr	r3, [sp, #16]
 80086ba:	4303      	orrs	r3, r0
 80086bc:	3401      	adds	r4, #1
 80086be:	9304      	str	r3, [sp, #16]
 80086c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086c4:	482c      	ldr	r0, [pc, #176]	; (8008778 <_vfiprintf_r+0x250>)
 80086c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086ca:	2206      	movs	r2, #6
 80086cc:	f7f7 fd88 	bl	80001e0 <memchr>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d03f      	beq.n	8008754 <_vfiprintf_r+0x22c>
 80086d4:	4b29      	ldr	r3, [pc, #164]	; (800877c <_vfiprintf_r+0x254>)
 80086d6:	bb1b      	cbnz	r3, 8008720 <_vfiprintf_r+0x1f8>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	3307      	adds	r3, #7
 80086dc:	f023 0307 	bic.w	r3, r3, #7
 80086e0:	3308      	adds	r3, #8
 80086e2:	9303      	str	r3, [sp, #12]
 80086e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e6:	443b      	add	r3, r7
 80086e8:	9309      	str	r3, [sp, #36]	; 0x24
 80086ea:	e767      	b.n	80085bc <_vfiprintf_r+0x94>
 80086ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80086f0:	460c      	mov	r4, r1
 80086f2:	2001      	movs	r0, #1
 80086f4:	e7a5      	b.n	8008642 <_vfiprintf_r+0x11a>
 80086f6:	2300      	movs	r3, #0
 80086f8:	3401      	adds	r4, #1
 80086fa:	9305      	str	r3, [sp, #20]
 80086fc:	4619      	mov	r1, r3
 80086fe:	f04f 0c0a 	mov.w	ip, #10
 8008702:	4620      	mov	r0, r4
 8008704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008708:	3a30      	subs	r2, #48	; 0x30
 800870a:	2a09      	cmp	r2, #9
 800870c:	d903      	bls.n	8008716 <_vfiprintf_r+0x1ee>
 800870e:	2b00      	cmp	r3, #0
 8008710:	d0c5      	beq.n	800869e <_vfiprintf_r+0x176>
 8008712:	9105      	str	r1, [sp, #20]
 8008714:	e7c3      	b.n	800869e <_vfiprintf_r+0x176>
 8008716:	fb0c 2101 	mla	r1, ip, r1, r2
 800871a:	4604      	mov	r4, r0
 800871c:	2301      	movs	r3, #1
 800871e:	e7f0      	b.n	8008702 <_vfiprintf_r+0x1da>
 8008720:	ab03      	add	r3, sp, #12
 8008722:	9300      	str	r3, [sp, #0]
 8008724:	462a      	mov	r2, r5
 8008726:	4b16      	ldr	r3, [pc, #88]	; (8008780 <_vfiprintf_r+0x258>)
 8008728:	a904      	add	r1, sp, #16
 800872a:	4630      	mov	r0, r6
 800872c:	f3af 8000 	nop.w
 8008730:	4607      	mov	r7, r0
 8008732:	1c78      	adds	r0, r7, #1
 8008734:	d1d6      	bne.n	80086e4 <_vfiprintf_r+0x1bc>
 8008736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008738:	07d9      	lsls	r1, r3, #31
 800873a:	d405      	bmi.n	8008748 <_vfiprintf_r+0x220>
 800873c:	89ab      	ldrh	r3, [r5, #12]
 800873e:	059a      	lsls	r2, r3, #22
 8008740:	d402      	bmi.n	8008748 <_vfiprintf_r+0x220>
 8008742:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008744:	f7ff fe31 	bl	80083aa <__retarget_lock_release_recursive>
 8008748:	89ab      	ldrh	r3, [r5, #12]
 800874a:	065b      	lsls	r3, r3, #25
 800874c:	f53f af12 	bmi.w	8008574 <_vfiprintf_r+0x4c>
 8008750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008752:	e711      	b.n	8008578 <_vfiprintf_r+0x50>
 8008754:	ab03      	add	r3, sp, #12
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	462a      	mov	r2, r5
 800875a:	4b09      	ldr	r3, [pc, #36]	; (8008780 <_vfiprintf_r+0x258>)
 800875c:	a904      	add	r1, sp, #16
 800875e:	4630      	mov	r0, r6
 8008760:	f000 f880 	bl	8008864 <_printf_i>
 8008764:	e7e4      	b.n	8008730 <_vfiprintf_r+0x208>
 8008766:	bf00      	nop
 8008768:	0800918c 	.word	0x0800918c
 800876c:	080091ac 	.word	0x080091ac
 8008770:	0800916c 	.word	0x0800916c
 8008774:	080091cc 	.word	0x080091cc
 8008778:	080091d6 	.word	0x080091d6
 800877c:	00000000 	.word	0x00000000
 8008780:	08008503 	.word	0x08008503
 8008784:	080091d2 	.word	0x080091d2

08008788 <_printf_common>:
 8008788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800878c:	4616      	mov	r6, r2
 800878e:	4699      	mov	r9, r3
 8008790:	688a      	ldr	r2, [r1, #8]
 8008792:	690b      	ldr	r3, [r1, #16]
 8008794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008798:	4293      	cmp	r3, r2
 800879a:	bfb8      	it	lt
 800879c:	4613      	movlt	r3, r2
 800879e:	6033      	str	r3, [r6, #0]
 80087a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087a4:	4607      	mov	r7, r0
 80087a6:	460c      	mov	r4, r1
 80087a8:	b10a      	cbz	r2, 80087ae <_printf_common+0x26>
 80087aa:	3301      	adds	r3, #1
 80087ac:	6033      	str	r3, [r6, #0]
 80087ae:	6823      	ldr	r3, [r4, #0]
 80087b0:	0699      	lsls	r1, r3, #26
 80087b2:	bf42      	ittt	mi
 80087b4:	6833      	ldrmi	r3, [r6, #0]
 80087b6:	3302      	addmi	r3, #2
 80087b8:	6033      	strmi	r3, [r6, #0]
 80087ba:	6825      	ldr	r5, [r4, #0]
 80087bc:	f015 0506 	ands.w	r5, r5, #6
 80087c0:	d106      	bne.n	80087d0 <_printf_common+0x48>
 80087c2:	f104 0a19 	add.w	sl, r4, #25
 80087c6:	68e3      	ldr	r3, [r4, #12]
 80087c8:	6832      	ldr	r2, [r6, #0]
 80087ca:	1a9b      	subs	r3, r3, r2
 80087cc:	42ab      	cmp	r3, r5
 80087ce:	dc26      	bgt.n	800881e <_printf_common+0x96>
 80087d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80087d4:	1e13      	subs	r3, r2, #0
 80087d6:	6822      	ldr	r2, [r4, #0]
 80087d8:	bf18      	it	ne
 80087da:	2301      	movne	r3, #1
 80087dc:	0692      	lsls	r2, r2, #26
 80087de:	d42b      	bmi.n	8008838 <_printf_common+0xb0>
 80087e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80087e4:	4649      	mov	r1, r9
 80087e6:	4638      	mov	r0, r7
 80087e8:	47c0      	blx	r8
 80087ea:	3001      	adds	r0, #1
 80087ec:	d01e      	beq.n	800882c <_printf_common+0xa4>
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	68e5      	ldr	r5, [r4, #12]
 80087f2:	6832      	ldr	r2, [r6, #0]
 80087f4:	f003 0306 	and.w	r3, r3, #6
 80087f8:	2b04      	cmp	r3, #4
 80087fa:	bf08      	it	eq
 80087fc:	1aad      	subeq	r5, r5, r2
 80087fe:	68a3      	ldr	r3, [r4, #8]
 8008800:	6922      	ldr	r2, [r4, #16]
 8008802:	bf0c      	ite	eq
 8008804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008808:	2500      	movne	r5, #0
 800880a:	4293      	cmp	r3, r2
 800880c:	bfc4      	itt	gt
 800880e:	1a9b      	subgt	r3, r3, r2
 8008810:	18ed      	addgt	r5, r5, r3
 8008812:	2600      	movs	r6, #0
 8008814:	341a      	adds	r4, #26
 8008816:	42b5      	cmp	r5, r6
 8008818:	d11a      	bne.n	8008850 <_printf_common+0xc8>
 800881a:	2000      	movs	r0, #0
 800881c:	e008      	b.n	8008830 <_printf_common+0xa8>
 800881e:	2301      	movs	r3, #1
 8008820:	4652      	mov	r2, sl
 8008822:	4649      	mov	r1, r9
 8008824:	4638      	mov	r0, r7
 8008826:	47c0      	blx	r8
 8008828:	3001      	adds	r0, #1
 800882a:	d103      	bne.n	8008834 <_printf_common+0xac>
 800882c:	f04f 30ff 	mov.w	r0, #4294967295
 8008830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008834:	3501      	adds	r5, #1
 8008836:	e7c6      	b.n	80087c6 <_printf_common+0x3e>
 8008838:	18e1      	adds	r1, r4, r3
 800883a:	1c5a      	adds	r2, r3, #1
 800883c:	2030      	movs	r0, #48	; 0x30
 800883e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008842:	4422      	add	r2, r4
 8008844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800884c:	3302      	adds	r3, #2
 800884e:	e7c7      	b.n	80087e0 <_printf_common+0x58>
 8008850:	2301      	movs	r3, #1
 8008852:	4622      	mov	r2, r4
 8008854:	4649      	mov	r1, r9
 8008856:	4638      	mov	r0, r7
 8008858:	47c0      	blx	r8
 800885a:	3001      	adds	r0, #1
 800885c:	d0e6      	beq.n	800882c <_printf_common+0xa4>
 800885e:	3601      	adds	r6, #1
 8008860:	e7d9      	b.n	8008816 <_printf_common+0x8e>
	...

08008864 <_printf_i>:
 8008864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008868:	7e0f      	ldrb	r7, [r1, #24]
 800886a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800886c:	2f78      	cmp	r7, #120	; 0x78
 800886e:	4691      	mov	r9, r2
 8008870:	4680      	mov	r8, r0
 8008872:	460c      	mov	r4, r1
 8008874:	469a      	mov	sl, r3
 8008876:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800887a:	d807      	bhi.n	800888c <_printf_i+0x28>
 800887c:	2f62      	cmp	r7, #98	; 0x62
 800887e:	d80a      	bhi.n	8008896 <_printf_i+0x32>
 8008880:	2f00      	cmp	r7, #0
 8008882:	f000 80d8 	beq.w	8008a36 <_printf_i+0x1d2>
 8008886:	2f58      	cmp	r7, #88	; 0x58
 8008888:	f000 80a3 	beq.w	80089d2 <_printf_i+0x16e>
 800888c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008894:	e03a      	b.n	800890c <_printf_i+0xa8>
 8008896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800889a:	2b15      	cmp	r3, #21
 800889c:	d8f6      	bhi.n	800888c <_printf_i+0x28>
 800889e:	a101      	add	r1, pc, #4	; (adr r1, 80088a4 <_printf_i+0x40>)
 80088a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088a4:	080088fd 	.word	0x080088fd
 80088a8:	08008911 	.word	0x08008911
 80088ac:	0800888d 	.word	0x0800888d
 80088b0:	0800888d 	.word	0x0800888d
 80088b4:	0800888d 	.word	0x0800888d
 80088b8:	0800888d 	.word	0x0800888d
 80088bc:	08008911 	.word	0x08008911
 80088c0:	0800888d 	.word	0x0800888d
 80088c4:	0800888d 	.word	0x0800888d
 80088c8:	0800888d 	.word	0x0800888d
 80088cc:	0800888d 	.word	0x0800888d
 80088d0:	08008a1d 	.word	0x08008a1d
 80088d4:	08008941 	.word	0x08008941
 80088d8:	080089ff 	.word	0x080089ff
 80088dc:	0800888d 	.word	0x0800888d
 80088e0:	0800888d 	.word	0x0800888d
 80088e4:	08008a3f 	.word	0x08008a3f
 80088e8:	0800888d 	.word	0x0800888d
 80088ec:	08008941 	.word	0x08008941
 80088f0:	0800888d 	.word	0x0800888d
 80088f4:	0800888d 	.word	0x0800888d
 80088f8:	08008a07 	.word	0x08008a07
 80088fc:	682b      	ldr	r3, [r5, #0]
 80088fe:	1d1a      	adds	r2, r3, #4
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	602a      	str	r2, [r5, #0]
 8008904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800890c:	2301      	movs	r3, #1
 800890e:	e0a3      	b.n	8008a58 <_printf_i+0x1f4>
 8008910:	6820      	ldr	r0, [r4, #0]
 8008912:	6829      	ldr	r1, [r5, #0]
 8008914:	0606      	lsls	r6, r0, #24
 8008916:	f101 0304 	add.w	r3, r1, #4
 800891a:	d50a      	bpl.n	8008932 <_printf_i+0xce>
 800891c:	680e      	ldr	r6, [r1, #0]
 800891e:	602b      	str	r3, [r5, #0]
 8008920:	2e00      	cmp	r6, #0
 8008922:	da03      	bge.n	800892c <_printf_i+0xc8>
 8008924:	232d      	movs	r3, #45	; 0x2d
 8008926:	4276      	negs	r6, r6
 8008928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800892c:	485e      	ldr	r0, [pc, #376]	; (8008aa8 <_printf_i+0x244>)
 800892e:	230a      	movs	r3, #10
 8008930:	e019      	b.n	8008966 <_printf_i+0x102>
 8008932:	680e      	ldr	r6, [r1, #0]
 8008934:	602b      	str	r3, [r5, #0]
 8008936:	f010 0f40 	tst.w	r0, #64	; 0x40
 800893a:	bf18      	it	ne
 800893c:	b236      	sxthne	r6, r6
 800893e:	e7ef      	b.n	8008920 <_printf_i+0xbc>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	6820      	ldr	r0, [r4, #0]
 8008944:	1d19      	adds	r1, r3, #4
 8008946:	6029      	str	r1, [r5, #0]
 8008948:	0601      	lsls	r1, r0, #24
 800894a:	d501      	bpl.n	8008950 <_printf_i+0xec>
 800894c:	681e      	ldr	r6, [r3, #0]
 800894e:	e002      	b.n	8008956 <_printf_i+0xf2>
 8008950:	0646      	lsls	r6, r0, #25
 8008952:	d5fb      	bpl.n	800894c <_printf_i+0xe8>
 8008954:	881e      	ldrh	r6, [r3, #0]
 8008956:	4854      	ldr	r0, [pc, #336]	; (8008aa8 <_printf_i+0x244>)
 8008958:	2f6f      	cmp	r7, #111	; 0x6f
 800895a:	bf0c      	ite	eq
 800895c:	2308      	moveq	r3, #8
 800895e:	230a      	movne	r3, #10
 8008960:	2100      	movs	r1, #0
 8008962:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008966:	6865      	ldr	r5, [r4, #4]
 8008968:	60a5      	str	r5, [r4, #8]
 800896a:	2d00      	cmp	r5, #0
 800896c:	bfa2      	ittt	ge
 800896e:	6821      	ldrge	r1, [r4, #0]
 8008970:	f021 0104 	bicge.w	r1, r1, #4
 8008974:	6021      	strge	r1, [r4, #0]
 8008976:	b90e      	cbnz	r6, 800897c <_printf_i+0x118>
 8008978:	2d00      	cmp	r5, #0
 800897a:	d04d      	beq.n	8008a18 <_printf_i+0x1b4>
 800897c:	4615      	mov	r5, r2
 800897e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008982:	fb03 6711 	mls	r7, r3, r1, r6
 8008986:	5dc7      	ldrb	r7, [r0, r7]
 8008988:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800898c:	4637      	mov	r7, r6
 800898e:	42bb      	cmp	r3, r7
 8008990:	460e      	mov	r6, r1
 8008992:	d9f4      	bls.n	800897e <_printf_i+0x11a>
 8008994:	2b08      	cmp	r3, #8
 8008996:	d10b      	bne.n	80089b0 <_printf_i+0x14c>
 8008998:	6823      	ldr	r3, [r4, #0]
 800899a:	07de      	lsls	r6, r3, #31
 800899c:	d508      	bpl.n	80089b0 <_printf_i+0x14c>
 800899e:	6923      	ldr	r3, [r4, #16]
 80089a0:	6861      	ldr	r1, [r4, #4]
 80089a2:	4299      	cmp	r1, r3
 80089a4:	bfde      	ittt	le
 80089a6:	2330      	movle	r3, #48	; 0x30
 80089a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80089b0:	1b52      	subs	r2, r2, r5
 80089b2:	6122      	str	r2, [r4, #16]
 80089b4:	f8cd a000 	str.w	sl, [sp]
 80089b8:	464b      	mov	r3, r9
 80089ba:	aa03      	add	r2, sp, #12
 80089bc:	4621      	mov	r1, r4
 80089be:	4640      	mov	r0, r8
 80089c0:	f7ff fee2 	bl	8008788 <_printf_common>
 80089c4:	3001      	adds	r0, #1
 80089c6:	d14c      	bne.n	8008a62 <_printf_i+0x1fe>
 80089c8:	f04f 30ff 	mov.w	r0, #4294967295
 80089cc:	b004      	add	sp, #16
 80089ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089d2:	4835      	ldr	r0, [pc, #212]	; (8008aa8 <_printf_i+0x244>)
 80089d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80089d8:	6829      	ldr	r1, [r5, #0]
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80089e0:	6029      	str	r1, [r5, #0]
 80089e2:	061d      	lsls	r5, r3, #24
 80089e4:	d514      	bpl.n	8008a10 <_printf_i+0x1ac>
 80089e6:	07df      	lsls	r7, r3, #31
 80089e8:	bf44      	itt	mi
 80089ea:	f043 0320 	orrmi.w	r3, r3, #32
 80089ee:	6023      	strmi	r3, [r4, #0]
 80089f0:	b91e      	cbnz	r6, 80089fa <_printf_i+0x196>
 80089f2:	6823      	ldr	r3, [r4, #0]
 80089f4:	f023 0320 	bic.w	r3, r3, #32
 80089f8:	6023      	str	r3, [r4, #0]
 80089fa:	2310      	movs	r3, #16
 80089fc:	e7b0      	b.n	8008960 <_printf_i+0xfc>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	f043 0320 	orr.w	r3, r3, #32
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	2378      	movs	r3, #120	; 0x78
 8008a08:	4828      	ldr	r0, [pc, #160]	; (8008aac <_printf_i+0x248>)
 8008a0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a0e:	e7e3      	b.n	80089d8 <_printf_i+0x174>
 8008a10:	0659      	lsls	r1, r3, #25
 8008a12:	bf48      	it	mi
 8008a14:	b2b6      	uxthmi	r6, r6
 8008a16:	e7e6      	b.n	80089e6 <_printf_i+0x182>
 8008a18:	4615      	mov	r5, r2
 8008a1a:	e7bb      	b.n	8008994 <_printf_i+0x130>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	6826      	ldr	r6, [r4, #0]
 8008a20:	6961      	ldr	r1, [r4, #20]
 8008a22:	1d18      	adds	r0, r3, #4
 8008a24:	6028      	str	r0, [r5, #0]
 8008a26:	0635      	lsls	r5, r6, #24
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	d501      	bpl.n	8008a30 <_printf_i+0x1cc>
 8008a2c:	6019      	str	r1, [r3, #0]
 8008a2e:	e002      	b.n	8008a36 <_printf_i+0x1d2>
 8008a30:	0670      	lsls	r0, r6, #25
 8008a32:	d5fb      	bpl.n	8008a2c <_printf_i+0x1c8>
 8008a34:	8019      	strh	r1, [r3, #0]
 8008a36:	2300      	movs	r3, #0
 8008a38:	6123      	str	r3, [r4, #16]
 8008a3a:	4615      	mov	r5, r2
 8008a3c:	e7ba      	b.n	80089b4 <_printf_i+0x150>
 8008a3e:	682b      	ldr	r3, [r5, #0]
 8008a40:	1d1a      	adds	r2, r3, #4
 8008a42:	602a      	str	r2, [r5, #0]
 8008a44:	681d      	ldr	r5, [r3, #0]
 8008a46:	6862      	ldr	r2, [r4, #4]
 8008a48:	2100      	movs	r1, #0
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	f7f7 fbc8 	bl	80001e0 <memchr>
 8008a50:	b108      	cbz	r0, 8008a56 <_printf_i+0x1f2>
 8008a52:	1b40      	subs	r0, r0, r5
 8008a54:	6060      	str	r0, [r4, #4]
 8008a56:	6863      	ldr	r3, [r4, #4]
 8008a58:	6123      	str	r3, [r4, #16]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a60:	e7a8      	b.n	80089b4 <_printf_i+0x150>
 8008a62:	6923      	ldr	r3, [r4, #16]
 8008a64:	462a      	mov	r2, r5
 8008a66:	4649      	mov	r1, r9
 8008a68:	4640      	mov	r0, r8
 8008a6a:	47d0      	blx	sl
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	d0ab      	beq.n	80089c8 <_printf_i+0x164>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	079b      	lsls	r3, r3, #30
 8008a74:	d413      	bmi.n	8008a9e <_printf_i+0x23a>
 8008a76:	68e0      	ldr	r0, [r4, #12]
 8008a78:	9b03      	ldr	r3, [sp, #12]
 8008a7a:	4298      	cmp	r0, r3
 8008a7c:	bfb8      	it	lt
 8008a7e:	4618      	movlt	r0, r3
 8008a80:	e7a4      	b.n	80089cc <_printf_i+0x168>
 8008a82:	2301      	movs	r3, #1
 8008a84:	4632      	mov	r2, r6
 8008a86:	4649      	mov	r1, r9
 8008a88:	4640      	mov	r0, r8
 8008a8a:	47d0      	blx	sl
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	d09b      	beq.n	80089c8 <_printf_i+0x164>
 8008a90:	3501      	adds	r5, #1
 8008a92:	68e3      	ldr	r3, [r4, #12]
 8008a94:	9903      	ldr	r1, [sp, #12]
 8008a96:	1a5b      	subs	r3, r3, r1
 8008a98:	42ab      	cmp	r3, r5
 8008a9a:	dcf2      	bgt.n	8008a82 <_printf_i+0x21e>
 8008a9c:	e7eb      	b.n	8008a76 <_printf_i+0x212>
 8008a9e:	2500      	movs	r5, #0
 8008aa0:	f104 0619 	add.w	r6, r4, #25
 8008aa4:	e7f5      	b.n	8008a92 <_printf_i+0x22e>
 8008aa6:	bf00      	nop
 8008aa8:	080091dd 	.word	0x080091dd
 8008aac:	080091ee 	.word	0x080091ee

08008ab0 <_sbrk_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d06      	ldr	r5, [pc, #24]	; (8008acc <_sbrk_r+0x1c>)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	602b      	str	r3, [r5, #0]
 8008abc:	f7f8 f98c 	bl	8000dd8 <_sbrk>
 8008ac0:	1c43      	adds	r3, r0, #1
 8008ac2:	d102      	bne.n	8008aca <_sbrk_r+0x1a>
 8008ac4:	682b      	ldr	r3, [r5, #0]
 8008ac6:	b103      	cbz	r3, 8008aca <_sbrk_r+0x1a>
 8008ac8:	6023      	str	r3, [r4, #0]
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	20001f0c 	.word	0x20001f0c

08008ad0 <__sread>:
 8008ad0:	b510      	push	{r4, lr}
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad8:	f000 fab2 	bl	8009040 <_read_r>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	bfab      	itete	ge
 8008ae0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ae2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ae4:	181b      	addge	r3, r3, r0
 8008ae6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008aea:	bfac      	ite	ge
 8008aec:	6563      	strge	r3, [r4, #84]	; 0x54
 8008aee:	81a3      	strhlt	r3, [r4, #12]
 8008af0:	bd10      	pop	{r4, pc}

08008af2 <__swrite>:
 8008af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af6:	461f      	mov	r7, r3
 8008af8:	898b      	ldrh	r3, [r1, #12]
 8008afa:	05db      	lsls	r3, r3, #23
 8008afc:	4605      	mov	r5, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	4616      	mov	r6, r2
 8008b02:	d505      	bpl.n	8008b10 <__swrite+0x1e>
 8008b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b08:	2302      	movs	r3, #2
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f000 f9c8 	bl	8008ea0 <_lseek_r>
 8008b10:	89a3      	ldrh	r3, [r4, #12]
 8008b12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b1a:	81a3      	strh	r3, [r4, #12]
 8008b1c:	4632      	mov	r2, r6
 8008b1e:	463b      	mov	r3, r7
 8008b20:	4628      	mov	r0, r5
 8008b22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b26:	f000 b869 	b.w	8008bfc <_write_r>

08008b2a <__sseek>:
 8008b2a:	b510      	push	{r4, lr}
 8008b2c:	460c      	mov	r4, r1
 8008b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b32:	f000 f9b5 	bl	8008ea0 <_lseek_r>
 8008b36:	1c43      	adds	r3, r0, #1
 8008b38:	89a3      	ldrh	r3, [r4, #12]
 8008b3a:	bf15      	itete	ne
 8008b3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008b3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008b42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008b46:	81a3      	strheq	r3, [r4, #12]
 8008b48:	bf18      	it	ne
 8008b4a:	81a3      	strhne	r3, [r4, #12]
 8008b4c:	bd10      	pop	{r4, pc}

08008b4e <__sclose>:
 8008b4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b52:	f000 b8d3 	b.w	8008cfc <_close_r>
	...

08008b58 <__swbuf_r>:
 8008b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b5a:	460e      	mov	r6, r1
 8008b5c:	4614      	mov	r4, r2
 8008b5e:	4605      	mov	r5, r0
 8008b60:	b118      	cbz	r0, 8008b6a <__swbuf_r+0x12>
 8008b62:	6983      	ldr	r3, [r0, #24]
 8008b64:	b90b      	cbnz	r3, 8008b6a <__swbuf_r+0x12>
 8008b66:	f7ff fb81 	bl	800826c <__sinit>
 8008b6a:	4b21      	ldr	r3, [pc, #132]	; (8008bf0 <__swbuf_r+0x98>)
 8008b6c:	429c      	cmp	r4, r3
 8008b6e:	d12b      	bne.n	8008bc8 <__swbuf_r+0x70>
 8008b70:	686c      	ldr	r4, [r5, #4]
 8008b72:	69a3      	ldr	r3, [r4, #24]
 8008b74:	60a3      	str	r3, [r4, #8]
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	071a      	lsls	r2, r3, #28
 8008b7a:	d52f      	bpl.n	8008bdc <__swbuf_r+0x84>
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	b36b      	cbz	r3, 8008bdc <__swbuf_r+0x84>
 8008b80:	6923      	ldr	r3, [r4, #16]
 8008b82:	6820      	ldr	r0, [r4, #0]
 8008b84:	1ac0      	subs	r0, r0, r3
 8008b86:	6963      	ldr	r3, [r4, #20]
 8008b88:	b2f6      	uxtb	r6, r6
 8008b8a:	4283      	cmp	r3, r0
 8008b8c:	4637      	mov	r7, r6
 8008b8e:	dc04      	bgt.n	8008b9a <__swbuf_r+0x42>
 8008b90:	4621      	mov	r1, r4
 8008b92:	4628      	mov	r0, r5
 8008b94:	f000 f948 	bl	8008e28 <_fflush_r>
 8008b98:	bb30      	cbnz	r0, 8008be8 <__swbuf_r+0x90>
 8008b9a:	68a3      	ldr	r3, [r4, #8]
 8008b9c:	3b01      	subs	r3, #1
 8008b9e:	60a3      	str	r3, [r4, #8]
 8008ba0:	6823      	ldr	r3, [r4, #0]
 8008ba2:	1c5a      	adds	r2, r3, #1
 8008ba4:	6022      	str	r2, [r4, #0]
 8008ba6:	701e      	strb	r6, [r3, #0]
 8008ba8:	6963      	ldr	r3, [r4, #20]
 8008baa:	3001      	adds	r0, #1
 8008bac:	4283      	cmp	r3, r0
 8008bae:	d004      	beq.n	8008bba <__swbuf_r+0x62>
 8008bb0:	89a3      	ldrh	r3, [r4, #12]
 8008bb2:	07db      	lsls	r3, r3, #31
 8008bb4:	d506      	bpl.n	8008bc4 <__swbuf_r+0x6c>
 8008bb6:	2e0a      	cmp	r6, #10
 8008bb8:	d104      	bne.n	8008bc4 <__swbuf_r+0x6c>
 8008bba:	4621      	mov	r1, r4
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	f000 f933 	bl	8008e28 <_fflush_r>
 8008bc2:	b988      	cbnz	r0, 8008be8 <__swbuf_r+0x90>
 8008bc4:	4638      	mov	r0, r7
 8008bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc8:	4b0a      	ldr	r3, [pc, #40]	; (8008bf4 <__swbuf_r+0x9c>)
 8008bca:	429c      	cmp	r4, r3
 8008bcc:	d101      	bne.n	8008bd2 <__swbuf_r+0x7a>
 8008bce:	68ac      	ldr	r4, [r5, #8]
 8008bd0:	e7cf      	b.n	8008b72 <__swbuf_r+0x1a>
 8008bd2:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <__swbuf_r+0xa0>)
 8008bd4:	429c      	cmp	r4, r3
 8008bd6:	bf08      	it	eq
 8008bd8:	68ec      	ldreq	r4, [r5, #12]
 8008bda:	e7ca      	b.n	8008b72 <__swbuf_r+0x1a>
 8008bdc:	4621      	mov	r1, r4
 8008bde:	4628      	mov	r0, r5
 8008be0:	f000 f81e 	bl	8008c20 <__swsetup_r>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d0cb      	beq.n	8008b80 <__swbuf_r+0x28>
 8008be8:	f04f 37ff 	mov.w	r7, #4294967295
 8008bec:	e7ea      	b.n	8008bc4 <__swbuf_r+0x6c>
 8008bee:	bf00      	nop
 8008bf0:	0800918c 	.word	0x0800918c
 8008bf4:	080091ac 	.word	0x080091ac
 8008bf8:	0800916c 	.word	0x0800916c

08008bfc <_write_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4d07      	ldr	r5, [pc, #28]	; (8008c1c <_write_r+0x20>)
 8008c00:	4604      	mov	r4, r0
 8008c02:	4608      	mov	r0, r1
 8008c04:	4611      	mov	r1, r2
 8008c06:	2200      	movs	r2, #0
 8008c08:	602a      	str	r2, [r5, #0]
 8008c0a:	461a      	mov	r2, r3
 8008c0c:	f7f7 fef2 	bl	80009f4 <_write>
 8008c10:	1c43      	adds	r3, r0, #1
 8008c12:	d102      	bne.n	8008c1a <_write_r+0x1e>
 8008c14:	682b      	ldr	r3, [r5, #0]
 8008c16:	b103      	cbz	r3, 8008c1a <_write_r+0x1e>
 8008c18:	6023      	str	r3, [r4, #0]
 8008c1a:	bd38      	pop	{r3, r4, r5, pc}
 8008c1c:	20001f0c 	.word	0x20001f0c

08008c20 <__swsetup_r>:
 8008c20:	4b32      	ldr	r3, [pc, #200]	; (8008cec <__swsetup_r+0xcc>)
 8008c22:	b570      	push	{r4, r5, r6, lr}
 8008c24:	681d      	ldr	r5, [r3, #0]
 8008c26:	4606      	mov	r6, r0
 8008c28:	460c      	mov	r4, r1
 8008c2a:	b125      	cbz	r5, 8008c36 <__swsetup_r+0x16>
 8008c2c:	69ab      	ldr	r3, [r5, #24]
 8008c2e:	b913      	cbnz	r3, 8008c36 <__swsetup_r+0x16>
 8008c30:	4628      	mov	r0, r5
 8008c32:	f7ff fb1b 	bl	800826c <__sinit>
 8008c36:	4b2e      	ldr	r3, [pc, #184]	; (8008cf0 <__swsetup_r+0xd0>)
 8008c38:	429c      	cmp	r4, r3
 8008c3a:	d10f      	bne.n	8008c5c <__swsetup_r+0x3c>
 8008c3c:	686c      	ldr	r4, [r5, #4]
 8008c3e:	89a3      	ldrh	r3, [r4, #12]
 8008c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c44:	0719      	lsls	r1, r3, #28
 8008c46:	d42c      	bmi.n	8008ca2 <__swsetup_r+0x82>
 8008c48:	06dd      	lsls	r5, r3, #27
 8008c4a:	d411      	bmi.n	8008c70 <__swsetup_r+0x50>
 8008c4c:	2309      	movs	r3, #9
 8008c4e:	6033      	str	r3, [r6, #0]
 8008c50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c54:	81a3      	strh	r3, [r4, #12]
 8008c56:	f04f 30ff 	mov.w	r0, #4294967295
 8008c5a:	e03e      	b.n	8008cda <__swsetup_r+0xba>
 8008c5c:	4b25      	ldr	r3, [pc, #148]	; (8008cf4 <__swsetup_r+0xd4>)
 8008c5e:	429c      	cmp	r4, r3
 8008c60:	d101      	bne.n	8008c66 <__swsetup_r+0x46>
 8008c62:	68ac      	ldr	r4, [r5, #8]
 8008c64:	e7eb      	b.n	8008c3e <__swsetup_r+0x1e>
 8008c66:	4b24      	ldr	r3, [pc, #144]	; (8008cf8 <__swsetup_r+0xd8>)
 8008c68:	429c      	cmp	r4, r3
 8008c6a:	bf08      	it	eq
 8008c6c:	68ec      	ldreq	r4, [r5, #12]
 8008c6e:	e7e6      	b.n	8008c3e <__swsetup_r+0x1e>
 8008c70:	0758      	lsls	r0, r3, #29
 8008c72:	d512      	bpl.n	8008c9a <__swsetup_r+0x7a>
 8008c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c76:	b141      	cbz	r1, 8008c8a <__swsetup_r+0x6a>
 8008c78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c7c:	4299      	cmp	r1, r3
 8008c7e:	d002      	beq.n	8008c86 <__swsetup_r+0x66>
 8008c80:	4630      	mov	r0, r6
 8008c82:	f000 f991 	bl	8008fa8 <_free_r>
 8008c86:	2300      	movs	r3, #0
 8008c88:	6363      	str	r3, [r4, #52]	; 0x34
 8008c8a:	89a3      	ldrh	r3, [r4, #12]
 8008c8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c90:	81a3      	strh	r3, [r4, #12]
 8008c92:	2300      	movs	r3, #0
 8008c94:	6063      	str	r3, [r4, #4]
 8008c96:	6923      	ldr	r3, [r4, #16]
 8008c98:	6023      	str	r3, [r4, #0]
 8008c9a:	89a3      	ldrh	r3, [r4, #12]
 8008c9c:	f043 0308 	orr.w	r3, r3, #8
 8008ca0:	81a3      	strh	r3, [r4, #12]
 8008ca2:	6923      	ldr	r3, [r4, #16]
 8008ca4:	b94b      	cbnz	r3, 8008cba <__swsetup_r+0x9a>
 8008ca6:	89a3      	ldrh	r3, [r4, #12]
 8008ca8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cb0:	d003      	beq.n	8008cba <__swsetup_r+0x9a>
 8008cb2:	4621      	mov	r1, r4
 8008cb4:	4630      	mov	r0, r6
 8008cb6:	f000 f92b 	bl	8008f10 <__smakebuf_r>
 8008cba:	89a0      	ldrh	r0, [r4, #12]
 8008cbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cc0:	f010 0301 	ands.w	r3, r0, #1
 8008cc4:	d00a      	beq.n	8008cdc <__swsetup_r+0xbc>
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	60a3      	str	r3, [r4, #8]
 8008cca:	6963      	ldr	r3, [r4, #20]
 8008ccc:	425b      	negs	r3, r3
 8008cce:	61a3      	str	r3, [r4, #24]
 8008cd0:	6923      	ldr	r3, [r4, #16]
 8008cd2:	b943      	cbnz	r3, 8008ce6 <__swsetup_r+0xc6>
 8008cd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cd8:	d1ba      	bne.n	8008c50 <__swsetup_r+0x30>
 8008cda:	bd70      	pop	{r4, r5, r6, pc}
 8008cdc:	0781      	lsls	r1, r0, #30
 8008cde:	bf58      	it	pl
 8008ce0:	6963      	ldrpl	r3, [r4, #20]
 8008ce2:	60a3      	str	r3, [r4, #8]
 8008ce4:	e7f4      	b.n	8008cd0 <__swsetup_r+0xb0>
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	e7f7      	b.n	8008cda <__swsetup_r+0xba>
 8008cea:	bf00      	nop
 8008cec:	200000fc 	.word	0x200000fc
 8008cf0:	0800918c 	.word	0x0800918c
 8008cf4:	080091ac 	.word	0x080091ac
 8008cf8:	0800916c 	.word	0x0800916c

08008cfc <_close_r>:
 8008cfc:	b538      	push	{r3, r4, r5, lr}
 8008cfe:	4d06      	ldr	r5, [pc, #24]	; (8008d18 <_close_r+0x1c>)
 8008d00:	2300      	movs	r3, #0
 8008d02:	4604      	mov	r4, r0
 8008d04:	4608      	mov	r0, r1
 8008d06:	602b      	str	r3, [r5, #0]
 8008d08:	f7f8 f831 	bl	8000d6e <_close>
 8008d0c:	1c43      	adds	r3, r0, #1
 8008d0e:	d102      	bne.n	8008d16 <_close_r+0x1a>
 8008d10:	682b      	ldr	r3, [r5, #0]
 8008d12:	b103      	cbz	r3, 8008d16 <_close_r+0x1a>
 8008d14:	6023      	str	r3, [r4, #0]
 8008d16:	bd38      	pop	{r3, r4, r5, pc}
 8008d18:	20001f0c 	.word	0x20001f0c

08008d1c <__sflush_r>:
 8008d1c:	898a      	ldrh	r2, [r1, #12]
 8008d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d22:	4605      	mov	r5, r0
 8008d24:	0710      	lsls	r0, r2, #28
 8008d26:	460c      	mov	r4, r1
 8008d28:	d458      	bmi.n	8008ddc <__sflush_r+0xc0>
 8008d2a:	684b      	ldr	r3, [r1, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	dc05      	bgt.n	8008d3c <__sflush_r+0x20>
 8008d30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	dc02      	bgt.n	8008d3c <__sflush_r+0x20>
 8008d36:	2000      	movs	r0, #0
 8008d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d3e:	2e00      	cmp	r6, #0
 8008d40:	d0f9      	beq.n	8008d36 <__sflush_r+0x1a>
 8008d42:	2300      	movs	r3, #0
 8008d44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d48:	682f      	ldr	r7, [r5, #0]
 8008d4a:	602b      	str	r3, [r5, #0]
 8008d4c:	d032      	beq.n	8008db4 <__sflush_r+0x98>
 8008d4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d50:	89a3      	ldrh	r3, [r4, #12]
 8008d52:	075a      	lsls	r2, r3, #29
 8008d54:	d505      	bpl.n	8008d62 <__sflush_r+0x46>
 8008d56:	6863      	ldr	r3, [r4, #4]
 8008d58:	1ac0      	subs	r0, r0, r3
 8008d5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d5c:	b10b      	cbz	r3, 8008d62 <__sflush_r+0x46>
 8008d5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d60:	1ac0      	subs	r0, r0, r3
 8008d62:	2300      	movs	r3, #0
 8008d64:	4602      	mov	r2, r0
 8008d66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d68:	6a21      	ldr	r1, [r4, #32]
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	47b0      	blx	r6
 8008d6e:	1c43      	adds	r3, r0, #1
 8008d70:	89a3      	ldrh	r3, [r4, #12]
 8008d72:	d106      	bne.n	8008d82 <__sflush_r+0x66>
 8008d74:	6829      	ldr	r1, [r5, #0]
 8008d76:	291d      	cmp	r1, #29
 8008d78:	d82c      	bhi.n	8008dd4 <__sflush_r+0xb8>
 8008d7a:	4a2a      	ldr	r2, [pc, #168]	; (8008e24 <__sflush_r+0x108>)
 8008d7c:	40ca      	lsrs	r2, r1
 8008d7e:	07d6      	lsls	r6, r2, #31
 8008d80:	d528      	bpl.n	8008dd4 <__sflush_r+0xb8>
 8008d82:	2200      	movs	r2, #0
 8008d84:	6062      	str	r2, [r4, #4]
 8008d86:	04d9      	lsls	r1, r3, #19
 8008d88:	6922      	ldr	r2, [r4, #16]
 8008d8a:	6022      	str	r2, [r4, #0]
 8008d8c:	d504      	bpl.n	8008d98 <__sflush_r+0x7c>
 8008d8e:	1c42      	adds	r2, r0, #1
 8008d90:	d101      	bne.n	8008d96 <__sflush_r+0x7a>
 8008d92:	682b      	ldr	r3, [r5, #0]
 8008d94:	b903      	cbnz	r3, 8008d98 <__sflush_r+0x7c>
 8008d96:	6560      	str	r0, [r4, #84]	; 0x54
 8008d98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d9a:	602f      	str	r7, [r5, #0]
 8008d9c:	2900      	cmp	r1, #0
 8008d9e:	d0ca      	beq.n	8008d36 <__sflush_r+0x1a>
 8008da0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008da4:	4299      	cmp	r1, r3
 8008da6:	d002      	beq.n	8008dae <__sflush_r+0x92>
 8008da8:	4628      	mov	r0, r5
 8008daa:	f000 f8fd 	bl	8008fa8 <_free_r>
 8008dae:	2000      	movs	r0, #0
 8008db0:	6360      	str	r0, [r4, #52]	; 0x34
 8008db2:	e7c1      	b.n	8008d38 <__sflush_r+0x1c>
 8008db4:	6a21      	ldr	r1, [r4, #32]
 8008db6:	2301      	movs	r3, #1
 8008db8:	4628      	mov	r0, r5
 8008dba:	47b0      	blx	r6
 8008dbc:	1c41      	adds	r1, r0, #1
 8008dbe:	d1c7      	bne.n	8008d50 <__sflush_r+0x34>
 8008dc0:	682b      	ldr	r3, [r5, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d0c4      	beq.n	8008d50 <__sflush_r+0x34>
 8008dc6:	2b1d      	cmp	r3, #29
 8008dc8:	d001      	beq.n	8008dce <__sflush_r+0xb2>
 8008dca:	2b16      	cmp	r3, #22
 8008dcc:	d101      	bne.n	8008dd2 <__sflush_r+0xb6>
 8008dce:	602f      	str	r7, [r5, #0]
 8008dd0:	e7b1      	b.n	8008d36 <__sflush_r+0x1a>
 8008dd2:	89a3      	ldrh	r3, [r4, #12]
 8008dd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dd8:	81a3      	strh	r3, [r4, #12]
 8008dda:	e7ad      	b.n	8008d38 <__sflush_r+0x1c>
 8008ddc:	690f      	ldr	r7, [r1, #16]
 8008dde:	2f00      	cmp	r7, #0
 8008de0:	d0a9      	beq.n	8008d36 <__sflush_r+0x1a>
 8008de2:	0793      	lsls	r3, r2, #30
 8008de4:	680e      	ldr	r6, [r1, #0]
 8008de6:	bf08      	it	eq
 8008de8:	694b      	ldreq	r3, [r1, #20]
 8008dea:	600f      	str	r7, [r1, #0]
 8008dec:	bf18      	it	ne
 8008dee:	2300      	movne	r3, #0
 8008df0:	eba6 0807 	sub.w	r8, r6, r7
 8008df4:	608b      	str	r3, [r1, #8]
 8008df6:	f1b8 0f00 	cmp.w	r8, #0
 8008dfa:	dd9c      	ble.n	8008d36 <__sflush_r+0x1a>
 8008dfc:	6a21      	ldr	r1, [r4, #32]
 8008dfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008e00:	4643      	mov	r3, r8
 8008e02:	463a      	mov	r2, r7
 8008e04:	4628      	mov	r0, r5
 8008e06:	47b0      	blx	r6
 8008e08:	2800      	cmp	r0, #0
 8008e0a:	dc06      	bgt.n	8008e1a <__sflush_r+0xfe>
 8008e0c:	89a3      	ldrh	r3, [r4, #12]
 8008e0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e12:	81a3      	strh	r3, [r4, #12]
 8008e14:	f04f 30ff 	mov.w	r0, #4294967295
 8008e18:	e78e      	b.n	8008d38 <__sflush_r+0x1c>
 8008e1a:	4407      	add	r7, r0
 8008e1c:	eba8 0800 	sub.w	r8, r8, r0
 8008e20:	e7e9      	b.n	8008df6 <__sflush_r+0xda>
 8008e22:	bf00      	nop
 8008e24:	20400001 	.word	0x20400001

08008e28 <_fflush_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	690b      	ldr	r3, [r1, #16]
 8008e2c:	4605      	mov	r5, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	b913      	cbnz	r3, 8008e38 <_fflush_r+0x10>
 8008e32:	2500      	movs	r5, #0
 8008e34:	4628      	mov	r0, r5
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	b118      	cbz	r0, 8008e42 <_fflush_r+0x1a>
 8008e3a:	6983      	ldr	r3, [r0, #24]
 8008e3c:	b90b      	cbnz	r3, 8008e42 <_fflush_r+0x1a>
 8008e3e:	f7ff fa15 	bl	800826c <__sinit>
 8008e42:	4b14      	ldr	r3, [pc, #80]	; (8008e94 <_fflush_r+0x6c>)
 8008e44:	429c      	cmp	r4, r3
 8008e46:	d11b      	bne.n	8008e80 <_fflush_r+0x58>
 8008e48:	686c      	ldr	r4, [r5, #4]
 8008e4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d0ef      	beq.n	8008e32 <_fflush_r+0xa>
 8008e52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e54:	07d0      	lsls	r0, r2, #31
 8008e56:	d404      	bmi.n	8008e62 <_fflush_r+0x3a>
 8008e58:	0599      	lsls	r1, r3, #22
 8008e5a:	d402      	bmi.n	8008e62 <_fflush_r+0x3a>
 8008e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e5e:	f7ff faa3 	bl	80083a8 <__retarget_lock_acquire_recursive>
 8008e62:	4628      	mov	r0, r5
 8008e64:	4621      	mov	r1, r4
 8008e66:	f7ff ff59 	bl	8008d1c <__sflush_r>
 8008e6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e6c:	07da      	lsls	r2, r3, #31
 8008e6e:	4605      	mov	r5, r0
 8008e70:	d4e0      	bmi.n	8008e34 <_fflush_r+0xc>
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	059b      	lsls	r3, r3, #22
 8008e76:	d4dd      	bmi.n	8008e34 <_fflush_r+0xc>
 8008e78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e7a:	f7ff fa96 	bl	80083aa <__retarget_lock_release_recursive>
 8008e7e:	e7d9      	b.n	8008e34 <_fflush_r+0xc>
 8008e80:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <_fflush_r+0x70>)
 8008e82:	429c      	cmp	r4, r3
 8008e84:	d101      	bne.n	8008e8a <_fflush_r+0x62>
 8008e86:	68ac      	ldr	r4, [r5, #8]
 8008e88:	e7df      	b.n	8008e4a <_fflush_r+0x22>
 8008e8a:	4b04      	ldr	r3, [pc, #16]	; (8008e9c <_fflush_r+0x74>)
 8008e8c:	429c      	cmp	r4, r3
 8008e8e:	bf08      	it	eq
 8008e90:	68ec      	ldreq	r4, [r5, #12]
 8008e92:	e7da      	b.n	8008e4a <_fflush_r+0x22>
 8008e94:	0800918c 	.word	0x0800918c
 8008e98:	080091ac 	.word	0x080091ac
 8008e9c:	0800916c 	.word	0x0800916c

08008ea0 <_lseek_r>:
 8008ea0:	b538      	push	{r3, r4, r5, lr}
 8008ea2:	4d07      	ldr	r5, [pc, #28]	; (8008ec0 <_lseek_r+0x20>)
 8008ea4:	4604      	mov	r4, r0
 8008ea6:	4608      	mov	r0, r1
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	2200      	movs	r2, #0
 8008eac:	602a      	str	r2, [r5, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f7f7 ff84 	bl	8000dbc <_lseek>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d102      	bne.n	8008ebe <_lseek_r+0x1e>
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	b103      	cbz	r3, 8008ebe <_lseek_r+0x1e>
 8008ebc:	6023      	str	r3, [r4, #0]
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	20001f0c 	.word	0x20001f0c

08008ec4 <__swhatbuf_r>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	460e      	mov	r6, r1
 8008ec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ecc:	2900      	cmp	r1, #0
 8008ece:	b096      	sub	sp, #88	; 0x58
 8008ed0:	4614      	mov	r4, r2
 8008ed2:	461d      	mov	r5, r3
 8008ed4:	da08      	bge.n	8008ee8 <__swhatbuf_r+0x24>
 8008ed6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008eda:	2200      	movs	r2, #0
 8008edc:	602a      	str	r2, [r5, #0]
 8008ede:	061a      	lsls	r2, r3, #24
 8008ee0:	d410      	bmi.n	8008f04 <__swhatbuf_r+0x40>
 8008ee2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ee6:	e00e      	b.n	8008f06 <__swhatbuf_r+0x42>
 8008ee8:	466a      	mov	r2, sp
 8008eea:	f000 f8bb 	bl	8009064 <_fstat_r>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	dbf1      	blt.n	8008ed6 <__swhatbuf_r+0x12>
 8008ef2:	9a01      	ldr	r2, [sp, #4]
 8008ef4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008ef8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008efc:	425a      	negs	r2, r3
 8008efe:	415a      	adcs	r2, r3
 8008f00:	602a      	str	r2, [r5, #0]
 8008f02:	e7ee      	b.n	8008ee2 <__swhatbuf_r+0x1e>
 8008f04:	2340      	movs	r3, #64	; 0x40
 8008f06:	2000      	movs	r0, #0
 8008f08:	6023      	str	r3, [r4, #0]
 8008f0a:	b016      	add	sp, #88	; 0x58
 8008f0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f10 <__smakebuf_r>:
 8008f10:	898b      	ldrh	r3, [r1, #12]
 8008f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f14:	079d      	lsls	r5, r3, #30
 8008f16:	4606      	mov	r6, r0
 8008f18:	460c      	mov	r4, r1
 8008f1a:	d507      	bpl.n	8008f2c <__smakebuf_r+0x1c>
 8008f1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f20:	6023      	str	r3, [r4, #0]
 8008f22:	6123      	str	r3, [r4, #16]
 8008f24:	2301      	movs	r3, #1
 8008f26:	6163      	str	r3, [r4, #20]
 8008f28:	b002      	add	sp, #8
 8008f2a:	bd70      	pop	{r4, r5, r6, pc}
 8008f2c:	ab01      	add	r3, sp, #4
 8008f2e:	466a      	mov	r2, sp
 8008f30:	f7ff ffc8 	bl	8008ec4 <__swhatbuf_r>
 8008f34:	9900      	ldr	r1, [sp, #0]
 8008f36:	4605      	mov	r5, r0
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f7ff fa57 	bl	80083ec <_malloc_r>
 8008f3e:	b948      	cbnz	r0, 8008f54 <__smakebuf_r+0x44>
 8008f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f44:	059a      	lsls	r2, r3, #22
 8008f46:	d4ef      	bmi.n	8008f28 <__smakebuf_r+0x18>
 8008f48:	f023 0303 	bic.w	r3, r3, #3
 8008f4c:	f043 0302 	orr.w	r3, r3, #2
 8008f50:	81a3      	strh	r3, [r4, #12]
 8008f52:	e7e3      	b.n	8008f1c <__smakebuf_r+0xc>
 8008f54:	4b0d      	ldr	r3, [pc, #52]	; (8008f8c <__smakebuf_r+0x7c>)
 8008f56:	62b3      	str	r3, [r6, #40]	; 0x28
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	6020      	str	r0, [r4, #0]
 8008f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f60:	81a3      	strh	r3, [r4, #12]
 8008f62:	9b00      	ldr	r3, [sp, #0]
 8008f64:	6163      	str	r3, [r4, #20]
 8008f66:	9b01      	ldr	r3, [sp, #4]
 8008f68:	6120      	str	r0, [r4, #16]
 8008f6a:	b15b      	cbz	r3, 8008f84 <__smakebuf_r+0x74>
 8008f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f70:	4630      	mov	r0, r6
 8008f72:	f000 f889 	bl	8009088 <_isatty_r>
 8008f76:	b128      	cbz	r0, 8008f84 <__smakebuf_r+0x74>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f023 0303 	bic.w	r3, r3, #3
 8008f7e:	f043 0301 	orr.w	r3, r3, #1
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	89a0      	ldrh	r0, [r4, #12]
 8008f86:	4305      	orrs	r5, r0
 8008f88:	81a5      	strh	r5, [r4, #12]
 8008f8a:	e7cd      	b.n	8008f28 <__smakebuf_r+0x18>
 8008f8c:	08008205 	.word	0x08008205

08008f90 <__malloc_lock>:
 8008f90:	4801      	ldr	r0, [pc, #4]	; (8008f98 <__malloc_lock+0x8>)
 8008f92:	f7ff ba09 	b.w	80083a8 <__retarget_lock_acquire_recursive>
 8008f96:	bf00      	nop
 8008f98:	20001f00 	.word	0x20001f00

08008f9c <__malloc_unlock>:
 8008f9c:	4801      	ldr	r0, [pc, #4]	; (8008fa4 <__malloc_unlock+0x8>)
 8008f9e:	f7ff ba04 	b.w	80083aa <__retarget_lock_release_recursive>
 8008fa2:	bf00      	nop
 8008fa4:	20001f00 	.word	0x20001f00

08008fa8 <_free_r>:
 8008fa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008faa:	2900      	cmp	r1, #0
 8008fac:	d044      	beq.n	8009038 <_free_r+0x90>
 8008fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fb2:	9001      	str	r0, [sp, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f1a1 0404 	sub.w	r4, r1, #4
 8008fba:	bfb8      	it	lt
 8008fbc:	18e4      	addlt	r4, r4, r3
 8008fbe:	f7ff ffe7 	bl	8008f90 <__malloc_lock>
 8008fc2:	4a1e      	ldr	r2, [pc, #120]	; (800903c <_free_r+0x94>)
 8008fc4:	9801      	ldr	r0, [sp, #4]
 8008fc6:	6813      	ldr	r3, [r2, #0]
 8008fc8:	b933      	cbnz	r3, 8008fd8 <_free_r+0x30>
 8008fca:	6063      	str	r3, [r4, #4]
 8008fcc:	6014      	str	r4, [r2, #0]
 8008fce:	b003      	add	sp, #12
 8008fd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008fd4:	f7ff bfe2 	b.w	8008f9c <__malloc_unlock>
 8008fd8:	42a3      	cmp	r3, r4
 8008fda:	d908      	bls.n	8008fee <_free_r+0x46>
 8008fdc:	6825      	ldr	r5, [r4, #0]
 8008fde:	1961      	adds	r1, r4, r5
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	bf01      	itttt	eq
 8008fe4:	6819      	ldreq	r1, [r3, #0]
 8008fe6:	685b      	ldreq	r3, [r3, #4]
 8008fe8:	1949      	addeq	r1, r1, r5
 8008fea:	6021      	streq	r1, [r4, #0]
 8008fec:	e7ed      	b.n	8008fca <_free_r+0x22>
 8008fee:	461a      	mov	r2, r3
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	b10b      	cbz	r3, 8008ff8 <_free_r+0x50>
 8008ff4:	42a3      	cmp	r3, r4
 8008ff6:	d9fa      	bls.n	8008fee <_free_r+0x46>
 8008ff8:	6811      	ldr	r1, [r2, #0]
 8008ffa:	1855      	adds	r5, r2, r1
 8008ffc:	42a5      	cmp	r5, r4
 8008ffe:	d10b      	bne.n	8009018 <_free_r+0x70>
 8009000:	6824      	ldr	r4, [r4, #0]
 8009002:	4421      	add	r1, r4
 8009004:	1854      	adds	r4, r2, r1
 8009006:	42a3      	cmp	r3, r4
 8009008:	6011      	str	r1, [r2, #0]
 800900a:	d1e0      	bne.n	8008fce <_free_r+0x26>
 800900c:	681c      	ldr	r4, [r3, #0]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	6053      	str	r3, [r2, #4]
 8009012:	4421      	add	r1, r4
 8009014:	6011      	str	r1, [r2, #0]
 8009016:	e7da      	b.n	8008fce <_free_r+0x26>
 8009018:	d902      	bls.n	8009020 <_free_r+0x78>
 800901a:	230c      	movs	r3, #12
 800901c:	6003      	str	r3, [r0, #0]
 800901e:	e7d6      	b.n	8008fce <_free_r+0x26>
 8009020:	6825      	ldr	r5, [r4, #0]
 8009022:	1961      	adds	r1, r4, r5
 8009024:	428b      	cmp	r3, r1
 8009026:	bf04      	itt	eq
 8009028:	6819      	ldreq	r1, [r3, #0]
 800902a:	685b      	ldreq	r3, [r3, #4]
 800902c:	6063      	str	r3, [r4, #4]
 800902e:	bf04      	itt	eq
 8009030:	1949      	addeq	r1, r1, r5
 8009032:	6021      	streq	r1, [r4, #0]
 8009034:	6054      	str	r4, [r2, #4]
 8009036:	e7ca      	b.n	8008fce <_free_r+0x26>
 8009038:	b003      	add	sp, #12
 800903a:	bd30      	pop	{r4, r5, pc}
 800903c:	20001f04 	.word	0x20001f04

08009040 <_read_r>:
 8009040:	b538      	push	{r3, r4, r5, lr}
 8009042:	4d07      	ldr	r5, [pc, #28]	; (8009060 <_read_r+0x20>)
 8009044:	4604      	mov	r4, r0
 8009046:	4608      	mov	r0, r1
 8009048:	4611      	mov	r1, r2
 800904a:	2200      	movs	r2, #0
 800904c:	602a      	str	r2, [r5, #0]
 800904e:	461a      	mov	r2, r3
 8009050:	f7f7 fe70 	bl	8000d34 <_read>
 8009054:	1c43      	adds	r3, r0, #1
 8009056:	d102      	bne.n	800905e <_read_r+0x1e>
 8009058:	682b      	ldr	r3, [r5, #0]
 800905a:	b103      	cbz	r3, 800905e <_read_r+0x1e>
 800905c:	6023      	str	r3, [r4, #0]
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	20001f0c 	.word	0x20001f0c

08009064 <_fstat_r>:
 8009064:	b538      	push	{r3, r4, r5, lr}
 8009066:	4d07      	ldr	r5, [pc, #28]	; (8009084 <_fstat_r+0x20>)
 8009068:	2300      	movs	r3, #0
 800906a:	4604      	mov	r4, r0
 800906c:	4608      	mov	r0, r1
 800906e:	4611      	mov	r1, r2
 8009070:	602b      	str	r3, [r5, #0]
 8009072:	f7f7 fe88 	bl	8000d86 <_fstat>
 8009076:	1c43      	adds	r3, r0, #1
 8009078:	d102      	bne.n	8009080 <_fstat_r+0x1c>
 800907a:	682b      	ldr	r3, [r5, #0]
 800907c:	b103      	cbz	r3, 8009080 <_fstat_r+0x1c>
 800907e:	6023      	str	r3, [r4, #0]
 8009080:	bd38      	pop	{r3, r4, r5, pc}
 8009082:	bf00      	nop
 8009084:	20001f0c 	.word	0x20001f0c

08009088 <_isatty_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4d06      	ldr	r5, [pc, #24]	; (80090a4 <_isatty_r+0x1c>)
 800908c:	2300      	movs	r3, #0
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	602b      	str	r3, [r5, #0]
 8009094:	f7f7 fe87 	bl	8000da6 <_isatty>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d102      	bne.n	80090a2 <_isatty_r+0x1a>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	b103      	cbz	r3, 80090a2 <_isatty_r+0x1a>
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	bd38      	pop	{r3, r4, r5, pc}
 80090a4:	20001f0c 	.word	0x20001f0c

080090a8 <_init>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	bf00      	nop
 80090ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ae:	bc08      	pop	{r3}
 80090b0:	469e      	mov	lr, r3
 80090b2:	4770      	bx	lr

080090b4 <_fini>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	bf00      	nop
 80090b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ba:	bc08      	pop	{r3}
 80090bc:	469e      	mov	lr, r3
 80090be:	4770      	bx	lr
